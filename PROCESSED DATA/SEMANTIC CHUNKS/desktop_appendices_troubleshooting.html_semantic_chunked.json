{
    "file_name": "desktop_appendices_troubleshooting.html",
    "file_path": "./owncloud_docs\\desktop_appendices_troubleshooting.html",
    "chunks": [
        {
            "cluster": 0,
            "chunk_content": "Documentation for ownCloud (A Kiteworks Company)\nDesktop App\nIntroduction\nInstalling the Desktop App\nUsing the Desktop App\nUsing the Virtual Filesystem\nFilename Considerations\nManage Synchronisation Conflicts\nOpen Files with Office Web Apps\nAutomatic Updating\nRemoving the Desktop App\nFAQ\nAdvanced Usage\nCommand Line Parameters\nConfiguration File\nEnvironment Variables\nLow Disk Space\nThe Command Line Client\nAppendices\nHistory and Architecture\nTroubleshooting\nDesktop App\n5.3\nDesktop App\nnext\n5.3\n5.2\nInfinite Scale Documentation\nnext\n7.1\n7.0\nMobile App for Android\nnext\n4.5\n4.4\nMobile App for iOS\nnext\n12.4\n12.3\nownCloud Main Page\nownCloud Server\nnext\n10.15\n10.14\nownCloud Web User Interfaces\nnext\nDesktop App\nAppendices\nTroubleshooting\nnext\n5.3\n5.2\nEdit this Page\nAppendix Troubleshooting\nTable of Contents\nIntroduction\nIdentifying Basic Functionality Problems\nDirectory Modification Time\nCSync Unknown Error\nError Updating Metadata Access Denied\nIsolating Other Issues\nLog Files\nObtaining the Desktop App Log File\nLogging to a Temporary Directory\nLog HTTP Requests and Responses\nSaving Files Directly\nLogging in the Console\nControl Log Content\nInstaller Log Files\nWindows Installer Logging\nmacOS Installer Logging\nownCloud Server Log File\nWebserver Log Files\nCrash Reports\nCore Dumps\nIntroduction\nWhen reporting bugs, it is helpful if you first determine what part of the system is causing the issue. To assist the ownCloud support personnel, please try to provide as many relevant logs as possible. Logging to a Temporary Directory\nOpen the ownCloud Desktop App. You’ll find the\nX-REQUEST-ID\nin the\nowncloud.log\n, and you can configure your web server to add the\nX-REQUEST-ID\nto the logs. Saving Files Directly\nThe ownCloud Desktop App allows you to save log files directly to a custom file or directory. As an example, write logs to a defined directory with increased verbosity using Linux:\nowncloud --logdir /tmp/owncloud_logs --logdebug\nLogging in the Console\nIf the ownCloud Desktop App isn’t able to start and immediately crashes the first two options are not available. Therefore, it might be necessary to start the ownCloud Desktop App using the command line in order to see the error message\nOn Linux and Mac simply open the terminal and run:\nowncloud --logfile - --logflush\nOn Windows open a PowerShell and run the following command:\n& 'C:\\Program Files\\ownCloud\\owncloud.exe' --logfile - --logflush\nMake sure to copy the whole command and adjust the path to your\nowncloud.exe\n, if you have chosen to install the Desktop App in a different path. ownCloud Server Log File\nThe ownCloud server also maintains an ownCloud specific log file. This log file must be enabled through the ownCloud Administration page. You can view the server log file using the web interface or you can open it directly from the file system in the ownCloud server data directory. Webserver Log Files\nIt can be helpful to view your webserver’s error log file to isolate any ownCloud-related problems. This report contains valuable information for ownCloud to debug the root cause. This report is not sent to ownCloud automatically by the Desktop app, the user has to confirm to do so. If users agree to send the crash report, they get a reference ID that can be used in communication with ownCloud for this issue. Obtaining a core dump file can assist ownCloud Customer Support tremendously in the debugging process. To enable the writing of core dump files, you must define the\nOWNCLOUD_CORE_DUMP\nenvironment variable on the system. For example:\nOWNCLOUD_CORE_DUMP=1 owncloud\nThis command starts the Desktop App with core dumping enabled and saves the files in the current working directory. Also, due to their size, we strongly recommend that you properly compress any core dump files prior to sending them to ownCloud Customer Support. History and Architecture\nAbout ownCloud\nThe Secure Collaboration Platform\nNews\nPrivacy statement\nImprint\nResources\nFAQ\nHelp\nSecurity\nChangelog\nGet started\nInteract\nRocket.Chat\nForum\nContribute\nCustomer support\n© Copyright 2011-2025, The ownCloud developers."
        },
        {
            "cluster": 2,
            "chunk_content": "The following two general issues can result in failed synchronization:\nThe instance setup is incorrect. Identifying Basic Functionality Problems\nPerforming a general ownCloud Server test\nThe first step in troubleshooting synchronization issues is to verify that you can log on to the ownCloud web application. To verify connectivity to the ownCloud server try logging in via your Web browser. Ensure the WebDAV API is working\nIf all Desktop Apps fail to connect to the ownCloud Server, but access using the Web interface functions properly, the problem is often a misconfiguration of the WebDAV API. The ownCloud Desktop App uses the built-in WebDAV access of the server content. Verify that you can log on to ownCloud’s WebDAV server. To verify connectivity with the ownCloud WebDAV server, open a browser window and enter the address to the ownCloud WebDAV server. For example, if your ownCloud instance is installed at\nhttps://yourserver.com/owncloud\n, your WebDAV server address is\nhttps://yourserver.com/owncloud/remote.php/webdav\n. If you are prompted for your username and password but, after providing the correct credentials, authentication fails, please ensure that your authentication backend is configured properly. Use a WebDAV command line tool to test\nA more sophisticated test method for troubleshooting synchronization issues is to use a WebDAV command line client and log into the ownCloud WebDAV server. You can use this application to further verify that the WebDAV server is running properly using PROPFIND calls. As an example, after installing the\ncadaver\napp, you can issue the\npropget\ncommand to obtain various properties pertaining to the current directory and also verify WebDAV server connection. Directory Modification Time\nownCloud does not preserve the mtime (modification time) of directories, though it does update the mtimes on files. This can happen if the standard permissions of the folder where the synced data resides has been changed for the owning user. Isolating Other Issues\nOther issues can affect synchronization of your ownCloud files:\nIf you find that the results of the synchronizations are unreliable, please ensure that the folder to which you are synchronizing is not shared with other synchronization applications. Synchronizing the same directory with ownCloud and other synchronization software such as Unison, rsync, Microsoft Windows Offline Folders, or other cloud services such as Dropbox or Microsoft SkyDrive is not supported and should not be attempted. In the worst case, it is possible that synchronizing folders or files using ownCloud and other synchronization software or services can result in data loss. If you are operating your own server, and use the local storage backend (the default), make sure that ownCloud has exclusive access to the directory. The data directory on the server is exclusive to ownCloud and must not be modified manually."
        },
        {
            "cluster": 3,
            "chunk_content": "The Desktop App contains a bug. CSync Unknown Error\nIf you see this error message stop your Desktop App, delete the\n._sync_xxxxxxx.db\nfile, and then restart your Desktop App. There is a hidden\n._sync_xxxxxxx.db\nfile inside the folder of every account configured on your Desktop App. Error Updating Metadata Access Denied\nThere are very rare cases when using Windows and VFS, where the Desktop app complains about denied access. To do so, you can start the Desktop app with startup flags. Need more information on this. Crash Reports\nIt may happen that the Desktop App unexpectedly crashes due to unforeseen or unhandled circumstances. Crash Report Created\nCrash Report Sent\nCore Dumps\nOn macOS and Linux systems, and in the unlikely event the Desktop App software crashes, the Desktop App is able to write a core dump file."
        },
        {
            "cluster": 4,
            "chunk_content": "If you are not prompted for your username and password, or if a red warning box appears on the page, your server setup requires modification. Please verify that your server installation is working correctly. One such command line client — called\ncadaver\n— is available for Linux distributions. Please note that this will also erase some of your settings about which files to download. The log contains the following message, including the source file for reference:\n\"WindowsError: ffffffff80070005: Access is denied.\" To resolve this issue, the owning user needs\nFull Control\n. See the example images below how this should look like. You can get there by\nright click on the folder name\nProperties\n:\nIf the permission is not set to\nFull Control\n, you can either correct it or ask your administrator for support. If you find that only specific files are not synchronized, the synchronization protocol might be having an effect. Some files are automatically ignored because they are system files, other files might be ignored because their filename contains characters that are not supported on certain file systems. For more detailed information see\nthe Ignored Files section\n. If you are using a different file backend on the server, you can try to exclude a bug in the backend by reverting to the built-in backend. If you are experiencing slow upload/download speed or similar performance issues be aware that those could be caused by on-access virus scanning solutions, either on the server (like the\nfiles_antivirus app\n) or the Desktop App. Only upload them if you are comfortable sharing the information. Note that each sync run creates a new file. Just run the *.PKG as usual. Perhaps it is detailed in the Admin Guide and a link should be provided from here. I will look into that when I begin heavily editing the Admin Guide. Core dump files can be fairly large. Before enabling core dumps on your system, ensure that you have enough disk space to accommodate these files."
        },
        {
            "cluster": 1,
            "chunk_content": "Log Files\nEffectively debugging software requires as much relevant information as can be obtained. Log output can help with tracking down problems and, if you report a bug, log output can help to resolve an issue more quickly. The Desktop App log file is often the most helpful log to provide. Obtaining the Desktop App Log File\nThere are several ways to produce log files. The most commonly useful is enabling logging to a temporary directory, described first. Desktop App log files contain file and folder names, metadata, server URLs and other private information. Logs are often essential for tracking down a problem though, so please consider providing them to developers privately. Either\nclick\nSettings\nAdvanced\nLog Settings\nor\npress\nF12\nor\nCtrl-L\nor\nCmd+L\non your keyboard. The Log Output window opens. Enable the\nEnable logging to temporary folder\ncheckbox. Later, to find the log files, click the\nOpen folder\nbutton. Select the logs for the time frame in which the issue occurred. That the choice to enable logging will be persisted across Desktop App restarts. Log HTTP Requests and Responses\nWhen HTTP logging is enabled, log files will contain additional entries:\n23-09-01 16:31:14:031 [ info sync.httplogger ]:\t\"eca37889-6dea-42cf-81a2-c3826efbf146: Request: GET https://cloud.example…\n23-09-01 16:31:14:143 [ info sync.httplogger ]:\t\"eca37889-6dea-42cf-81a2-c3826efbf146: Response: GET 200 (112ms) https://cloud.example…\nLog Content\nDescription\n23-09-01 16:31:14:031\nTimestamp\n[ info sync.httplogger ]\nLog item category label\neca37889-6dea-42cf-81a2-c3826efbf146\nX-REQUEST-ID\nto find corresponding requests and responses and to find related entries in\nowncloud.log\nor Apache logs\nHeader: { }\nList of all HTTP headers\nData: []\nHTTP bodies (JSON, XML)\n(112ms)\nDuration of the response (since the request was sent)\nThe ownCloud desktop app sends the\nX-REQUEST-ID\nheader with every request. Here you can find more information at\nRequest Tracing\n. This is a useful option for easily reproducible problems, as well as for cases where you want logs to be saved to a different location. To save log files to a file or a directory:\nThe\n--logfile <file>\nflag forces the Desktop app to save the log to a file, where\n<file>\nis the filename to which you want to save the file. The\n--logdir <dir>\nflag forces the Desktop app to save the log into the specified directory, where\n<dir>\nis an existing directory. When adding the\n--logdebug\nflag to any of the flags above, the verbosity of the generated log files increases. To limit the number of log files created, use the general setting by:\nclicking\nSettings\nAdvanced\nLog Settings\nLog files to keep\nor\npress\nF12\nor\nCtrl-L\nor\nCmd+L\non your keyboard. To further increase the verbosity of the output you can also combine these commands with the following argument:\n--logdebug\nControl Log Content\nThanks to the Qt framework, logging can be controlled at run-time through the QT_LOGGING_RULES environment variable. Exclude log item categories\nQT_LOGGING_RULES='gui.socketapi=false;sync.database*=false' \\\n/PATH/TO/CLIENT \\\n--logdebug --logfile <file>\nAdd HTTP logging entries\nQT_LOGGING_RULES='sync.httplogger=true' \\\n/PATH/TO/CLIENT \\\n--logdebug --logfile <file>\nOnly show specific log item categories\nQT_LOGGING_RULES='*=false;sync.httplogger=true' \\\n/PATH/TO/CLIENT \\\n--logdebug --logfile <file>\nInstaller Log Files\nWindows Installer Logging\nIn case you experience issues, you can run the installer with logging enabled:\nmsiexec /i ownCloud-4.1.0.11250.x64.msi /L*V \"C:\\log\\example.log\"\nSee the:\nHow do I create an installation log\ndocumentation for more information about the msiexec.exe command and logging. macOS Installer Logging\nThe macOS installer brings its own log console. At the first install screen in the menu bar, click\nWindow\nInstaller Log (Command + L)\n. On that page, you can adjust the log level. We recommend that when setting the log file level that you set it to a verbose level like\nDebug\nor\nInfo\n. How is the log file accessed? Need to explore procedural steps in access and in saving this file, similar to how the log file is managed for the Desktop App. For Apache on Linux, the error logs are typically located in the\n/var/log/apache2\ndirectory. Some helpful files include the following:\nerror_log\n— Maintains errors associated with PHP code. access_log\n— Typically records all requests handled by the server; very useful as a debugging tool because the log line contains information specific to each request and its result. Here you can find more information about\nApache logging\n. In such a case, a crash report is generated. Crash reports are available for the following environments:\nWindows\nMac (currently x64 only)\nLinux packages\nLinux AppImage\nThe following table shows a crash report window before and after it has been sent."
        }
    ]
}