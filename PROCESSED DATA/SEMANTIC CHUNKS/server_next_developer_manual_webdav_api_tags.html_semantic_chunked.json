{
    "file_name": "server_next_developer_manual_webdav_api_tags.html",
    "file_path": "./owncloud_docs\\server_next_developer_manual_webdav_api_tags.html",
    "chunks": [
        {
            "cluster": 3,
            "chunk_content": "Documentation for ownCloud (A Kiteworks Company)\nownCloud Server\nIntroduction\nAdmin Manual\nIntroduction\nUseful Pages\nFAQ\nGDPR\nInstallation\nDeployment Considerations\nDeployment Recommendations\nNFS\nSystem Requirements\nConfiguration Notes and Tips\nInstallation Options\nInstalling With Docker\nManual Installation on Linux\nDetailed Installation Guide\nDetailed Installation on Ubuntu (various versions)\nQuick Installation Guide\nOn Ubuntu 20.04\nOn Ubuntu 22.04\nLinux Package Manager\nLinux Package Manager Installation\nThe Installation Wizard\nTroubleshooting\nChanging Your ownCloud URL\nInstalling and Managing Apps\nSupported Apps\nMedia Viewer\nSELinux Configuration\nUsing Let’s Encrypt SSL Certificates\nUsing Letsencrypt\nApache\nConfiguration\nDatabase\nDatabase Conversion\nDatabase Configuration\nEncryption\nEncryption Configuration\nEncryption Configuration Quick Guide\nExternal Storage\nExternal Storage Configuration\nExternal Storage Authentication Mechanisms\nAmazonS3\nDropbox\nFTP\nGoogle\nLocal\nownCloud\nS3 as Primary\nSFTP\nSMB\nWebDAV\nFiles and Sharing\nBig File Upload Configuration\nManual File Locking\nDefault Files Configuration\nFederated Cloud Sharing Configuration\nFile Sharing Configuration\nFile Versioning\nTransactional File Locking\nPreview Configuration\nMimetypes\nManaging the Trashbin\nIntegration\nMicrosoft Teams\nownCloud App for Splunk\nGeneral Topics\nCode Signing\nImpersonate Users\nFull Text Search\nServer\nActivity Configuration\nBackground Jobs Configuration\nCaching Configuration\nConfig Sample PHP Parameters\nConfig Apps Sample PHP Parameters\nCustom Client Repos\nEmail Configuration\nExcluded Blacklisted Files\nExternal Sites\nHarden Server\nImport SSL Cert\nIndex PHP Less URLs\nOCC Command\nLanguage Configuration\nLegal Settings Configuration\nLogging\nLogging Configuration\nRequest Tracing\nReverse Proxy Configuration\nSecurity\nBrute-Force Protection\nOAuth2\nPassword policy\nSecurity Setup Warnings\nThe HSM (Hardware Security Module) Daemon\nDependency Notes\nServer Tuning\nThird Party PHP Configuration\nVirus Scanner Support\nUI Configuration\nUser\nUser Management\nUser Roles\nReset Admin Password\nReset User Password\nUser Auth FTP SMB IMAP\nUser Auth LDAP\nUser Auth Two-Factor\nUser Auth OAuth2\nUser Provisioning API\nCustom Groups App\nGuests App\nOpenID Connect (OIDC)\nLogin Policies\nMaintenance\nUpgrading\nManual Upgrade\nDatabase Upgrade\nUpgrading from Package\nUsing the Updater App\nUpgrading PHP\nMarketplace Apps\nBackup and Restore\nBackup\nRestore\nMaintenance Mode\nExport and Import Instance Data\nManually Moving Data Folders\nEncryption\nMigrating from User Key to Master Key Encryption\nMigrating to a Different Server\nMigrating to Kiteworks PCN\nEnterprise\nAuthentication\nEnterprise Only Authentication\nKerberos Authentication\nClients\nCustom Client Repos\nCollaboration\nCollabora Online / Secure View\nMicrosoft Office Online / WOPI Integration\nDocument Classification\nClassify Documents and Enforce Policies\nExternal Storage\nLDAP Home Connector Configuration\nSharepoint integration Configuration\nWindows Network Drive Configuration\nWND Configuration Quick Guide\nFile Management\nFile Tagging\nFile Lifecycle Management\nFirewall\nFile Firewall\nInstallation\nInstalling & Upgrading ownCloud Enterprise Edition\nOracle DB Setup & Configuration\nLogging\nAuditing\nReporting\nMetrics\nGenerate a Config Report\nSecurity\nRansomware Protection\nUser Management\nShibboleth Integration\nSAML 2.0 Based SSO\nTroubleshooting\nGeneral Troubleshooting\nPath and Filename Length Limitations\nRetrieve Log Files and Configuration Settings\nRemove Non-Existent Background Jobs\nFound a Mistake? Developer Manual\nIntroduction\nGeneral Contributor Guidelines\nCommunity Code of Conduct\nCoding Style & General Guidelines\nDebugging\nPerformance Considerations\nSecurity Guidelines\nBackporting\nHelp and Communication\nDeveloping ownCloud Core\nIntroduction\nSetup Your Development Environment\nApplication Configuration\nTheming\nTranslation\nCode Standards Compliance\nTesting\nownCloud Test Pilots\nDrone Testing\nUnit Testing\nAcceptance Tests\nUser Interface Testing\nAvailable APIs\nThe External API\nThe Provisioning API\nOCS\nThe OCS Notifications API (v1)\nThe OCS REST API\nThe OCS Recipient API\nThe OCS Share API\nThe OCS TOTP Validation API\nThe OCS User Sync API\nNotify Public Link By Email\nThe Roles API\nWebDAV APIs\nThe Comments API\nThe Custom Groups Management API\nThe Files Versions API\nThe Meta API\nThe Search API\nThe Tags API\nThe Trash Bin API\nThe Public Files API\nApplication Development\nFundamental Concepts\nApplication Metadata\nThe Classloader\nConfiguration\nRouting\nControllers\nTemplates\nJavaScript\nCSS\nMiddleware\nDatabase Connectivity\nBackground Jobs\nLogging\nTesting\nThe DI Container\nFilesystem\nRESTful API\nHooks\nPublishing in the ownCloud Marketplace\nChangelog\nMarket App\nAdvanced Concepts\nCustom Filesystem Caches\nCustom Storage Backends\nNotifications\nStorage Backends\nExternal Storage Backends\nTranslation\nTwo-Factor Providers\nUser Management\nCode Signing\nTutorial\nMinimum Requirements\nThe Request Life Cycle\nThe Core Application Files\nRoutes and Controllers\nDatabase Connectivity\nCreate Template Content\nCreate a Navigation Menu\nAdd JavaScript and CSS\nWiring it Up\nApply the Finishing Touches\nAdd a RESTful API\nWriting Tests\nMobile Development\nAndroid\nLibrary Installation\nExamples\niOS\nLibrary Installation\nExamples\nBugtracker\nCode Reviews\nBug Triaging\nFound a Mistake? ownCloud Server UI\nIntroduction\nThe WebUI\nWeb Interface\nNavigating the WebUI\nPersonal Settings\nGeneral\nStorage\nSharing\nSecurity\nCustom Groups\nFiles\nAccess WebDAV\nSharing Files\nSearch & Full Text Search\nTagging Files\nComments\nVersion Control\nEncrypting Files\nManaging Deleted Files\nLarge File Uploads\nManual File Locking\nFile Lifecycle Management\nPublic Link Shares\nFederated Cloud Sharing\nManaging Connected Browsers and Devices\nOnline Collaboration\nStorage Quotas\nExternal Storage\nConnecting to SharePoint\nDesktop Mobile Sync\nApps\nActivity\nCalendar\nContacts\nMarket\nMedia Viewer App\nIntegration\nMicrosoft Teams\nSynchronization Clients\nSync iOS\nSync KDE\nSync OSX\nSync Thunderbird\nTroubleshooting\nFound a Mistake? In short, it provides all of the functionality available through the UI,\nfrom the command-line. This makes the information more maintainable."
        },
        {
            "cluster": 4,
            "chunk_content": "ownCloud Server\nnext\nDesktop App\nnext\n5.3\n5.2\nInfinite Scale Documentation\nnext\n7.1\n7.0\nMobile App for Android\nnext\n4.5\n4.4\nMobile App for iOS\nnext\n12.4\n12.3\nownCloud Main Page\nownCloud Server\nnext\n10.15\n10.14\nownCloud Web User Interfaces\nnext\nownCloud Server\nDeveloper Manual\nDeveloping ownCloud Core\nAvailable APIs\nWebDAV APIs\nThe Tags API\nnext\n10.15\n10.14\nEdit this Page\nTags API\nTable of Contents\nIntroduction\nList Tags\nCreate Tags\nUpdate Tags\nDelete Tags\nRetrieve the Tag IDs and Metadata of a Given File\nAssign a Tag to a File\nUnassign a Tag From a File\nCreate and Assign a Tag at the Same Time\nRetrieve All Files Tagged with a Tag ID\nIntroduction\nThe tags API provides extensive support for managing tags within ownCloud. List Tags\nRequest Path\nMethod\nContent Type\nremote.php/dav/systemtags\nPROPFIND\ntext/plain\nTo retrieve a list of all tags, stored in your ownCloud installation, you need to make an authenticated\nPROPFIND\nrequest, as in the example below. To clarify,\ndisplay-name\ncontains the visible tag name. Create Tags\nRequest Path\nMethod\nContent Type\nremote.php/dav/systemtags\nPOST\napplication/json\nTo create a tag, you need to send an authenticated\nPOST\nrequest with a JSON body containing the details of the tag to create. The example below shows how to create a tag with the name\ntest5\n, which is visible to all users. However, if the tag is created successfully a status of\nHTTP/1.1 201 Created\nwill be sent, and the location (and id) of the new tag will be available in the Content-Location header. For example:\nContent-Location: /remote.php/dav/systemtags/15\n. Update Tags\nRequest Path\nMethod\nContent Type\nremote.php/dav/systemtags/<tagid>\nPROPPATCH\ntext/xml\nTo update an existing tag, you need to send an authenticated\nPROPPATCH\nrequest and provide a\nPROPFIND\nXML element in the body. <?xml version=\"1.0\" encoding=\"utf-8\"?>\n<d:error xmlns:d=\"DAV:\" xmlns:s=\"http://sabredav.org/ns\">\n<s:exception>Sabre\\DAV\\Exception\\NotFound</s:exception>\n<s:message>Tag with id 15 not found</s:message>\n</d:error>\nRetrieve the Tag IDs and Metadata of a Given File\nRequest Path\nMethod\nContent Type\nremote.php/dav/systemtags-relations/files/<fileid>\nPROPFIND\ntext/xml\nTo retrieve the tag ids and metadata of a given file, send an authenticated\nPROPFIND\nrequest, specifying the path to the file to retrieve the information from. The sample below, which for the purposes of\nthis example we’ll store in a file called\nreport-propfind.xml\n, will\nreturn the\ndisplay-name\n,\nuser-visible\n,\nuser-assignable\n, and\nid\nvalues\nfor each tag. Unassign a Tag From a File\nRequest Path\nMethod\nContent Type\nremote.php/dav/systemtags-relations/files/<fileid>/<tagid>\nDELETE\ntext/xml\nTo un-assign or remove a tag from a file, send an authenticated\nDELETE\nrequest specifying the path to the file and the tag to remove. Create and Assign a Tag at the Same Time\nRequest Path\nMethod\nContent Type\nremote.php/dav/systemtags-relations/files/<fileid>\nPOST\napplication/json\nIn addition to assigning existing tags to a file, you can also create a\nnew tag and assign it to a file in one request. You do this by sending\nan authenticated\nPOST\nrequest specifying the path to the file and a\nJSON body containing the details of the tag to create. The new tag will be created and assigned, effectively, in one atomic\noperation. Retrieve All Files Tagged with a Tag ID\nRequest Path\nMethod\nContent Type\nremote.php/webdav/\nREPORT\ntext/xml\nTo retrieve all the files tagged with a given tag id send an\nauthenticated\nREPORT\nrequest with a\nPROPFIND\nelement in the request\nbody containing the tag id to filter on and the list of properties to\nreturn. The sample a\nPROPFIND\nelement below, which for the purposes of this\nexample we’ll store in a file called\nreport-propfind.xml\n, will return\nevery tag property, and will filter on tag id 17."
        },
        {
            "cluster": 0,
            "chunk_content": "curl --silent -u username:password \\\n-X PROPFIND \\\n'http://localhost/remote.php/dav/systemtags' | xmllint --format -\nThe curl examples use\nxmllint\n, available in the libxml2 package, to make the response easier to read. If you want to retrieve more detailed information, you need to supply a\nPROPFIND\nelement in the request body, containing all the properties that you want to retrieve in the response. curl --silent -u username:password \\\n-X PROPFIND \\\n-H \"Content-Type: text/xml\" \\\n--data-binary \"@report-propfind.xml\" \\\n'http://localhost/remote.php/dav/systemtags' | xmllint --format -\nWe encourage you to store this in a separate file and use the\n--data-binary\nswitch to include it in the request, instead of supplying the information in the command directly. curl -u username:password \\\n-X POST \\\n-H \"Content-Type: application/json\" \\\n--data-binary '{\"name\":\"test5\",\"userVisible\":\"true\",\"userAssignable\":\"true\"}' \\\n\"http://localhost/remote.php/dav/systemtags\"\nAvailable Parameters\nParameter\nType\nLength\nRequired\nname\nstring\nyes\nuserVisible\nboolean\nno\nuserAssignable\nboolean\nno\nResponse\nRegardless of success or failure, no response body is returned. Below is an example request, which will change the tag with the id of 15.\ncurl -u username:password -X PROPPATCH \\\n-H \"Content-Type: text/xml\" \\\n--data-binary '@update-tag.xml' \\\n\"http://localhost/remote.php/dav/systemtags/15\" | xmllint --format -\nBelow is an example\nPROPPATCH\nelement, which changes the message text but leaves the rest of the message unchanged. curl -u username:password -X DELETE 'http://localhost/remote.php/dav/systemtags/15'\nIf the comment was successfully deleted, an\nHTTP/1.1 204 No Content\nstatus will be returned but with no response body. curl -u username:password -X PROPFIND \\\n-H \"Content-Type: text/xml\" \\\n--data-binary '@report-propfind.xml' \\\n\"http://localhost/remote.php/dav/systemtags-relations/files/4\" | xmllint --format -\nBelow is an example of the response returned from this request:\n<?xml version=\"1.0\"?>\n<d:multistatus xmlns:d=\"DAV:\" xmlns:s=\"http://sabredav.org/ns\" xmlns:cal=\"urn:ietf:params:xml:ns:caldav\" xmlns:cs=\"http://calendarserver.org/ns/\" xmlns:card=\"urn:ietf:params:xml:ns:carddav\" xmlns:oc=\"http://owncloud.org/ns\">\n<d:response>\n<d:href>/remote.php/dav/systemtags-relations/files/4/2</d:href>\n<d:propstat>\n<d:prop>\n<oc:display-name>test</oc:display-name>\n<oc:user-visible>true</oc:user-visible>\n<oc:user-assignable>true</oc:user-assignable>\n<oc:id>2</oc:id>\n</d:prop>\n<d:status>HTTP/1.1 200 OK</d:status>\n</d:propstat>\n</d:response>\nAssign a Tag to a File\nRequest Path\nMethod\nContent Type\nremote.php/dav/systemtags-relations/files/<fileid>/<tagid>\nPUT\ntext/xml\nTo assign a tag to a file, send an authenticated\nPUT\nrequest\nspecifying the path to the file to tag. Here is an example of how to do\nit using Curl. curl -u username:password -X PUT \\\n-H \"Content-Type: text/xml\" \\\n\"http://localhost/remote.php/dav/systemtags-relations/files/4/6\"\nResponse\nIf the request is successful, no response body will be returned, but an\nHTTP/1.1 201 Created\nstatus will be returned. Here is\nan example of how to do it using Curl. curl --silent --verbose -u username:password -X DELETE \\\n-H \"Content-Type: text/xml\" \\\n\"http://localhost/remote.php/dav/systemtags-relations/files/4/6\"\nResponse\nIf the request is successful, no response body will be returned, but an\nHTTP/1.1 204 No Content\nstatus will be returned. Here is an example of how to do it using Curl. curl --silent --verbose -u username:password -X POST \\\n-H \"Content-Type: application/json\" \\\n--data-binary '{\"name\":\"variabletag\",\"userVisible\":\"true\",\"userAssignable\":\"true\"}' \\\n\"http://localhost/remote.php/dav/systemtags-relations/files/4\"\nIf the request is successful, no response body will be returned, but an\nHTTP/1.1 201 Created\nstatus will be returned. curl --silent --verbose -u username:password -X REPORT \\\n-H \"Content-Type: text/xml\" \\\n--data-binary \"@find-tags-by-file.xml\" \\\n\"http://localhost/remote.php/webdav/\" | xmllint --format -\nResponse\nA successful response which you can see an example of below, along with\na status of\nHTTP/1.1 207 Multi-Status\nwill be returned."
        },
        {
            "cluster": 2,
            "chunk_content": "This request will return an XML response similar to this example and a status of:\nHTTP/1.1 207 Multi-Status\n. If a tag with the name supplied already exists a status of\nHTTP/1.1 409 Conflict\nwill be sent. In addition an\nHTTP/1.1 207 Multi-Status\nstatus will also be returned. However, if the comment does not exist, then the following response will be returned, along with an\nHTTP/1.1 404 Not Found\nstatus. If the request is not\nsuccessful, then either an\nHTTP/1.1 404 Not Found\nor an\nHTTP/1.1 409 Conflict\nstatus will be returned. A 404 status is\nreturned if the file or folder doesn’t exist. A 409 status is returned\nif the tag has already been assigned to that file or folder. If the request is not\nsuccessful, likely because the tag was not assigned to the file or\nfolder, then an\nHTTP/1.1 404 Not Found\nstatus will be returned. If the request is not\nsuccessful, likely because the tag already exists, then an\nHTTP/1.1 409 Conflict\nstatus will be returned."
        },
        {
            "cluster": 1,
            "chunk_content": "<?xml version=\"1.0\"?>\n<d:multistatus xmlns:d=\"DAV:\" xmlns:s=\"http://sabredav.org/ns\" xmlns:cal=\"urn:ietf:params:xml:ns:caldav\" xmlns:cs=\"http://calendarserver.org/ns/\" xmlns:card=\"urn:ietf:params:xml:ns:carddav\" xmlns:oc=\"http://owncloud.org/ns\">\n<d:response>\n<d:href>/remote.php/dav/systemtags/2</d:href>\n<d:propstat>\n<d:prop>\n<d:resourcetype/>\n</d:prop>\n<d:status>HTTP/1.1 200 OK</d:status>\n</d:propstat>\n</d:response>\n</d:multistatus>\nNote that it does not return very much, just the\nhref\nand\nstatus\nproperties. The sample below, which for the purposes of this example we’ll store in a file called\nreport-propfind.xml\n, shows how to do so. <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<a:propfind xmlns:a=\"DAV:\" xmlns:oc=\"http://owncloud.org/ns\">\n<a:prop>\n<!-- Retrieve the display-name, user-visible, and user-assignable properties -->\n<oc:display-name/>\n<oc:user-visible/>\n<oc:user-assignable/>\n<oc:id/>\n</a:prop>\n</a:propfind>\nTo use it in the request, add the\n--data-binary\nswitch, passing in the name of the file containing the\nPROPFIND\nXML element. Adding the\nPROPFIND\nXML element will cause the XML response to look similar to the following example. <?xml version=\"1.0\"?>\n<d:multistatus xmlns:d=\"DAV:\" xmlns:s=\"http://sabredav.org/ns\" xmlns:cal=\"urn:ietf:params:xml:ns:caldav\" xmlns:cs=\"http://calendarserver.org/ns/\" xmlns:card=\"urn:ietf:params:xml:ns:carddav\" xmlns:oc=\"http://owncloud.org/ns\">\n<d:response>\n<d:href>/remote.php/dav/systemtags/10</d:href>\n<d:propstat>\n<d:prop>\n<oc:display-name>file</oc:display-name>\n<oc:user-visible>true</oc:user-visible>\n<oc:id>10</oc:id>\n</d:prop>\n<d:status>HTTP/1.1 200 OK</d:status>\n</d:propstat>\n</d:response>\n<d:response>\n<d:href>/remote.php/dav/systemtags/9</d:href>\n<d:propstat>\n<d:prop>\n<oc:display-name>for</oc:display-name>\n<oc:user-visible>true</oc:user-visible>\n<oc:id>9</oc:id>\n</d:prop>\n<d:status>HTTP/1.1 200 OK</d:status>\n</d:propstat>\n</d:response>\n</d:multistatus>\nYou can see that, along with the\nhref\nand\nstatus\nelements, each element now contains the\ndisplay-name\n,\nuser-visible\n, and\nid\nelements. <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<a:propertyupdate xmlns:a=\"DAV:\" xmlns:oc=\"http://owncloud.org/ns\">\n<a:set>\n<a:prop>\n<oc:display-name>This is an updated tag.</oc:display-name>\n</a:prop>\n</a:set>\n</a:propertyupdate>\nResponse\nIf the update is successful, then an XML response body will be returned, which looks similar to the example below. <?xml version=\"1.0\"?>\n<d:multistatus xmlns:d=\"DAV:\" xmlns:s=\"http://sabredav.org/ns\" xmlns:cal=\"urn:ietf:params:xml:ns:caldav\" xmlns:cs=\"http://calendarserver.org/ns/\" xmlns:card=\"urn:ietf:params:xml:ns:carddav\" xmlns:oc=\"http://owncloud.org/ns\">\n<d:response>\n<d:href>/remote.php/dav/systemtags/15</d:href>\n<d:propstat>\n<d:prop>\n<oc:name/>\n</d:prop>\n<d:status>HTTP/1.1 200 OK</d:status>\n</d:propstat>\n</d:response>\n</d:multistatus>\nDelete Tags\nRequest Path\nMethod\nContent Type\nremote.php/dav/systemtags/<tagid>\nDELETE\ntext/plain\nTo delete a tag, send an authenticated\nDELETE\nrequest, specifying the path to the tag that you want to delete. # Retrieve the details from file with id 4\ncurl -u username:password -X PROPFIND \\\n-H \"Content-Type: text/xml\" \\\n\"http://localhost/remote.php/dav/systemtags-relations/files/4\" | xmllint --format -\nResponse\n<?xml version=\"1.0\"?>\n<d:multistatus xmlns:d=\"DAV:\" xmlns:s=\"http://sabredav.org/ns\" xmlns:cal=\"urn:ietf:params:xml:ns:caldav\" xmlns:cs=\"http://calendarserver.org/ns/\" xmlns:card=\"urn:ietf:params:xml:ns:carddav\" xmlns:oc=\"http://owncloud.org/ns\">\n<d:response>\n<d:href>/remote.php/dav/systemtags-relations/files/4/</d:href>\n<d:propstat>\n<d:prop>\n<d:resourcetype>\n<d:collection/>\n</d:resourcetype>\n</d:prop>\n<d:status>HTTP/1.1 200 OK</d:status>\n</d:propstat>\n</d:response>\n</d:multistatus>\nIf more detailed information is desired, a\nPROPFIND\nelement in the\nrequest body is required. <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<a:propfind xmlns:a=\"DAV:\" xmlns:oc=\"http://owncloud.org/ns\">\n<a:prop>\n<oc:display-name/>\n<oc:user-visible/>\n<oc:user-assignable/>\n<oc:id/>\n</a:prop>\n</a:propfind>\nTo use it, as in previous examples, the\n--data-binary\nswitch is\nrequired, as in the example below. <oc:filter-files  xmlns:d=\"DAV:\" xmlns:oc=\"http://owncloud.org/ns\">\n<d:prop>\n<d:getcontentlength />\n<d:getcontenttype />\n<d:getetag />\n<d:getlastmodified />\n<d:lockdiscovery />\n<d:resourcetype />\n<oc:comments-unread />\n<oc:favorites />\n<oc:fileid />\n<oc:owner-display-name />\n<oc:permissions />\n<oc:share-types />\n<oc:size />\n<oc:tags />\n</d:prop>\n<oc:filter-rules>\n<oc:systemtag>17</oc:systemtag>\n</oc:filter-rules>\n</oc:filter-files>\nAnd here is an example of how to make the request using Curl. <?xml version=\"1.0\"?>\n<d:multistatus xmlns:d=\"DAV:\" xmlns:s=\"http://sabredav.org/ns\" xmlns:oc=\"http://owncloud.org/ns\">\n<d:response>\n<d:href>/remote.php/webdav/Photos/Squirrel.jpg</d:href>\n<d:propstat>\n<d:prop>\n<d:getlastmodified>Wed, 03 May 2017 11:05:49 GMT</d:getlastmodified>\n<d:getetag>\"0169c644a1580687b346ef43315d5ac8\"</d:getetag>\n<d:getcontenttype>image/jpeg</d:getcontenttype>\n<d:resourcetype/>\n<oc:fileid>6</oc:fileid>\n<oc:permissions>RDNVW</oc:permissions>\n<oc:size>233724</oc:size>\n<d:getcontentlength>233724</d:getcontentlength>\n<oc:tags/>\n<oc:favorite>0</oc:favorite>\n<oc:comments-unread>0</oc:comments-unread>\n<oc:owner-display-name>admin</oc:owner-display-name>\n<oc:share-types/>\n</d:prop>\n<d:status>HTTP/1.1 200 OK</d:status>\n</d:propstat>\n</d:response>\n</d:multistatus>\nIf the request was unsuccessful, likely because the tag specified didn’t exist, then an\nHTTP/1.1 412 Precondition failed\nstatus will be returned, along with the following XML payload in the body of the response. <?xml version=\"1.0\" encoding=\"utf-8\"?>\n<d:error xmlns:d=\"DAV:\" xmlns:s=\"http://sabredav.org/ns\">\n<s:exception>Sabre\\DAV\\Exception\\PreconditionFailed</s:exception>\n<s:message>Cannot filter by non-existing tag</s:message>\n</d:error>\nThe Search API\nThe Trash Bin API\nAbout ownCloud\nThe Secure Collaboration Platform\nNews\nPrivacy statement\nImprint\nResources\nFAQ\nHelp\nSecurity\nChangelog\nGet started\nInteract\nRocket.Chat\nForum\nContribute\nCustomer support\n© Copyright 2011-2025, The ownCloud developers."
        }
    ]
}