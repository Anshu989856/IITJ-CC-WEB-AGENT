{
    "file_name": "server_admin_manual_configuration_server_caching_configuration.html",
    "file_path": "./owncloud_docs\\server_admin_manual_configuration_server_caching_configuration.html",
    "chunks": [
        {
            "cluster": 3,
            "chunk_content": "Documentation for ownCloud (A Kiteworks Company)\nownCloud Server\nIntroduction\nAdmin Manual\nIntroduction\nUseful Pages\nFAQ\nGDPR\nInstallation\nDeployment Considerations\nDeployment Recommendations\nNFS\nSystem Requirements\nConfiguration Notes and Tips\nInstallation Options\nInstalling With Docker\nManual Installation on Linux\nDetailed Installation Guide\nDetailed Installation on Ubuntu (various versions)\nQuick Installation Guide\nOn Ubuntu 20.04\nOn Ubuntu 22.04\nLinux Package Manager\nLinux Package Manager Installation\nThe Installation Wizard\nTroubleshooting\nChanging Your ownCloud URL\nInstalling and Managing Apps\nSupported Apps\nMedia Viewer\nSELinux Configuration\nUsing Let’s Encrypt SSL Certificates\nUsing Letsencrypt\nApache\nConfiguration\nDatabase\nDatabase Conversion\nDatabase Configuration\nEncryption\nEncryption Configuration\nEncryption Configuration Quick Guide\nExternal Storage\nExternal Storage Configuration\nExternal Storage Authentication Mechanisms\nAmazonS3\nDropbox\nFTP\nGoogle\nLocal\nownCloud\nS3 as Primary\nSFTP\nSMB\nWebDAV\nFiles and Sharing\nBig File Upload Configuration\nManual File Locking\nDefault Files Configuration\nFederated Cloud Sharing Configuration\nFile Sharing Configuration\nFile Versioning\nTransactional File Locking\nPreview Configuration\nMimetypes\nManaging the Trashbin\nIntegration\nMicrosoft Teams\nownCloud App for Splunk\nGeneral Topics\nCode Signing\nImpersonate Users\nFull Text Search\nServer\nActivity Configuration\nBackground Jobs Configuration\nCaching Configuration\nConfig Sample PHP Parameters\nConfig Apps Sample PHP Parameters\nCustom Client Repos\nEmail Configuration\nExcluded Blacklisted Files\nExternal Sites\nHarden Server\nImport SSL Cert\nIndex PHP Less URLs\nOCC Command\nLanguage Configuration\nLegal Settings Configuration\nLogging\nLogging Configuration\nRequest Tracing\nReverse Proxy Configuration\nSecurity\nBrute-Force Protection\nOAuth2\nPassword policy\nSecurity Setup Warnings\nThe HSM (Hardware Security Module) Daemon\nDependency Notes\nServer Tuning\nThird Party PHP Configuration\nVirus Scanner Support\nUI Configuration\nUser\nUser Management\nUser Roles\nReset Admin Password\nReset User Password\nUser Auth FTP SMB IMAP\nUser Auth LDAP\nUser Auth Two-Factor\nUser Auth OAuth2\nUser Provisioning API\nCustom Groups App\nGuests App\nOpenID Connect (OIDC)\nLogin Policies\nMaintenance\nUpgrading\nManual Upgrade\nDatabase Upgrade\nUpgrading from Package\nUsing the Updater App\nUpgrading PHP\nMarketplace Apps\nBackup and Restore\nBackup\nRestore\nMaintenance Mode\nExport and Import Instance Data\nManually Moving Data Folders\nEncryption\nMigrating from User Key to Master Key Encryption\nMigrating to a Different Server\nMigrating to Kiteworks PCN\nEnterprise\nAuthentication\nEnterprise Only Authentication\nKerberos Authentication\nClients\nCustom Client Repos\nCollaboration\nCollabora Online / Secure View\nMicrosoft Office Online / WOPI Integration\nDocument Classification\nClassify Documents and Enforce Policies\nExternal Storage\nLDAP Home Connector Configuration\nSharepoint integration Configuration\nWindows Network Drive Configuration\nWND Configuration Quick Guide\nFile Management\nFile Tagging\nFile Lifecycle Management\nFirewall\nFile Firewall\nInstallation\nInstalling & Upgrading ownCloud Enterprise Edition\nOracle DB Setup & Configuration\nLogging\nAuditing\nReporting\nMetrics\nGenerate a Config Report\nSecurity\nRansomware Protection\nUser Management\nShibboleth Integration\nSAML 2.0 Based SSO\nTroubleshooting\nGeneral Troubleshooting\nPath and Filename Length Limitations\nRetrieve Log Files and Configuration Settings\nRemove Non-Existent Background Jobs\nFound a Mistake? Developer Manual\nIntroduction\nGeneral Contributor Guidelines\nCommunity Code of Conduct\nCoding Style & General Guidelines\nDebugging\nPerformance Considerations\nSecurity Guidelines\nBackporting\nHelp and Communication\nDeveloping ownCloud Core\nIntroduction\nSetup Your Development Environment\nApplication Configuration\nTheming\nTranslation\nCode Standards Compliance\nTesting\nownCloud Test Pilots\nDrone Testing\nUnit Testing\nAcceptance Tests\nUser Interface Testing\nAvailable APIs\nThe External API\nThe Provisioning API\nOCS\nThe OCS Notifications API (v1)\nThe OCS REST API\nThe OCS Recipient API\nThe OCS Share API\nThe OCS TOTP Validation API\nThe OCS User Sync API\nNotify Public Link By Email\nThe Roles API\nWebDAV APIs\nThe Comments API\nThe Custom Groups Management API\nThe Files Versions API\nThe Meta API\nThe Search API\nThe Tags API\nThe Trash Bin API\nThe Public Files API\nApplication Development\nFundamental Concepts\nApplication Metadata\nThe Classloader\nConfiguration\nRouting\nControllers\nTemplates\nJavaScript\nCSS\nMiddleware\nDatabase Connectivity\nBackground Jobs\nLogging\nTesting\nThe DI Container\nFilesystem\nRESTful API\nHooks\nPublishing in the ownCloud Marketplace\nChangelog\nMarket App\nAdvanced Concepts\nCustom Filesystem Caches\nCustom Storage Backends\nNotifications\nStorage Backends\nExternal Storage Backends\nTranslation\nTwo-Factor Providers\nUser Management\nCode Signing\nTutorial\nMinimum Requirements\nThe Request Life Cycle\nThe Core Application Files\nRoutes and Controllers\nDatabase Connectivity\nCreate Template Content\nCreate a Navigation Menu\nAdd JavaScript and CSS\nWiring it Up\nApply the Finishing Touches\nAdd a RESTful API\nWriting Tests\nMobile Development\nAndroid\nLibrary Installation\nExamples\niOS\nLibrary Installation\nExamples\nBugtracker\nCode Reviews\nBug Triaging\nFound a Mistake? ownCloud Server UI\nIntroduction\nThe WebUI\nWeb Interface\nNavigating the WebUI\nPersonal Settings\nGeneral\nStorage\nSharing\nSecurity\nCustom Groups\nFiles\nAccess WebDAV\nSharing Files\nSearch & Full Text Search\nTagging Files\nComments\nVersion Control\nEncrypting Files\nManaging Deleted Files\nLarge File Uploads\nManual File Locking\nFile Lifecycle Management\nPublic Link Shares\nFederated Cloud Sharing\nManaging Connected Browsers and Devices\nOnline Collaboration\nStorage Quotas\nExternal Storage\nConnecting to SharePoint\nDesktop Mobile Sync\nApps\nActivity\nCalendar\nContacts\nMarket\nMedia Viewer App\nIntegration\nMicrosoft Teams\nSynchronization Clients\nSync iOS\nSync KDE\nSync OSX\nSync Thunderbird\nTroubleshooting\nFound a Mistake? ownCloud Server\n10.15\nDesktop App\nnext\n5.3\n5.2\nInfinite Scale Documentation\nnext\n7.1\n7.0\nMobile App for Android\nnext\n4.5\n4.4\nMobile App for iOS\nnext\n12.4\n12.3\nownCloud Main Page\nownCloud Server\nnext\n10.15\n10.14\nownCloud Web User Interfaces\nnext\nownCloud Server\nAdmin Manual\nConfiguration\nServer\nCaching Configuration\nnext\n10.15\n10.14\nEdit this Page\nMemory Caching\nTable of Contents\nIntroduction\nSupported Caching Backends\nCache Directory Location\nCache Types\nOpcache\nAPCu\nRedis\nMemcached\nConfiguring Memory Caching\nOpcache Configuration\nAPCu Configuration\nRedis Configuration\nMemcached Configuration\nConfigure Transactional File Locking\nConfiguration Recommendations Based on Type of Deployment\nPrivate Home Server With Low Access Rates\nSmall Server\nSmall Organization, Single-server Setup\nLarge Organization, Clustered Setup\nCaching Exceptions\nIntroduction\nYou can\nsignificantly\nimprove ownCloud server performance by using memory caching. Supported Caching Backends\nThe caching backends supported by ownCloud are:\nOpcache\nThis is an opcode cache only and does\nnot\ncache any data. The recommended ownCloud caches are APCu and Redis. If you do not install and enable a local memory cache you will see a warning on your ownCloud admin page. It is zero by default at ownCloud. To check what yours is currently set to for ownCloud, check the\ndbindex\nvalue in\nconfig/config.php\n. It performs well with ownCloud with one exception: it is not suitable to use with\nTransactional File Locking\n. ownCloud supports only the\nmemcached\nPHP module. After that, assuming that you don’t encounter any errors:\nRestart your Web server\nAdd the appropriate entries to\nconfig.php\n(which you can find an example of below)\nRefresh your ownCloud admin page\nClearing the Memcached Cache\nThe Memcached cache can be flushed from the command line, using a range of common Linux/Unix tools including\nnetcat\nand\ntelnet\n. The following example uses telnet to log in, run the\nflush_all command\n, and log out:\ntelnet localhost 11211\nflush_all\nquit\nConfiguring Memory Caching\nMemory caches must be explicitly configured in ownCloud by:\nInstalling and enabling your desired cache (whether that be the PHP extension and/or the caching server). Adding the appropriate entry to ownCloud’s\nconfig.php\n. APCu Configuration\nTo use APCu, add this line to\nconfig.php\n:\n'memcache.local' => '\\OC\\Memcache\\APCu',\nWith that done, refresh your ownCloud admin page, and the cache warning should disappear. Configuration Recommendations Based on Type of Deployment\nThe examples give you an overview, adapt them to your environment and your needs. Caching Exceptions\nIf ownCloud is configured to use either Memcached or Redis as a memory cache, you may encounter issues with functionality. So there is no way to show a page\nBackground Jobs Configuration\nConfig Sample PHP Parameters\nAbout ownCloud\nThe Secure Collaboration Platform\nNews\nPrivacy statement\nImprint\nResources\nFAQ\nHelp\nSecurity\nChangelog\nGet started\nInteract\nRocket.Chat\nForum\nContribute\nCustomer support\n© Copyright 2011-2025, The ownCloud developers."
        },
        {
            "cluster": 1,
            "chunk_content": "This is the process of storing frequently requested objects in memory for faster retrieval later. There are two types of memory caching available:\nA PHP opcode Cache (OPcache)\nAn opcode cache stores compiled PHP scripts (opcodes) so they don’t need to be parsed and compiled every time they are called. These compiled PHP scripts are stored in shared memory on the server on which they’re compiled. A Data Cache\nA data cache stores copies of\ndata\n,\ntemplates\n, and other types of\ninformation-based files\n. Depending on the cache implementation, it can be either\nlocal\nor specific to one server or\ndistributed\nacross multiple servers. This cache type is ideal when you have a scale-out installation. APCu\nThis is a data cache only and does\nnot\ncache any opcode. You may use\nboth\na local and a distributed cache. Cache Directory Location\nThe cache directory defaults to\ndata/$user/cache\nwhere\n$user\nis the current user. You may use the\n'cache_path'\ndirective in your configuration for different locations. For details see the\nDefine the location of the cache folder\ndescription. Please read more about the instructions for the\nselect\nand\nflushdb\ncommand. This is because it does not store locks, and data can disappear from the cache at any time. See the\nMemory caching backend configuration\nfor an overview of all possible config parameters, as the examples below only show basic configuration settings. The values can differ in your environment. It is enabled by default and uses the database to store the locking data. This places a significant load on your database. It is recommended to use a cache backend instead. In the table below, you can see all of the known reasons for reduced or broken functionality related to caching."
        },
        {
            "cluster": 4,
            "chunk_content": "In addition, we suggest to use\nExternal Transactional File Locking\nwhich reduces load on the database significantly. Redis\nThis is an in-memory data structure store (cache) for single and multi-server ownCloud installations, which provides file locking and can be set up in local or distributed environments. Consider Redis younger, richer in features and more configurable than memcached. Memcached\nThis is a distributed cache for multi-server ownCloud installations and has\nno\nfile locking capabilities. See the following page to learn more about the\nRedis vs. Memcached – 2021 Comparison\n. Redis\nRedis\nis an excellent modern memory cache to use for both distributed caching and as a local cache for\ntransactional file locking\n, because it guarantees that cached objects are available for as long as they are needed. Additional notes for Redis vs. APCu on Memory Caching\nAPCu is faster at local caching than Redis when using TCP since APCu is memory-based only. If you have enough memory, use APCu for in memory caching and Redis for file locking. If you are limited in memory or only want to have one caching backend, use Redis for both. Consider using sockets instead of TCP when you decide on Redis but do not have a distributed caching environment. Memcached\nMemcached is a reliable old-timer for shared caching on distributed servers. Given that, Redis is the best memory cache to use. This enables\nExternal Transactional File Locking\nbased on Redis:\n'filelocking.enabled' => true,\n'memcache.locking' => '\\OC\\Memcache\\Redis',\nRedis Configuration Using TCP\nThe following example\nconfig.php\nconfiguration connects to a Redis cache via TCP:\n'memcache.local' => '\\OC\\Memcache\\Redis',\n'redis' => [\n'host' => 'localhost',  // For a Unix domain socket, use '/var/run/redis/redis.sock'\n'port' => 6379,         // Set to 0 when using a Unix socket\n'timeout' => 0,         // Optional, keep connection open forever\n'password' => '',       // Optional, if not defined no password will be used. # Change the host value, based on the socket's location in your distribution\n'memcache.local' => '\\OC\\Memcache\\Redis',\n'redis' => [\n'host' => '/var/run/redis/redis.sock',\n'port' => 0,       // Set to 0 when using a Unix socket\n'password' => '',  // Optional, if not defined no password will be used. Test\nTCP (requests/s)\nSocket (requests/s)\nGain (%)\nPING_INLINE\n15527.95\n23518.35\n+34\nPING_BULK\n16946.28\n23239.60\n+27\nSET\n18351.99\n22789.43\n+19\nGET\n18850.14\n22747.95\n+17\nINCR\n18663.68\n22914.76\n+18\nLPUSH\n19109.50\n24183.79\n+21\nRPUSH\n19076.69\n23196.47\n+18\nLPOP\n18460.40\n23485.21\n+21\nRPOP\n19058.51\n24752.47\n+23\nSADD\n18932.22\n22391.40\n+15\nHSET\n18491.12\n20785.70\n+11\nSPOP\n19069.41\n23282.89\n+18\nLPUSH\n19087.61\n23764.26\n+20\nLRANGE_100\n15288.18\n17882.69\n+15\nLRANGE_300\n9067.00\n10004.00\n+10\nLRANGE_500\n6878.53\n7496.25\n+8\nLRANGE_600\n5379.24\n6102.77\n+12\nMSET (10 keys)\n19297.57\n18178.51\n-6\nMemcached Configuration\nThis example uses APCu for the local cache, Memcached as the distributed memory cache, and lists all the servers in the shared cache pool with their port numbers:\n'memcache.local' => '\\OC\\Memcache\\APCu',\n'memcache.distributed' => '\\OC\\Memcache\\Memcached',\n'memcached_servers' => [\n['localhost', 11211],\n['server1.example.com', 11211],\n['server2.example.com', 11211],\n],\nConfigure Transactional File Locking\nTransactional File Locking\nprevents simultaneous file saving. You have to configure it in\nconfig.php\nas in the following example, which uses Redis TCP as the cache backend:\n'filelocking.enabled' => true,\n'memcache.locking' => '\\OC\\Memcache\\Redis',\n'redis' => [\n'host' => 'localhost',\n'port' => 6379,\n'timeout' => 0,\n'password' => '',     // Optional, if not defined no password will be used. Private Home Server With Low Access Rates\nUse APCu for local caching, file locking is not mandatory. 'memcache.local' => '\\OC\\Memcache\\APCu',\nSmall Server\nUse APCu for local caching and Redis for file locking. 'filelocking.enabled' => true,\n'memcache.local' => '\\OC\\Memcache\\APCu',\n'memcache.locking' => '\\OC\\Memcache\\Redis',\n'redis' => [\n'host' => 'localhost',\n'port' => 6379,\n],\nSmall Organization, Single-server Setup\nUse Redis Socket for local caching and for file locking. 'filelocking.enabled' => true,\n'memcache.local' => '\\OC\\Memcache\\Redis',\n'memcache.locking' => '\\OC\\Memcache\\Redis',\n'redis' => [\n'host' => '/var/run/redis/redis.sock',\n'port' => 0,\n],\nLarge Organization, Clustered Setup\nUse Redis for everything except a local memory cache. Use the server’s IP address or hostname so that it is accessible to other hosts:\n'filelocking.enabled' => true,\n'memcache.distributed' => '\\OC\\Memcache\\Redis',\n'memcache.locking' => '\\OC\\Memcache\\Redis',\n'memcache.local' => '\\OC\\Memcache\\APCu',\n'redis' => [\n'host' => 'server1',      // hostname example\n'host' => '12.34.56.78',  // IP address example\n'port' => 6379,\n],\nSee\nDefine Redis Cluster connection details\nwhen using a Redis clustered setup. But any file operation will return a \"500 Redis went away\" exception\nIf Memcache is configured for\nlocal\nand\ndistributed\n, but the\nclass is missing\nThere will be a white page and an exception written to\nthe logs, This is because autoloading needs the missing class."
        },
        {
            "cluster": 2,
            "chunk_content": "Opcache is bundled with PHP from version 5.5.0 and later. APCu 4.0.6 and up is required. If you enable only a distributed cache in your\nconfig.php\n(\nmemcache.distributed\n) and not a local cache (\nmemcache.local\n) you will still see the cache warning. Cache Types\nOpcache\nOpcache should be enabled by default in your php installation. To check it, run the following command:\nphp -r 'phpinfo();' | grep opcache.enable\nAPCu\nThe easiest cache to use is APCu, because it is a pure data cache, very fast as it is memory-based only and\nnothing needs to be configured\n. APCu can not be used when running on an external server like in a distributed environment. Installing APCu\nOn Ubuntu/Debian/Mint systems, if not already done:\nsudo apt install php-apcu\nWith that done, assuming that you don’t encounter any errors, restart Apache and the extension is ready to use. After that, assuming that you don’t encounter any errors, restart Apache and the extension is ready to use. Be sure to install the\nmemcached\nPHP module, and not\nmemcache\n, as in the following examples. Installing Memcached\nOn Ubuntu/Debian/Mint\nOn Ubuntu/Debian/Mint run the following command:\nsudo apt-get install memcached php-memcached\nThe installer will automatically start\nmemcached\nand configure it to launch at startup. Configuration File Paths\nPHP Version\nFilename\n7.4\n/etc/php/7.4/mods-available/memcached.ini\nNote that the PHP version depends on your envoronment. After installing and enabling your chosen memory cache, verify that it is active by viewing the\nPHP configuration details\n. Opcache Configuration\nOpcache should already be configured with PHP 7, see the\nopcache documentation\nfor details. Please do a local check. When these occur, it is usually a result of PHP being incorrectly configured or the relevant PHP extension not being available. Setup/Configuration\nResult\nIf file locking is enabled, but the locking cache class is missing,\nthen an exception will appear in the web UI\nThe application will not be usable\nIf file locking is enabled and the locking cache is configured, but the\nPHP module missing. There will be a white page/exception in web UI."
        },
        {
            "cluster": 0,
            "chunk_content": "At least version 2.2.6 or higher of the PHP Redis extension is required. The performance of Redis when used with a socket connection can get close to the performance of APCu. The Redis PHP module must be at least version 2.2.6 or higher. For Ubuntu 20.04, the default shipped Redis Server version and the php-redis extension is 5.x. For Ubuntu 22.04, the default shipped Redis Server version is 6.0.16. For Ubuntu 22.04, the php7.4-redis extension has version 5.3.x. With Redis version 6, a new authentication mechanism has been introduced named ACL (Access Control Lists). ownCloud does currently not support Redis ACLs, but does support the password protection available with current Redis versions. Installing Redis\nOn Ubuntu/Debian/Mint systems, if not already done:\nsudo apt install redis-server php-redis\nThe installer will automatically launch Redis and configure it to launch at startup. Redis Performance Consideration\nBecause Redis writes data to disk, it is recommended to use a high performance backend like SSD. If you do not have a distributed environment where the Redis server is installed at a different machine, you can configure Redis to be\nsocket-based\ninstead of TCP-based to\nincrease performance\n. Clearing the Redis Cache\nThe Redis cache can be flushed from the command-line using the\nredis-cli tool\n, as in the following example:\nsudo redis-cli\nSELECT <dbIndex>\nFLUSHDB\n<dbIndex>\nis the number of the Redis database where the cache is stored. To change it, see the\nMemory caching backend configuration\nOut of the box, every Redis instance supports 16 databases so\n<dbIndex>\nhas to be set between 0 and 15. Redis Configuration\nRedis is very configurable; consult the\nRedis documentation\nto learn more. Regardless of whether you have set up Redis to use TCP or a Unix socket, we recommend adding the following for best performance. 'dbindex' => 0,         // Optional, if undefined SELECT will not run and will\n// use Redis Server's default DB Index. ],\nRedis Configuration Using Unix Sockets\nIf Redis is running on the same server as ownCloud, it is recommended to configure it to use Unix sockets for increased performance. Follow these steps to do so:\nAdd the\nwww-data\nuser to the\nredis\ngroup:\nsudo usermod -G redis -a www-data\nCreate your Redis folder that the Unix socket will be in:\nsudo mkdir -p /var/run/redis/\nSet the permissions so the redis user and www-data group own it:\nsudo chown -R redis:www-data /var/run/redis\nOpen an editor of your choice and change/add the following parameters to the Redis configuration file. Note that in the example\nvi\nis used as editor:\nsudo vi /etc/redis/redis.conf\n# create a unix domain socket to listen on\nunixsocket /var/run/redis/redis.sock\n# set permissions for the socket\nunixsocketperm 770\nRestart Redis to make the changes effective:\nsudo service redis-server restart\nCheck if the Redis Unix socket was created:\nls -lh /var/run/redis\nThe output should be like the following:\nsrwxrwx--- 1 redis redis 0 May 12 12:26 redis.sock\nThen, configure ownCloud to communicate with the Redis socket as in the following example. 'dbindex' => 0,    // Optional, if undefined SELECT will not run and will\n// use Redis Server's default DB Index. ],\nRedis Performance Comparison TCP vs Socket\nTo see a benchmark comparison, run:\nsudo redis-benchmark -q -n 100000\nsudo redis-benchmark -s /var/run/redis/redis-server.sock -q -n 100000\nIn the following table, you will see an example gain of about +20% when using sockets compared\nto TCP on localhost. ],\nFor enhanced security, it is recommended to configure Redis to require a password. See\nhttps://redis.io/topics/security\nfor more information. It\nwill be a full page issue, and the application will not be usable\nAll enabled, but the Redis server is not running\nThe application will\nbe usable."
        }
    ]
}