{
    "file_name": "server_10.15_developer_manual_mobile_development_ios_library_examples.html",
    "file_path": "./owncloud_docs\\server_10.15_developer_manual_mobile_development_ios_library_examples.html",
    "chunks": [
        {
            "cluster": 2,
            "chunk_content": "Documentation for ownCloud (A Kiteworks Company)\nownCloud Server\nIntroduction\nAdmin Manual\nIntroduction\nUseful Pages\nFAQ\nGDPR\nInstallation\nDeployment Considerations\nDeployment Recommendations\nNFS\nSystem Requirements\nConfiguration Notes and Tips\nInstallation Options\nInstalling With Docker\nManual Installation on Linux\nDetailed Installation Guide\nDetailed Installation on Ubuntu (various versions)\nQuick Installation Guide\nOn Ubuntu 20.04\nOn Ubuntu 22.04\nLinux Package Manager\nLinux Package Manager Installation\nThe Installation Wizard\nTroubleshooting\nChanging Your ownCloud URL\nInstalling and Managing Apps\nSupported Apps\nMedia Viewer\nSELinux Configuration\nUsing Let’s Encrypt SSL Certificates\nUsing Letsencrypt\nApache\nConfiguration\nDatabase\nDatabase Conversion\nDatabase Configuration\nEncryption\nEncryption Configuration\nEncryption Configuration Quick Guide\nExternal Storage\nExternal Storage Configuration\nExternal Storage Authentication Mechanisms\nAmazonS3\nDropbox\nFTP\nGoogle\nLocal\nownCloud\nS3 as Primary\nSFTP\nSMB\nWebDAV\nFiles and Sharing\nBig File Upload Configuration\nManual File Locking\nDefault Files Configuration\nFederated Cloud Sharing Configuration\nFile Sharing Configuration\nFile Versioning\nTransactional File Locking\nPreview Configuration\nMimetypes\nManaging the Trashbin\nIntegration\nMicrosoft Teams\nownCloud App for Splunk\nGeneral Topics\nCode Signing\nImpersonate Users\nFull Text Search\nServer\nActivity Configuration\nBackground Jobs Configuration\nCaching Configuration\nConfig Sample PHP Parameters\nConfig Apps Sample PHP Parameters\nCustom Client Repos\nEmail Configuration\nExcluded Blacklisted Files\nExternal Sites\nHarden Server\nImport SSL Cert\nIndex PHP Less URLs\nOCC Command\nLanguage Configuration\nLegal Settings Configuration\nLogging\nLogging Configuration\nRequest Tracing\nReverse Proxy Configuration\nSecurity\nBrute-Force Protection\nOAuth2\nPassword policy\nSecurity Setup Warnings\nThe HSM (Hardware Security Module) Daemon\nDependency Notes\nServer Tuning\nThird Party PHP Configuration\nVirus Scanner Support\nUI Configuration\nUser\nUser Management\nUser Roles\nReset Admin Password\nReset User Password\nUser Auth FTP SMB IMAP\nUser Auth LDAP\nUser Auth Two-Factor\nUser Auth OAuth2\nUser Provisioning API\nCustom Groups App\nGuests App\nOpenID Connect (OIDC)\nLogin Policies\nMaintenance\nUpgrading\nManual Upgrade\nDatabase Upgrade\nUpgrading from Package\nUsing the Updater App\nUpgrading PHP\nMarketplace Apps\nBackup and Restore\nBackup\nRestore\nMaintenance Mode\nExport and Import Instance Data\nManually Moving Data Folders\nEncryption\nMigrating from User Key to Master Key Encryption\nMigrating to a Different Server\nMigrating to Kiteworks PCN\nEnterprise\nAuthentication\nEnterprise Only Authentication\nKerberos Authentication\nClients\nCustom Client Repos\nCollaboration\nCollabora Online / Secure View\nMicrosoft Office Online / WOPI Integration\nDocument Classification\nClassify Documents and Enforce Policies\nExternal Storage\nLDAP Home Connector Configuration\nSharepoint integration Configuration\nWindows Network Drive Configuration\nWND Configuration Quick Guide\nFile Management\nFile Tagging\nFile Lifecycle Management\nFirewall\nFile Firewall\nInstallation\nInstalling & Upgrading ownCloud Enterprise Edition\nOracle DB Setup & Configuration\nLogging\nAuditing\nReporting\nMetrics\nGenerate a Config Report\nSecurity\nRansomware Protection\nUser Management\nShibboleth Integration\nSAML 2.0 Based SSO\nTroubleshooting\nGeneral Troubleshooting\nPath and Filename Length Limitations\nRetrieve Log Files and Configuration Settings\nRemove Non-Existent Background Jobs\nFound a Mistake? Developer Manual\nIntroduction\nGeneral Contributor Guidelines\nCommunity Code of Conduct\nCoding Style & General Guidelines\nDebugging\nPerformance Considerations\nSecurity Guidelines\nBackporting\nHelp and Communication\nDeveloping ownCloud Core\nIntroduction\nSetup Your Development Environment\nApplication Configuration\nTheming\nTranslation\nCode Standards Compliance\nTesting\nownCloud Test Pilots\nDrone Testing\nUnit Testing\nAcceptance Tests\nUser Interface Testing\nAvailable APIs\nThe External API\nThe Provisioning API\nOCS\nThe OCS Notifications API (v1)\nThe OCS REST API\nThe OCS Recipient API\nThe OCS Share API\nThe OCS TOTP Validation API\nThe OCS User Sync API\nNotify Public Link By Email\nThe Roles API\nWebDAV APIs\nThe Comments API\nThe Custom Groups Management API\nThe Files Versions API\nThe Meta API\nThe Search API\nThe Tags API\nThe Trash Bin API\nThe Public Files API\nApplication Development\nFundamental Concepts\nApplication Metadata\nThe Classloader\nConfiguration\nRouting\nControllers\nTemplates\nJavaScript\nCSS\nMiddleware\nDatabase Connectivity\nBackground Jobs\nLogging\nTesting\nThe DI Container\nFilesystem\nRESTful API\nHooks\nPublishing in the ownCloud Marketplace\nChangelog\nMarket App\nAdvanced Concepts\nCustom Filesystem Caches\nCustom Storage Backends\nNotifications\nStorage Backends\nExternal Storage Backends\nTranslation\nTwo-Factor Providers\nUser Management\nCode Signing\nTutorial\nMinimum Requirements\nThe Request Life Cycle\nThe Core Application Files\nRoutes and Controllers\nDatabase Connectivity\nCreate Template Content\nCreate a Navigation Menu\nAdd JavaScript and CSS\nWiring it Up\nApply the Finishing Touches\nAdd a RESTful API\nWriting Tests\nMobile Development\nAndroid\nLibrary Installation\nExamples\niOS\nLibrary Installation\nExamples\nBugtracker\nCode Reviews\nBug Triaging\nFound a Mistake? ownCloud Server UI\nIntroduction\nThe WebUI\nWeb Interface\nNavigating the WebUI\nPersonal Settings\nGeneral\nStorage\nSharing\nSecurity\nCustom Groups\nFiles\nAccess WebDAV\nSharing Files\nSearch & Full Text Search\nTagging Files\nComments\nVersion Control\nEncrypting Files\nManaging Deleted Files\nLarge File Uploads\nManual File Locking\nFile Lifecycle Management\nPublic Link Shares\nFederated Cloud Sharing\nManaging Connected Browsers and Devices\nOnline Collaboration\nStorage Quotas\nExternal Storage\nConnecting to SharePoint\nDesktop Mobile Sync\nApps\nActivity\nCalendar\nContacts\nMarket\nMedia Viewer App\nIntegration\nMicrosoft Teams\nSynchronization Clients\nSync iOS\nSync KDE\nSync OSX\nSync Thunderbird\nTroubleshooting\nFound a Mistake? ownCloud Server\n10.15\nDesktop App\nnext\n5.3\n5.2\nInfinite Scale Documentation\nnext\n7.1\n7.0\nMobile App for Android\nnext\n4.5\n4.4\nMobile App for iOS\nnext\n12.4\n12.3\nownCloud Main Page\nownCloud Server\nnext\n10.15\n10.14\nownCloud Web User Interfaces\nnext\nownCloud Server\nDeveloper Manual\nMobile Development\niOS\nExamples\nnext\n10.15\n10.14\nEdit this Page\nExamples\nInit the library\nStart using the library, it is needed to init the object\nOCCommunication. We recommend using the singleton method in the AppDelegate class in\norder to use the ownCloud iOS library. ,\n*\nTo move a folder the origin path and the destination path must end with\n/\nTo move a file the origin path and the destination path must not end with\n/\nUpload and download actions may be cancelled thanks to the object\nNSOperation\nUnit tests, before launching unit tests you have to enter your account information (server url, user and password) on\nOCCommunicationLibTests.m\nLibrary Installation\nBugtracker\nAbout ownCloud\nThe Secure Collaboration Platform\nNews\nPrivacy statement\nImprint\nResources\nFAQ\nHelp\nSecurity\nChangelog\nGet started\nInteract\nRocket.Chat\nForum\nContribute\nCustomer support\n© Copyright 2011-2025, The ownCloud developers."
        },
        {
            "cluster": 0,
            "chunk_content": "Code example\n#import \"OCCommunication.h\"\n+ (OCCommunication *)sharedOCCommunication\n{\nstatic OCCommunication* sharedOCCommunication = nil;\nif (sharedOCCommunication == nil)\n{\nsharedOCCommunication = [ [ OCCommunicationalloc] init ];\n}\nreturn sharedOCCommunication;\n}\nAlso could happen that you need to overwrite the class\nAFURLSessionManager to manage SSL Certificates\n#import \"OCCommunication.h\"\n+ (OCCommunication*)sharedOCCommunication\n{\nstatic OCCommunication* sharedOCCommunication = nil;\nif (sharedOCCommunication == nil)\n{\n//Network Upload queue for NSURLSession (iOS 7)\nNSURLSessionConfiguration *configuration = [NSURLSessionConfiguration backgroundSessionConfiguration:k_session_name];\nconfiguration.HTTPMaximumConnectionsPerHost = 1;\nconfiguration.requestCachePolicy = NSURLRequestReloadIgnoringLocalCacheData;\nOCURLSessionManager *uploadSessionManager = [[OCURLSessionManager alloc] initWithSessionConfiguration:configuration];\n[uploadSessionManager.operationQueue setMaxConcurrentOperationCount:1];\n[uploadSessionManager setSessionDidReceiveAuthenticationChallengeBlock:^NSURLSessionAuthChallengeDisposition (NSURLSession *session, NSURLAuthenticationChallenge *challenge, NSURLCredential * __autoreleasing *credential) {\nreturn NSURLSessionAuthChallengePerformDefaultHandling;\n}];\nsharedOCCommunication = [[OCCommunication alloc] initWithUploadSessionManager:uploadSessionManager];\n}\nreturn sharedOCCommunication;\n}\nSet credentials\nAuthentication on the app is possible by 3 different methods:\nBasic authentication, user name and password\nCookie\nToken (oAuth)\nCode example\n#Basic authentication, user name and password\n[[ AppDelegate sharedOCCommunication ] setCredentialsWithUser : userName andPassword : password ];\n#Authentication with cookie\n[[ AppDelegate sharedOCCommunication ] setCredentialsWithCookie : cookie ];\n#Authentication with token\n[[ AppDelegate sharedOCCommunication ] setCredentialsOauthWithToken : token ];\nCreate a folder\nCreate a new folder on the cloud server, the info needed to be sent is\nthe path of the new folder. Code example\n[[ AppDelegate sharedOCCommunication ] createFolder :path onCommunication : [ AppDelegate sharedOCCommunication ]\nsuccessRequest :^( NSHTTPURLResponse *response, NSString *redirectedServer) {\n//Folder Created\n}\nfailureRequest :^( NSHTTPURLResponse *response, NSError *error) {\n//Failure\nswitch (response.statusCode) {\ncase kOCErrorServerUnauthorized :\n//Bad credentials\nbreak;\ncase kOCErrorServerForbidden :\n//Forbidden\nbreak;\ncase kOCErrorServerPathNotFound :\n//Not Found\nbreak;\ncase kOCErrorServerTimeout :\n//timeout\nbreak;\ndefault:\n//default\nbreak;\n}\n}\nerrorBeforeRequest :^( NSError *error) {\n//Error before request\nif (error.code == OCErrorForbidenCharacters) {\n//Forbidden characters\n}\nelse\n{\n//Other error\n}\n}];\nRead folder\nGet the content of an existing folder on the cloud server, the info\nneeded to be sent is the path of the folder. Code example\n[[ AppDelegate sharedOCCommunication] readFolder:path onCommunication:[ AppDelegate sharedOCCommunication]\nsuccessRequest:^( NSHTTPURLResponse *response, NSArray *items, NSString *redirectedServer) {\n//Success\nfor ( OCFileDto * ocFileDto in items) {\nNSLog( @\"item path: %@%@\" , ocFileDto.filePath, ocFileDto.fileName);\n}\n}\nfailureRequest:^( NSHTTPURLResponse *response, NSError *error) {\n//Failure\nswitch (response.statusCode) {\ncase kOCErrorServerPathNotFound :\n//Path not found\nbreak;\ncase kOCErrorServerUnauthorized :\n//Bad credentials\nbreak;\ncase kOCErrorServerForbidden :\n//Forbidden\nbreak;\ncase kOCErrorServerTimeout :\n//Timeout\nbreak ;\ndefault :\nbreak;\n}\n}];\nRead file\nGet information related to a certain file or folder. Other properties of the file or folder may be obtained: filePath,\nfilename, isDirectory, size and date\nCode example\n[[ AppDelegate sharedOCCommunication ] readFile :path onCommunication :[ AppDelegate sharedOCCommunication ]\nsuccessRequest :^( NSHTTPURLResponse *response, NSArray *items, NSString *redirectedServer) {\nOCFileDto *ocFileDto = [items objectAtIndex : 0 ];\nNSLog ( @\"item etag: %lld\" , ocFileDto. etag); }\nfailureRequest :^( NSHTTPURLResponse *response, NSError *error) {\nswitch (response.statusCode) {\ncase kOCErrorServerPathNotFound:\n//Path not found\nbreak;\ncase kOCErrorServerUnauthorized:\n//Bad credentials\nbreak;\ncase kOCErrorServerForbidden:\n//Forbidden\nbreak;\ncase kOCErrorServerTimeout:\n//Timeout\nbreak;\ndefault:\nbreak;\n}\n}];\nMove file or folder\nMove a file or folder from their current path to a new one on the cloud\nserver. Code example\n[[ AppDelegate sharedOCCommunication ] moveFileOrFolder :sourcePath toDestiny :destinyPath onCommunication :[ AppDelegate sharedOCCommunication ]\nsuccessRequest :^( NSHTTPURLResponse *response, NSString *redirectedServer) {\n//File/Folder moved or renamed\n}\nfailureRequest :^( NSHTTPURLResponse *response, NSError *error) {\n//Failure\nswitch (response.statusCode) {\ncase kOCErrorServerPathNotFound:\n//Path not found\nbreak;\ncase kOCErrorServerUnauthorized:\n//Bad credentials\nbreak;\ncase kOCErrorServerForbidden:\n//Forbidden\nbreak;\ncase kOCErrorServerTimeout:\n//Timeout\nbreak;\ndefault:\nbreak;\n}\n}\nerrorBeforeRequest :^( NSError *error) {\nif (error.code == OCErrorMovingTheDestinyAndOriginAreTheSame) {\n//The destiny and the origin are the same\n}\nelse if (error.code == OCErrorMovingFolderInsideHimself) {\n//Moving folder inside himself\n}\nelse if (error.code == OCErrorMovingDestinyNameHaveForbiddenCharacters) {\n//Forbidden Characters\n}\nelse\n{\n//Default\n}\n}];\nDelete file or folder\nDelete a file or folder on the cloud server. Code example\n[[ AppDelegate sharedOCCommunication ] deleteFileOrFolder :path\nonCommunication :[ AppDelegate\nsharedOCCommunication ] successRequest :^( NSHTTPURLResponse\n__response, NSString__redirectedServer) \\{;;\n//File or Folder deleted\n} failureRequest :^( NSHTTPURLResponse __response, NSError__error) \\{\nswitch (response.statusCode) \\{ case kOCErrorServerPathNotFound:\n//Path not found break; case kOCErrorServerUnauthorized: //Bad\ncredentials break; case kOCErrorServerForbidden: //Forbidden break;\ncase kOCErrorServerTimeout: //Timeout break; default: break; }\n}];\nDownload a file\nDownload an existing file on the cloud server. Code example\nNSOperation *op = nil;\nop = [[ AppDelegate sharedOCCommunication ] downloadFile :remotePath toDestiny :localPath withLIFOSystem:isLIFO onCommunication :[ AppDelegate sharedOCCommunication ]\nprogressDownload :^( NSUInteger bytesRead, long long totalBytesRead, long long totalBytesExpectedToRead) {\n//Calculate percent\nfloat percent = ( float)totalBytesRead / totalBytesExpectedToRead;\nNSLog ( @\"Percent of download: %f\" , percent); }\nsuccessRequest :^(NSHTTPURLResponse *response, NSString *redirectedServer) {\n//Download complete\n}\nfailureRequest :^(NSHTTPURLResponse *response, NSError *error) {\nswitch (response. statusCode) {\ncase kOCErrorServerUnauthorized:\n//Bad credentials\nbreak;\ncase kOCErrorServerForbidden:\n//Forbidden\nbreak;\ncase kOCErrorProxyAuth:\n//Proxy access required\nbreak;\ncase kOCErrorServerPathNotFound:\n//Path not found\nbreak;\ndefault:\n//Default\nbreak;\n}\n}\nshouldExecuteAsBackgroundTaskWithExpirationHandler :^{\n[op cancel ];\n}];\nDownload a file with background session\nDownload an existing file stored on the cloud server using background\nsession, only supported by iOS 7 and higher. Code example\nNSURLSessionDownloadTask *downloadTask = nil;\nNSProgress *progress = nil;\ndownloadTask = [_sharedOCCommunication downloadFileSession:serverUrl toDestiny:localPath defaultPriority:YES onCommunication:_sharedOCCommunication withProgress:&progress successRequest:^(NSURLResponse *response, NSURL *filePath) {\n//Upload complete\n} failureRequest:^(NSURLResponse *response, NSError *error) {\nswitch (error.code) {\ncase kCFURLErrorUserCancelledAuthentication:\n//Authentication cancelled\nbreak;\ndefault:\nswitch (response.statusCode) {\ncase kOCErrorServerUnauthorized :\n//Bad credentials\nbreak;\ncase kOCErrorServerForbidden:\n//Forbidden\nbreak;\ncase kOCErrorProxyAuth:\n//Proxy access required\nbreak;\ncase kOCErrorServerPathNotFound:\n//Path not found\nbreak;\ndefault:\n//Default\nbreak;\n}\nbreak;\n}\n}];\n// Observe fractionCompleted using KVO\n[progress addObserver:self forKeyPath:@\"fractionCompleted\" options:NSKeyValueObservingOptionNew context:NULL];\n//Method to catch the progress notifications with callbacks\n- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context\n{\nif ([keyPath isEqualToString:@\"fractionCompleted\"] && [object isKindOfClass:[NSProgress class]]) {\nNSProgress *progress = (NSProgress *)object;\nfloat percent = roundf (progress.fractionCompleted * 100);\n//We make it on the main thread because we came from a delegate\ndispatch_async(dispatch_get_main_queue(), ^{\nNSLog(@\"Progress is %f\", percent);\n});\n}\n}\nSet callback when background download task finishes\nMethod to set callbacks of the pending download transfers when the app\nstarts. Code example\n[[AppDelegate sharedOCCommunication] setDownloadTaskComleteBlock:^NSURL *(NSURLSession *session, NSURLSessionDownloadTask *downloadTask, NSURL *location) {\n}];\nSet progress callback with pending background download tasks\nMethod to set progress callbacks of the pending download transfers. Code example\n[[AppDelegate sharedOCCommunication] setDownloadTaskDidGetBodyDataBlock:^(NSURLSession *session, NSURLSessionDownloadTask *downloadTask, int64_t bytesWritten, int64_t totalBytesWritten, int64_t totalBytesExpectedToWrite) {\n}];\nUpload a file\nUpload a new file to the cloud server. Code example\nNSOperation *op = nil;\nop = [[ AppDelegate sharedOCCommunication ] uploadFile :localPath toDestiny : remotePath onCommunication :[ AppDelegate sharedOCCommunication ]\nprogressUpload :^( NSUInteger bytesWrote, long long totalBytesWrote, long long totalBytesExpectedToWrite) {\n//Calculate upload percent\nif ( totalBytesExpectedToRead/1024 != 0) {\nif ( bytesWrote > 0) {\nfloat percent = totalBytesWrote* 100 / totalBytesExpectedToRead;\nNSLog ( @\"Percent: %f\" , percent);\n}\n}\n}\nsuccessRequest :^( NSHTTPURLResponse *response, NSString *redirectedServer) {\n//Upload complete\n}\nfailureRequest :^( NSHTTPURLResponse *response, NSString *redirectedServer, NSError *error) {\nswitch (response. statusCode) {\ncase kOCErrorServerUnauthorized :\n//Bad credentials\nbreak;\ncase kOCErrorServerForbidden:\n//Forbidden\nbreak;\ncase kOCErrorProxyAuth:\n//Proxy access required\nbreak;\ncase kOCErrorServerPathNotFound:\n//Path not found\nbreak;\ndefault:\n//Default\nbreak;\n}\n}\nfailureBeforeRequest :^( NSError *error) {\nswitch (error.code) {\ncase OCErrorFileToUploadDoesNotExist:\n//File does not exist\nbreak;\ndefault:\n//Default\nbreak;\n}\n}\nshouldExecuteAsBackgroundTaskWithExpirationHandler :^{\n[op cancel];\n}];\nUpload a file with background session\nUpload a new file to the cloud server using background session, only\nsupported by iOS 7 and higher. Code example\nNSURLSessionUploadTask *uploadTask = nil;\nNSProgress *progress = nil;\nuploadTask = [[AppDelegate sharedOCCommunication] uploadFileSession:localPath toDestiny:remotePath onCommunication:[ AppDelegate sharedOCCommunication ] withProgress:&progress successRequest:^(NSURLResponse *response, NSString *redirectedServer) {\n//Upload complete\n} failureRequest:^(NSURLResponse *response, NSString *redirectedServer, NSError *error) {\nswitch (response.statusCode) {\ncase kOCErrorServerUnauthorized :\n//Bad credentials\nbreak;\ncase kOCErrorServerForbidden:\n//Forbidden\nbreak;\ncase kOCErrorProxyAuth:\n//Proxy access required\nbreak;\ncase kOCErrorServerPathNotFound:\n//Path not found\nbreak;\ndefault:\n//Default\nbreak;\n}\n}];\n// Observe fractionCompleted using KVO\n[progress addObserver:self forKeyPath:@\"fractionCompleted\" options:NSKeyValueObservingOptionNew context:NULL];\n//Method to catch the progress notifications with callbacks\n- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context\n{\nif ([keyPath isEqualToString:@\"fractionCompleted\"] && [object isKindOfClass:[NSProgress class]]) {\nNSProgress *progress = (NSProgress *)object;\nfloat percent = roundf (progress.fractionCompleted * 100);\n//We make it on the main thread because we came from a delegate\ndispatch_async(dispatch_get_main_queue(), ^{\nNSLog(@\"Progress is %f\", percent);\n});\n}\n}\nSet callback when background task finish\nMethod to set callbacks of the pending transfers when the app starts. Code example\n[[AppDelegate sharedOCCommunication] setTaskDidCompleteBlock:^(NSURLSession *session, NSURLSessionTask *task, NSError *error) {\n}];\nSet progress callback with pending background tasks\nMethod to set progress callbacks of the pending transfers. Code example\n[[AppDelegate sharedOCCommunication] setTaskDidSendBodyDataBlock:^(NSURLSession *session, NSURLSessionTask *task, int64_t bytesSent, int64_t totalBytesSent, int64_t totalBytesExpectedToSend) {\n}];\nCheck if the server supports Sharing api\nThe Sharing API is included in ownCloud 5.0.13 and greater versions. Code Example\n[[ AppDelegate sharedOCCommunication ] hasServerShareSupport :_activeUser.url onCommunication :[ AppDelegate sharedOCCommunication ]\nsuccessRequest :^( NSHTTPURLResponse *response, BOOL hasSupport, NSString *redirectedServer) {\n}\nfailureRequest :^( NSHTTPURLResponse *response, NSError *error){\n}\n}];\nRead shared all items by link\nGet information about what files and folder are shared by link. Code example\n[[ AppDelegate sharedOCCommunication ] readSharedByServer :path onCommunication :[ AppDelegate sharedOCCommunication ]\nsuccessRequest :^( NSHTTPURLResponse *response, NSArray *items, NSString *redirectedServer) {\nNSLog ( @\"Item: %d\" , items);\n}\nfailureRequest :^( NSHTTPURLResponse *response, NSError *error){\nNSLog ( @\"error: %@\" , error);\nNSLog ( @\"Operation error: %d\" , response.statusCode);\n}];\nRead shared items by link of a path\nGet information about what files and folder are shared by link in a\nspecific path. Code example\n[[AppDelegate sharedOCCommunication] readSharedByServer:serverPath andPath:path onCommunication:[AppDelegate sharedOCCommunication] successRequest:^(NSHTTPURLResponse *response, NSArray *items, NSString *redirectedServer) {\nNSLog ( @\"Item: %d\" , items);\n} failureRequest:^(NSHTTPURLResponse *response, NSError *error) {\nNSLog ( @\"error: %@\" , error);\nNSLog ( @\"Operation error: %d\" , response.statusCode);\n}];\nShare link of file or folder\nShare a file or a folder from your cloud server by link. The info needed\nis Path, your server URL and the path of the item that you want to share\n(for example\n/folder/file.pdf\n)\nCode example\n[[ AppDelegate sharedOCCommunication ] shareFileOrFolderByServer :path andFileOrFolderPath :itemPath onCommunication :[ AppDelegate sharedOCCommunication ]\nsuccessRequest :^( NSHTTPURLResponse *response, NSString *token, NSString *redirectedServer) {\nNSString *sharedLink = [ NSString stringWithFormat:@ `path/public.php?service=files&t=%@ <mailto:path/public.php?service=files&t=%25@>`_\n, token];\n}\nfailureRequest :^( NSHTTPURLResponse *response, NSError *error){\n[ _delegate endLoading ];\nDLog ( @”error.code: %d” , error. statusCode ;\nif (error.code == kOCErrorServerPathNotFound) {\n}\nswitch (code) {\ncase kOCErrorServerPathNotFound:\n//File to share not exists\nbreak;\ncase kOCErrorServerUnauthorized:\n//Error login\nbreak;\ncase kOCErrorServerForbidden:\n//Permission error\nbreak;\ncase kOCErrorServerTimeout:\n//Not possible to connect to server\nbreak;\ndefault:\nif (error.code == kOCErrorServerPathNotFound) {\n//File to share not exists\n} else {\n//Not possible to connect to the server\n}\nbreak;\n}\n}];\n}\nNSLog ( @\"error: %@\" , error);\nNSLog ( @\"Operation error: %d\" , response.statusCode);\n}];\nUnshare a folder or file by link\nStop sharing by link a file or a folder from your cloud server. Code example\n[[ AppDelegate sharedOCCommunication ] unShareFileOrFolderByServer :path andIdRemoteSharedShared :sharedByLink. idRemoteShared onCommunication :[ AppDelegate sharedOCCommunication ]\nsuccessRequest :^( NSHTTPURLResponse *response, NSString *redirectedServer) {\n//File unshared\n}\nfailureRequest :^( NSHTTPURLResponse *response, NSError *error){\n//Error\n}\n];\nCheck if file of folder is shared\nCheck if a specific file or folder is shared in your cloud server. Code example\n[[AppDelegate sharedOCCommunication] isShareFileOrFolderByServer:path andIdRemoteShared:_shareDto.idRemoteShared onCommunication:[AppDelegate sharedOCCommunication] successRequest:^(NSHTTPURLResponse *response, NSString *redirectedServer, BOOL isShared) {\n//File/Folder is shared\n} failureRequest:^(NSHTTPURLResponse *response, NSError *error) {\n//File/Folder is not shared\n}];\nTips\nCredentials must be set before calling any method\nPaths must not be on URL Encoding\nCorrect path:\nhttps://example.com/owncloud/remote.php/dav/Pop_Music/\nWrong path:\nhttps://example.com/owncloud/remote.php/dav/Pop%20Music/\nThere are some forbidden characters to be used in folder and files names on the server, same on the ownCloud iOS library\n/\n,\n<\n,\n>\n,\n:\n,\n\"\n,\n\\`\n,\n?"
        },
        {
            "cluster": 3,
            "chunk_content": "As answer of this method,\nit will be received an array with all the files and folders stored in\nthe selected folder. Although, more\ninformation can be obtained, the library only gets the eTag. The info needed is the origin path and the destiny path. The info needed is the\nserver URL, path of the file on the server and localPath, path where the\nfile will be stored on the device and a boolean to indicate if is\nnecessary to use LIFO queue or FIFO. The info needed is, the server URL: path where the file is stored on the\nserver; localPath: path where the file will be stored on the device; and\nNSProgress: object where get the callbacks of the upload progress. The info needed is localPath,\npath where the file is stored on the device and server URL, path where\nthe file will be stored on the server. The info needed is localPath, path where the file is stored on the\ndevice and server URL, path where the file will be stored on the server\nand NSProgress object where get the callbacks of the upload progress. The\ninfo needed is activeUser.url, the server URL that you want to check. The info needed is Path, the server URL that you want to check. The info needed is the server URL that you want to check and the\nspecific path tha you want to check. code);\nDLog (@”server.error: %d”, response. Teh info need is Path, your server URL and the Id of the item that you\nwant. Before check an item, you have to read the shared items on the selected\nserver, using the method “ readSharedByServer ” so that you get the\narray\nitems\nwith all the shared elements."
        },
        {
            "cluster": 4,
            "chunk_content": "The info needed is the path\nto delete. The info needed is Path, your server URL and the Id of the item that you\nwant to Unshare. Before unsharing an item, you have to read the shared items on the\nselected server, using the method “ readSharedByServer ” so that you get\nthe array\nitems\nwith all the shared elements. These are objects\nOCShareDto, one of their properties is idRemoteShared, parameter needed\nto unshared an element. These are objects\nOCShareDto, one of their properties is idRemoteShared, parameter needed\nto unshared an element."
        },
        {
            "cluster": 1,
            "chunk_content": "To get the callbacks of the progress is needed use a KVO in the progress\nobject. We add the code in this example of the call to set the KVO and\nthe method where catch the notifications. It’s used when there are pending download background transfers. The block is executed when a pending background task finishes. It’s\nused when there are pending background download transfers. The block is\nexecuted when a pending task get a input progress. To get the callbacks of the progress is needed use a KVO in the progress\nobject. We add the code in this example of the call to set the KVO and\nthe method where catch the notifications. It’s used when there are pending background transfers. The block is\nexecuted when a pending background task finished. It’s used\nwhen there are pending background transfers. The block is executed when\na pending task get a input progress. statusCode);\nint code = response."
        }
    ]
}