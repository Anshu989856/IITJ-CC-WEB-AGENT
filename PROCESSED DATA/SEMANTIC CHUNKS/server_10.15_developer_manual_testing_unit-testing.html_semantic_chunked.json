{
    "file_name": "server_10.15_developer_manual_testing_unit-testing.html",
    "file_path": "./owncloud_docs\\server_10.15_developer_manual_testing_unit-testing.html",
    "chunks": [
        {
            "cluster": 2,
            "chunk_content": "Documentation for ownCloud (A Kiteworks Company)\nownCloud Server\nIntroduction\nAdmin Manual\nIntroduction\nUseful Pages\nFAQ\nGDPR\nInstallation\nDeployment Considerations\nDeployment Recommendations\nNFS\nSystem Requirements\nConfiguration Notes and Tips\nInstallation Options\nInstalling With Docker\nManual Installation on Linux\nDetailed Installation Guide\nDetailed Installation on Ubuntu (various versions)\nQuick Installation Guide\nOn Ubuntu 20.04\nOn Ubuntu 22.04\nLinux Package Manager\nLinux Package Manager Installation\nThe Installation Wizard\nTroubleshooting\nChanging Your ownCloud URL\nInstalling and Managing Apps\nSupported Apps\nMedia Viewer\nSELinux Configuration\nUsing Let’s Encrypt SSL Certificates\nUsing Letsencrypt\nApache\nConfiguration\nDatabase\nDatabase Conversion\nDatabase Configuration\nEncryption\nEncryption Configuration\nEncryption Configuration Quick Guide\nExternal Storage\nExternal Storage Configuration\nExternal Storage Authentication Mechanisms\nAmazonS3\nDropbox\nFTP\nGoogle\nLocal\nownCloud\nS3 as Primary\nSFTP\nSMB\nWebDAV\nFiles and Sharing\nBig File Upload Configuration\nManual File Locking\nDefault Files Configuration\nFederated Cloud Sharing Configuration\nFile Sharing Configuration\nFile Versioning\nTransactional File Locking\nPreview Configuration\nMimetypes\nManaging the Trashbin\nIntegration\nMicrosoft Teams\nownCloud App for Splunk\nGeneral Topics\nCode Signing\nImpersonate Users\nFull Text Search\nServer\nActivity Configuration\nBackground Jobs Configuration\nCaching Configuration\nConfig Sample PHP Parameters\nConfig Apps Sample PHP Parameters\nCustom Client Repos\nEmail Configuration\nExcluded Blacklisted Files\nExternal Sites\nHarden Server\nImport SSL Cert\nIndex PHP Less URLs\nOCC Command\nLanguage Configuration\nLegal Settings Configuration\nLogging\nLogging Configuration\nRequest Tracing\nReverse Proxy Configuration\nSecurity\nBrute-Force Protection\nOAuth2\nPassword policy\nSecurity Setup Warnings\nThe HSM (Hardware Security Module) Daemon\nDependency Notes\nServer Tuning\nThird Party PHP Configuration\nVirus Scanner Support\nUI Configuration\nUser\nUser Management\nUser Roles\nReset Admin Password\nReset User Password\nUser Auth FTP SMB IMAP\nUser Auth LDAP\nUser Auth Two-Factor\nUser Auth OAuth2\nUser Provisioning API\nCustom Groups App\nGuests App\nOpenID Connect (OIDC)\nLogin Policies\nMaintenance\nUpgrading\nManual Upgrade\nDatabase Upgrade\nUpgrading from Package\nUsing the Updater App\nUpgrading PHP\nMarketplace Apps\nBackup and Restore\nBackup\nRestore\nMaintenance Mode\nExport and Import Instance Data\nManually Moving Data Folders\nEncryption\nMigrating from User Key to Master Key Encryption\nMigrating to a Different Server\nMigrating to Kiteworks PCN\nEnterprise\nAuthentication\nEnterprise Only Authentication\nKerberos Authentication\nClients\nCustom Client Repos\nCollaboration\nCollabora Online / Secure View\nMicrosoft Office Online / WOPI Integration\nDocument Classification\nClassify Documents and Enforce Policies\nExternal Storage\nLDAP Home Connector Configuration\nSharepoint integration Configuration\nWindows Network Drive Configuration\nWND Configuration Quick Guide\nFile Management\nFile Tagging\nFile Lifecycle Management\nFirewall\nFile Firewall\nInstallation\nInstalling & Upgrading ownCloud Enterprise Edition\nOracle DB Setup & Configuration\nLogging\nAuditing\nReporting\nMetrics\nGenerate a Config Report\nSecurity\nRansomware Protection\nUser Management\nShibboleth Integration\nSAML 2.0 Based SSO\nTroubleshooting\nGeneral Troubleshooting\nPath and Filename Length Limitations\nRetrieve Log Files and Configuration Settings\nRemove Non-Existent Background Jobs\nFound a Mistake? Developer Manual\nIntroduction\nGeneral Contributor Guidelines\nCommunity Code of Conduct\nCoding Style & General Guidelines\nDebugging\nPerformance Considerations\nSecurity Guidelines\nBackporting\nHelp and Communication\nDeveloping ownCloud Core\nIntroduction\nSetup Your Development Environment\nApplication Configuration\nTheming\nTranslation\nCode Standards Compliance\nTesting\nownCloud Test Pilots\nDrone Testing\nUnit Testing\nAcceptance Tests\nUser Interface Testing\nAvailable APIs\nThe External API\nThe Provisioning API\nOCS\nThe OCS Notifications API (v1)\nThe OCS REST API\nThe OCS Recipient API\nThe OCS Share API\nThe OCS TOTP Validation API\nThe OCS User Sync API\nNotify Public Link By Email\nThe Roles API\nWebDAV APIs\nThe Comments API\nThe Custom Groups Management API\nThe Files Versions API\nThe Meta API\nThe Search API\nThe Tags API\nThe Trash Bin API\nThe Public Files API\nApplication Development\nFundamental Concepts\nApplication Metadata\nThe Classloader\nConfiguration\nRouting\nControllers\nTemplates\nJavaScript\nCSS\nMiddleware\nDatabase Connectivity\nBackground Jobs\nLogging\nTesting\nThe DI Container\nFilesystem\nRESTful API\nHooks\nPublishing in the ownCloud Marketplace\nChangelog\nMarket App\nAdvanced Concepts\nCustom Filesystem Caches\nCustom Storage Backends\nNotifications\nStorage Backends\nExternal Storage Backends\nTranslation\nTwo-Factor Providers\nUser Management\nCode Signing\nTutorial\nMinimum Requirements\nThe Request Life Cycle\nThe Core Application Files\nRoutes and Controllers\nDatabase Connectivity\nCreate Template Content\nCreate a Navigation Menu\nAdd JavaScript and CSS\nWiring it Up\nApply the Finishing Touches\nAdd a RESTful API\nWriting Tests\nMobile Development\nAndroid\nLibrary Installation\nExamples\niOS\nLibrary Installation\nExamples\nBugtracker\nCode Reviews\nBug Triaging\nFound a Mistake? ownCloud Server UI\nIntroduction\nThe WebUI\nWeb Interface\nNavigating the WebUI\nPersonal Settings\nGeneral\nStorage\nSharing\nSecurity\nCustom Groups\nFiles\nAccess WebDAV\nSharing Files\nSearch & Full Text Search\nTagging Files\nComments\nVersion Control\nEncrypting Files\nManaging Deleted Files\nLarge File Uploads\nManual File Locking\nFile Lifecycle Management\nPublic Link Shares\nFederated Cloud Sharing\nManaging Connected Browsers and Devices\nOnline Collaboration\nStorage Quotas\nExternal Storage\nConnecting to SharePoint\nDesktop Mobile Sync\nApps\nActivity\nCalendar\nContacts\nMarket\nMedia Viewer App\nIntegration\nMicrosoft Teams\nSynchronization Clients\nSync iOS\nSync KDE\nSync OSX\nSync Thunderbird\nTroubleshooting\nFound a Mistake? You should see output similar to the below example. Third party apps are all apps that are not distributed by\nownCloud\nor not in\nthe supported apps list\n."
        },
        {
            "cluster": 0,
            "chunk_content": "ownCloud Server\n10.15\nDesktop App\nnext\n5.3\n5.2\nInfinite Scale Documentation\nnext\n7.1\n7.0\nMobile App for Android\nnext\n4.5\n4.4\nMobile App for iOS\nnext\n12.4\n12.3\nownCloud Main Page\nownCloud Server\nnext\n10.15\n10.14\nownCloud Web User Interfaces\nnext\nownCloud Server\nDeveloper Manual\nDeveloping ownCloud Core\nTesting\nUnit Testing\nnext\n10.15\n10.14\nEdit this Page\nUnit-Testing\nTable of Contents\nPHP Unit Tests\nGetting PHPUnit\nRunning PHP Unit tests\nWriting PHP Unit tests\nBootstrapping ownCloud\nRunning Unit Tests for ownCloud Core\nFurther Reading\nUnit Testing JavaScript in Core\nInstalling Node JS\nRunning All The Tests\nDebugging Tests in the Browser\nUnit Test File Paths\nDocumentation\nPHP Unit Tests\nownCloud uses PHPUnit >= 7.5 for unit testing PHP code. Running PHP Unit tests\nThere are existing test options provided by ownCloud. To run them, change into the root directory of your ownCloud installation and run\ngrep \"make test\" <(make help)\nto see tests and parameters available. Runtime:       PHP 7.3.16-1+ubuntu18.04.1+deb.sury.org+1 with Xdebug 2.9.3\nConfiguration: /home/phil/git/owncloud/core/apps-external/notes/phpunit.xml\n..................................                                34 / 34 (100%)\nTime: 541 ms, Memory: 24.00 MB\nOK (34 tests, 107 assertions)\nGenerating code coverage report in Clover XML format ... done\nApps that are part of core\ndo not\nhave their own Makefile. If you use ownCloud functions in your class under test (i.e:\nOC::getUser()) you’ll need to bootstrap ownCloud or use dependency\ninjection. Given the class\nMyClass\nin your app:\n/srv/http/owncloud/apps/myapp/tests/lib/MyClass.php\n<?php\nnamespace OCA\\MyApp;\nclass MyClass {\npublic function addTwo($number) {\nreturn $number + 2;\n}\n}\nAn example for a simple test would be:\n/srv/http/owncloud/apps/myapp/tests/unit/MyClassTest.php\n<?php\nnamespace OCA\\Myapp\\Tests;\nclass MyClassTest extends \\Test\\TestCase {\nprotected $myClass;\nprotected function setUp() {\nparent::setUp();\n$this->myClass = new MyClass();\n}\npublic function testAddTwo(){\n$this->assertEquals(5, $this->testMe->addTwo(3));\n}\n}\nThe class under test and the test class should share the same namespace so you do not need to use a dedicated\nuse\nstatement for it. In\n/srv/http/owncloud/apps/myapp/\nyou run the test with the following command:\nphpunit tests/unit/MyClassTest.php\nMake sure to extend the\n\\Test\\TestCase\nclass with your test and always call the parent methods, when overwriting\nsetUp()\n,\nsetUpBeforeClass()\n,\ntearDown()\nor\ntearDownAfterClass()\nmethods from the\nTestCase\n. Bootstrapping ownCloud\nIf you use ownCloud functions or classes in your code, you’ll need to\nmake them available to your test by bootstrapping ownCloud. To do this, you’ll need to provide the\n--bootstrap\nargument when\nrunning PHPUnit\ncd /srv/http/owncloud\nphpunit --bootstrap tests/bootstrap.php apps/myapp/tests/testsuite.php\nIf you run the test suite as a user other than your Web server, you’ll\nhave to adjust your php.ini and file rights. nano /etc/php/php.ini\nand add\nopen_basedir = none\ncd /srv/http/owncloud\nsu -c \"chmod a+r config/config.php\"\nsu -c \"chmod a+rx data/\"\nsu -c \"chmod a+w data/owncloud.log\"\nRunning Unit Tests for ownCloud Core\nThe core project provides a script that runs all the core unit tests\nusing the specified database backend like\nsqlite\n,\nmysql\n,\npgsql\n,\noci\n(for Oracle), the default is\nsqlite\nTo run tests on\nmysql\nor\npgsql\nyou need a database user called\noc_autotest\nwith the password\nowncloud\n. MySQL Setup\nCREATE DATABASE oc_autotest;\nCREATE USER 'oc_autotest'@'localhost' IDENTIFIED BY 'owncloud';\nGRANT ALL ON oc_autotest. * TO 'oc_autotest'@'localhost';\nFor parallel executor support with EXECUTOR_NUMBER=0\nCREATE DATABASE oc_autotest0;\nCREATE USER 'oc_autotest0'@'localhost' IDENTIFIED BY 'owncloud';\nGRANT ALL ON oc_autotest0. * TO 'oc_autotest0'@'localhost';\nPostgreSQL Setup\nsu - postgres\n# Use password \"owncloud\"\ncreateuser -P oc_autotest\n# Give the user the privilege to create databases\npsql -c 'ALTER USER oc_autotest CREATEDB;'\nTo enable\ndropdb\nadd\nlocal all all trust\nto\npg_hba.conf\n. For parallel executor support with EXECUTOR_NUMBER=0\nsu - postgres\n# Use password \"owncloud\"\ncreateuser -P oc_autotest0\n# Give the user the privilege to create databases\npsql -c 'ALTER USER oc_autotest0 CREATEDB;'\nRun Tests\nTo run all tests, run the following command:\nmake test-php-unit\nTo run tests only for MySQL, run the following command:\nmake test-php-unit TEST_DATABASE=mysql\nTo run a particular test suite, use the following command as a guide:\nmake test-php-unit TEST_DATABASE=mysql TEST_PHP_SUITE=tests/lib/share/share.php\nBy default, a code coverage report is generated after the test run. Documentation\nHere are some useful links about how to write unit tests with Jasmine and Sinon:\nKarma test runner:\nhttp://karma-runner.github.io\nJasmine:\nhttps://jasmine.github.io\nSinon (for mocking and stubbing):\nhttp://sinonjs.org/\nDrone Testing\nAcceptance Tests\nAbout ownCloud\nThe Secure Collaboration Platform\nNews\nPrivacy statement\nImprint\nResources\nFAQ\nHelp\nSecurity\nChangelog\nGet started\nInteract\nRocket.Chat\nForum\nContribute\nCustomer support\n© Copyright 2011-2025, The ownCloud developers."
        },
        {
            "cluster": 4,
            "chunk_content": "Getting PHPUnit\nRunning\nmake\nin your terminal from the\nwebroot\ndirectory will prepare\neverything for testing. This will install beside necessary dependencies,\na local version of PHPUnit at\n<webroot>/lib/composer/phpunit/phpunit\n. Take care that the php phpunit file in the path provided has the executable permission set. make test\nrun all tests\nmake test-php-unit\nrun all PHP tests\nmake test-php-style\nrun PHP code style checks\nmake test-php-phan\nrun PHP phan static code analyzer\nmake test-php-phpstan\nrun PHP phpstan static code analyzer\nmake test-js\nrun Javascript tests\nmake test-js-debug\nrun Javascript tests in debug mode (continuous)\nmake test-acceptance-api\nrun API acceptance tests\nmake test-acceptance-cli\nrun CLI acceptance tests\nmake test-acceptance-webui\nrun webUI acceptance tests\nmake test-php-unit\nTEST_DATABASE=mysql TEST_PHP_SUITE=path/to/testfile.php\nmake test-php-style-fix\nrun PHP code style checks and fix any issues found\nTesting Apps\nTo run the tests for a specific app with the provided PHPUnit version:\nChange into one of the writable directories listed in the\napps_paths\narray in\nconfig/config.php\n, for example:\ncd apps-external\nClone the app from GitHub, for example:\ngit clone https://github.com/owncloud/notes.git\nEnable the app, for example:\ncd ..\nsudo -u www-data ./occ app:enable notes\nChange into the newly cloned directory, for example:\ncd apps-external/notes\nRun the following command:\nmake test-php-unit\nHere’s an example of running the command in the\nnotes app\n:\nphp -d zend.enable_gc=0  \"/home/phil/git/owncloud/core/apps-external/notes/../../lib/composer/bin/phpunit\" --configuration ./phpunit.xml --testsuite unit\nPHPUnit 7.5.20 by Sebastian Bergmann and contributors. Writing PHP Unit tests\nTo get started, do the following:\nCreate a directory called\ntests/unit\nin the top level of your application\nCreate a PHP file in the directory and\nrequire_once\nyour class which you want to test. Then you can run the created test with\nphpunit\n. For more resources on writing tests for PHPUnit visit\nthe writing tests section\nof the PHPUnit documentation. To\navoid the time taken for that, specify\nNOCOVERAGE\n:\nmake test-php-unit NOCOVERAGE=true TEST_DATABASE=mysql TEST_PHP_SUITE=tests/lib/share/share.php\nFurther Reading\nWriting Testable Code\nPHPUnit Manual\nClean Code Talks - GuiceBerry\nClean Code by Robert C. Martin\nUnit Testing JavaScript in Core\nJavaScript Unit testing for\ncore\nand\ncore apps\nis done using the\nKarma\ntest runner with\nJasmine\n."
        },
        {
            "cluster": 1,
            "chunk_content": "Run\nmake help\nto get a list of parameters\nTo update your testing environment run\nmake clean\nand\nmake\nagain. Alternatively, you can use\nthe default Makefile\nto automate your unit tests. This is\nthe recommended way to organize tests\n. These methods set up important stuff and clean up the system after the test so that the next test can run without side effects, such as clearing files and entries from the file cache, etc. This user needs the\nprivilege to create and delete the database called\noc_autotest\n. The easiest way to do this is to run the\nautomatic test script first, see next section. Every\ntime you reload the page, the unit tests will be relaunched and will\noutput the results in the browser console."
        },
        {
            "cluster": 3,
            "chunk_content": "You’ll most likely run your tests under a different user than the Web server. This might cause problems with your PHP settings (i.e.,\nopen_basedir\n) and requires you to adjust your configuration. Installing Node JS\nTo run the JavaScript unit tests you will need to install\nNode JS\n. You\ncan get it here:\nhttp://nodejs.org/\nAfter that you will need to setup\nthe\nKarma\ntest environment. Running All The Tests\nTo run all JavaScript tests, run the following command:\nmake test-js\nThis will also automatically set up your test environment. Debugging Tests in the Browser\nTo debug tests in the browser, this will run\nKarma\nin browser mode\nmake test-js-debug\nFrom there, open the URL\nhttp://localhost:9876\nin a web browser. On that\npage, click on the\nDebug\nbutton. An empty page will appear, from\nwhich you must open the browser console (F12 in Firefox/Chrome). Unit Test File Paths\nJavaScript unit test examples can be found in\napps/files/tests/js/\n. Unit tests for the core app JavaScript code can be found in\ncore/js/tests/specs\n."
        }
    ]
}