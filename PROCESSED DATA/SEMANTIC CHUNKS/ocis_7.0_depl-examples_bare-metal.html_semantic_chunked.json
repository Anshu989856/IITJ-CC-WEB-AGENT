{
    "file_name": "ocis_7.0_depl-examples_bare-metal.html",
    "file_path": "./owncloud_docs\\ocis_7.0_depl-examples_bare-metal.html",
    "chunks": [
        {
            "cluster": 3,
            "chunk_content": "Documentation for ownCloud (A Kiteworks Company)\nInfinite Scale Documentation\nIntroduction\nQuick Guide\nInfinite Scale Overview\nArchitecture and Concepts\nAvailability and Scalability\nSecurity Aspects\nDeployment\nPrerequisites\nStorage\nGeneral Storage Considerations\nNetwork File System\nS3\nPosixFS\nGeneral Information\nThe ocis init Command\nContainer Orchestration\nOffice Applications using WOPI\nSecuring oCIS\nUser Triggered GDPR Report\nServices\nGeneral Information\nDeployment Considerations\nEnvironment Variable Notes\nEnvironment Variables with Special Scope\nEnvironment Variable Changes\nRegistry\nCaching and Persistence\nGateways\nLogging\nPorts Used\nTransport Layer Security\nList of Services\nActivitylog\nAntivirus\nApp Provider\nApp Registry\nAudit\nAuth App\nAuth Basic\nAuth Bearer\nAuth Machine\nAuth Service\nClientlog\nCollaboration\nEventhistory\nFrontend\nGateway\nGraph\nGroups\nIDM\nInvitations\nIDP\nNATS\nNotifications\nOCDAV\nOCM\nOCS\nPolicies\nPostprocessing\nProxy\nSearch\nSettings\nSharing\nSSE\nStore\nStorage-Publiclink\nStorage-Shares\nStorage-System\nStorage-Users\nThumbnails\nUserlog\nUsers\nWeb\nWebDAV\nWebfinger\nWeb UI\nCustom Configuration\nCustom Theming\nMaintenance\nBackup and Restore\nBackup Considerations\nBackup\nRestore\nMaintenance Commands\nListing Space IDs\nListing User IDs\nMigration and Upgrades\nUpgrading Infinite Scale\nMonitoring\nPrometheus\nConfiguration Examples\nOffice Integration\nSearch\nDeployment Examples\nMinimal Bare Metal\nBare Metal with systemd\nContainer Setup\nUbuntu with Docker Compose\nLocal Production Setup\nDeployment on Hetzner\nSetup Federations\nScienceMesh Setup\nAdditional Information\nKnowledge Base\nInfinite Scale Documentation\n7.0\nDesktop App\nnext\n5.3\n5.2\nInfinite Scale Documentation\nnext\n7.1\n7.0\nMobile App for Android\nnext\n4.5\n4.4\nMobile App for iOS\nnext\n12.4\n12.3\nownCloud Main Page\nownCloud Server\nnext\n10.15\n10.14\nownCloud Web User Interfaces\nnext\nInfinite Scale Documentation\nDeployment Examples\nBare Metal with systemd\nnext\n7.1\n7.0\nEdit this Page\nBare Metal Deployment with systemd\nTable of Contents\nIntroduction\nRequirements\nExcluded Tasks\nUsed Settings\nInstall and Prepare Infinite Scale\nInstall and Configure the Infinite Scale Binary\nCreate a Service User\nInfinite Scale Data Directory\nInfinite Scale Configuration File\nSetup the systemd Service\nDependent Infinite Scale Service Startup\nNginx as Reverse Proxy\nPrepare nginx for certbot\nIssuing a Certificate via certbot for nginx\nFinalize the nginx Configuration\nApache as Reverse Proxy\nPrepare Apache for certbot\nIssuing a Certificate via certbot for Apache\nFinalize the Apache Configuration\nUpdating\nIntroduction\nThis guide describes an installation of Infinite Scale as a systemd service on bare metal. This ranges from a small installation on a Raspberry Pi up to installations on a decent server. This deployment example addresses a small production environment without running online office applications etc. For a minimal test and development environment, see the\nMinimal Bare Metal Deployment\n. If you intend to run a complete setup using online office, full text search etc., see the\nUbuntu with Docker Compose\ndeployment examples. Note that this guide expects that prerequisite of a computer with an installed Linux distribution of choice is met and required software other than Infinite Scale is installed and preconfigured. There is no detailed explanation but, where possible, links for more information are provided. Note that there is a difference in internal thumbnail processing when using binary vs container deployments. For details see the\nthumbnails\nservice. The embedded IDM service provides a minimal LDAP service for Infinite Scale and does not replace a LDAP server. See the\nIDM Service Configuration\nfor details. Consider to extend the configuration described based on the information given in\nGraceful Shutdown\n. This includes that configuration files and security measures need to be applied manually. With respect to security, some of the measures are shown in examples but not all possibilities are covered. To get the stable binary from ownCloud, visit\ndownload.owncloud.com\n, select the version and the platform of choice and copy the link of the file. All system data will be stored here including all files uploaded by the users. See the\nGeneral Information\nsection for more information about the environment variables used. If this has not been configured the same, the IDP service will log errors like\norigin does not match request URL\n. See the important notes for\nConfigurations to Access the Web UI\n. You can safely answer\nyes\n. Usually this is good enough. Write it down somewhere safe so that you can log in when the setup is complete. This can be done with two methods as described below. Select your preferred one. This can be done with two methods as described below. Select your preferred one. All versions need to be downloaded and started one time. For more details see the\nUpdating and Overlap\ndescription in the developer documentation. For\nany\nrelease gap\n, you must follow the procedure described above. Minimal Bare Metal\nContainer Setup\nAbout ownCloud\nThe Secure Collaboration Platform\nNews\nPrivacy statement\nImprint\nResources\nFAQ\nHelp\nSecurity\nChangelog\nGet started\nInteract\nRocket.Chat\nForum\nContribute\nCustomer support\n© Copyright 2011-2025, The ownCloud developers."
        },
        {
            "cluster": 0,
            "chunk_content": "The main differences between the setup described in this document and a minimal test environment is, the use of systemd, letsencrypt and a reverse proxy. systemd\nA HTTP reverse proxy, there are examples using\nnginx\nand\nApache\nCertbot\n+ the nginx or Apache plugin\nFor certbot, there are many\ncommand line options\navailable supporting common tasks like increasing security measures or automatic redirection, the example commands are limited to the minimum issuing a certificate. If using certbot command line options, files may be split by port and content can differ, though the result when combined is the same. Excluded Tasks\nThere are a few steps that are recommended but not covered in this guide:\nAutomate the Let’s Encrypt certificate renewal via cron jobs\nInstall and set up a firewall\nUsed Settings\nThe following settings were used in this guide. Add the correct port to\nOCIS_URL\nif it deviates from the default port 443 like\nhttps://ocis.example.com:4242\n. Setting the correct\nOCIS_URL\nis essential for the built-in openIDConnect IDP as the\nIDP service\nneeds to be reachable under the same host and port as the reverse proxy is configured. See the\nUsing the Embedded IDP Service\nfor configuration notes of the\nPROXY_TLS\nenvironment variable. By answering with\nyes\nthe communication is still encrypted but client and server certificates aren’t checked for validity. For an extra secure deployment, provide a verifiable TLS certificate and enable certificate checking. Prepare nginx for certbot\nTo set up nginx as a reverse proxy with Let’s Encrypt TLS certificates, create a file called e.g. ocis\nunder\n/etc/nginx/sites-available\nwith the following content:\nserver {\nlisten 80 ;\nlisten [::]:80 ;\nserver_name ocis.example.com;\n}\nActivate the new nginx config:\nsudo ln -s -f /etc/nginx/sites-available/ocis /etc/nginx/sites-enabled/ocis\nCheck the config and reload nginx:\nsudo nginx -s reload\nIssuing a Certificate via certbot for nginx\nRun\ncertbot\nto issue the TLS certificates:\nsudo certbot --nginx -d ocis.example.com\nFinalize the nginx Configuration\nAdapt the config to redirect automatically to https, use the newly generated certificates and add the required proxy configuration. The full config should look like this:\nserver {\nlisten 80 ;\nlisten [::]:80 ;\nserver_name ocis.example.com;\n# location to redirect to https\nlocation / {\n# add port if deviates via OCIS_URL\nreturn 301 https://$server_name$request_uri;\n}\n}\nserver {\n# default 443 but can deviate if set in OCIS_URL\nlisten 443 ssl http2;\nlisten [::]:443 ssl http2;\nserver_name ocis.example.com;\n# certificates managed by Certbot\nssl_certificate /etc/letsencrypt/live/ocis.example.com/fullchain.pem;\nssl_certificate_key /etc/letsencrypt/live/ocis.example.com/privkey.pem;\n# options and dhparams managed by Certbot\ninclude /etc/letsencrypt/options-ssl-nginx.conf;\nssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;\nlocation / {\n# OIDC Tokens in headers are quite large and can exceed default limits of reverse proxies\nproxy_buffers 4 256k;\nproxy_buffer_size 128k;\nproxy_busy_buffers_size 256k;\n# Disable checking of client request body size\nclient_max_body_size 0;\nproxy_pass http://localhost:9200;\nproxy_set_header Host $host;\n}\n}\nAdd the following to the SSL definition above if SSL security should be hardened / improved:\n# protocol, session timout, server cipers\n# NOTE: ssl cache is handled by certbot\n# also see: https://github.com/certbot/certbot/blob/master/certbot-nginx/certbot_nginx/_internal/tls_configs/options-ssl-nginx.conf\n# restrict ciphers\n#\n# IMPORTANT: depending on your setup, it is possible that certbot will also define the ciphers used. # this can lead to a nginx error about already defined ciphers. in such a case, you can comment out\n# the cipher definition here. ssl_ciphers \"ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:!SHA1:!SHA256:!SHA384:!RC4:!aNULL:!eNULL:!Medium:!LOW:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS:!SEED\";\n# use multiple curves  (only if dhparams file is used)\nssl_ecdh_curve secp521r1:secp384r1;\n# reduce time to first byte\nssl_buffer_size 4k;\n# add strict transport security\nadd_header Strict-Transport-Security \"max-age=15768000; must-revalidate; includeSubDomains; preload;\" always;\nCheck the config and reload nginx:\nsudo nginx -s reload\nIf the server is accessible from the web, see the free\nSSL Labs\npage to check the sites SSL security. Prepare Apache for certbot\nTo set up Apache as a reverse proxy with Let’s Encrypt TLS certificates, create a file called e.g. ocis\nunder\n/etc/apache2/sites-available\nwith the following content:\n<IfModule mod_rewrite.c>\n<VirtualHost *:80>\nServerName ocis.example.com\n</VirtualHost>\n</IfModule>\nActivate the new Apache config and reload Apache:\nsudo ln -s -f /etc/apache2/sites-available/ocis /etc/apache2/sites-enabled/ocis\nsudo apache2ctl -k graceful\nIssuing a Certificate via certbot for Apache\nRun\ncertbot\nto issue the TLS certificates:\nsudo certbot --apache -d ocis.example.com\nFinalize the Apache Configuration\nAdapt the config to redirect automatically to https, use the newly generated certificates and add the required proxy configuration. The full config should look like this:\n<IfModule mod_rewrite.c>\n<VirtualHost *:80>\nServerName ocis.example.com\n# redirect all http urls to https\nRewriteEngine On\nRewriteCond %{HTTPS} off\nRewriteRule (. *) https://%{HTTP_HOST}%{REQUEST_URI} [R=302,L,QSA]\n</VirtualHost>\n</IfModule>\n<IfModule mod_ssl.c>\n<VirtualHost *:443>\nServerName ocis.example.com\nSSLProxyEngine on\nSSLProxyVerify none\nSSLProxyCheckPeerCN off\nSSLProxyCheckPeerName off\nSSLProxyCheckPeerExpire off\nProxyPass / http://localhost:9200/\nProxyPassReverse / http://localhost:9200/\n#important, otherwise 400 errors from idp\nProxyPreserveHost on\n## Actual values to be added by certbot\n# SSLCertificateFile /etc/letsencrypt/live/ocis.example.com/fullchain.pem\n# SSLCertificateKeyFile /etc/letsencrypt/live/ocis.example.com/privkey.pem\n# Include /etc/letsencrypt/options-ssl-apache.conf\n# SSLOpenSSLConfCmd DHParameters /etc/letsencrypt/ssl-dhparams.pem\n</VirtualHost>\n</IfModule>\nAdd the following to the SSL definition above if SSL security should be hardened / improved:\n# restrict ciphers\nSSLCipherSUite  \"ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:!SHA1:!SHA256:!SHA384:!RC4:!aNULL:!eNULL:!Medium:!LOW:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS:!SEED\"\n# use multiple curves (only if dhparams file is used)\nSSLOpenSSLConfCmd Curves secp521r1:secp384r1\n# add strict transport security\nSSLOptions +StrictRequire\nHeader always set Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\"\n# disable ssl compression\nSSLCompression off\nReload Apache:\nsudo apache2ctl -k graceful\nSee the linked documentation how to enable the\nhttp2\nprotocol for Apache. If the server is accessible from the web, see the free\nSSL Labs\npage to check the sites SSL security."
        },
        {
            "cluster": 2,
            "chunk_content": "This guide was tested on a Debian 11 (bullseye) host but should work on any other modern Linux system with systemd. Requirements\nA supported filesystem according the\nocis prerequisites\n. Download the binary:\nsudo wget -P /usr/local/bin <file_url>\nMake the binary executable with:\nsudo chmod a+x /usr/local/bin/<file_name>\nCreate a link from the versioned ocis binary name to the final executable named\nocis\n:\nNote when using a symbolic link like this, upgrading and/or testing is much easier. sudo ln -s -f /usr/local/bin/<file_name> /usr/local/bin/ocis\nCheck the version installed:\nocis version --skip-services\nThe output looks like this:\nVersion: 7.0.0\nCompiled: 2025-03-14 00:00:00 +0000 UTC\nNote that if you omit\n--skip-services\n, you will get additional information about services printed. If you already have a running instance, you must stop and restart the instance to activate the new version. sudo useradd --system --no-create-home --shell=/sbin/nologin ocis\nInfinite Scale Data Directory\nCreate the ocis data directory. sudo mkdir -p /var/lib/ocis\nMake the service user\nocis\nthe owner of the data directory. For security reasons, this user should have restricted permissions for this directory:\nsudo mkdir -p /etc/ocis\nsudo touch /etc/ocis/ocis.env\nsudo chown -R ocis:ocis /etc/ocis\nCreate the environment file\n/etc/ocis/ocis.env\nwith the following content. sudo vi /etc/ocis/ocis.env\nOCIS_URL=https://ocis.example.com\nPROXY_HTTP_ADDR=0.0.0.0:9200\nPROXY_TLS=false\nOCIS_INSECURE=false\nOCIS_LOG_LEVEL=warn\nOCIS_CONFIG_DIR=/etc/ocis\nOCIS_BASE_DATA_PATH=/var/lib/ocis\nPROXY_TLS\nis set to\nfalse\nbecause\nTLS termination\nwill be done by the webserver. Set\nOCIS_CONFIG_DIR\nand\nOCIS_BASE_DATA_PATH\nIt is important to set both the\nconfig\nand\ndata\ndirectory environment variables in the\nocis.env\nfile. If this is omitted, ocis shell commands will not work. The command when run successfully will show you the initial admin user’s password. This command will create the configuration file\n/etc/ocis/ocis.yaml\n. Do NOT delete the\nocis.yaml\nfile without creating a backup of it first. When you regenerate the\nocis.yaml\nfile, it will be out of sync with the stored user data in the ocis data directory\n/var/lib/ocis\n. Also see\nThe ocis init Command\nfor more details. The easiest way to do this is with the following command:\nsudo systemctl edit --force --full ocis.service\nThen copy the content of the systemd file below into the editor and save it. If there is no release gap, you can update by stopping the runtime via systemd (\nsudo systemctl stop ocis\n),\nupdate the binary and make it executable\nand start the runtime with systemd again (\nsudo systemctl start ocis\n)."
        },
        {
            "cluster": 1,
            "chunk_content": "You can change this according your needs:\nThe Infinite Scale binary location:\n/usr/local/bin\n(OS default)\nThe Infinite Scale\nconfiguration directory\n:\n/etc/ocis\nThe Infinite Scale\nbase data directory\n:\n/var/lib/ocis\nThe URL accessing Infinite Scale:\nocis.example.com\nNote that this URL must resolve to the server running this installation. The internal port accessing Infinite Scale: 9200 (default)\nInstall and Prepare Infinite Scale\nInstall and Configure the Infinite Scale Binary\nDownload and install the Infinite Scale binary. Create a Service User\nIn your operating system, create a user and group who will run the ocis service and own all the files of the Infinite Scale service but is not allowed to log in, has no shell and no home directory. sudo chown ocis:ocis /var/lib/ocis\nInfinite Scale Configuration File\nCreate a directory and config file necessary for ocis. Adjust the\nOCIS_URL\nvariable to hold your domain where Infinite Scale will be reachable via\nnginx\n. Though you also can secure the communication between Infinite Scale and the webserver, this is not covered by this document. Generate the initial Infinite Scale configuration file, also see\nThe ocis init Command\n:\nsudo -u ocis ocis init --config-path /etc/ocis\nYou will be asked if you want to configure Ininite Scale with certificate checking disabled. Infinite Scale is composed of several microservices which encrypt the communication between them with TLS. Setup the systemd Service\nTo run the\nInfinite Scale runtime\nas a\nsystemd\nservice, create the file\n/etc/systemd/system/ocis.service\nwith the content provided below. systemd file\n[Unit]\nDescription=OCIS server\n[Service]\nType=simple\nUser=ocis\nGroup=ocis\nEnvironmentFile=/etc/ocis/ocis.env\nExecStart=/usr/local/bin/ocis server\nRestart=always\n[Install]\nWantedBy=multi-user.target\nRun the following command to apply your changes:\nsudo systemctl daemon-reload\nNow you can run Infinite Scale as a systemd service. Start it with:\nsudo systemctl enable --now ocis\nWith this setup, Infinite Scale is also restarted automatically after a reboot. If you need to restart Infinite Scale because of configuration changes in\n/etc/ocis/ocis.env\n, run:\nsudo systemctl restart ocis\nThe systemd logs of Infinite Scale can be displayed by issuing:\nsudo journalctl -f -u ocis\nDependent Infinite Scale Service Startup\nIf you want to ensure that you have a necessary service like a NFS mount point up and running\nbefore\nthe Infinite Scale service starts up, see\nStart a Service After a Resource is Mounted\n. This step can be an important measure, because if the Infinite Scale service starts up but the necessary mount point is not available, you may be in an undefined Infinite Scale operating state. Open a web browser, navigate to your Infinite Scale URL\nhttps://ocis.example.com\nand log in as admin user with the password returned by the\nocis init\ncommand. Open a web browser, navigate to your Infinite Scale URL\nhttps://ocis.example.com\nand log in as admin user with the password returned by the\nocis init\ncommand. Updating\nIf new Infinite Scale releases are available, you\nmust not\nskip any version in between the current running and the latest available release for internal upgrade reasons."
        },
        {
            "cluster": 4,
            "chunk_content": "Replace\n<file_url>\nand\n<file_name>\nin the commands accordingly. The password can be changed in the UI later on or be reset if forgotten via\nPassword Reset for the Admin User\n. If for some reason you still want to regenerate the config file, you first need to empty the data directory but beware if you already have user files stored there. Nginx as Reverse Proxy\nWhenever a configuration change has been made, you need to do a configuration check and reload the nginx configuration. For ease of writing, the examples show\nsudo nginx -s reload\n. sudo nginx -s reload\nNote that this command includes checking and reloading the config in the same step. sudo nginx -t\nsudo systemctl reload nginx\nNote that using\nsystemctl reload nginx\nalone will NOT validate your configuration but will execute the command in a clean environment and not in the current user environment. Apache as Reverse Proxy\nWhenever a configuration change has been made, you need to do a configuration check and reload the Apache configuration. For ease of writing, the examples show\nsudo apache2ctl -k graceful\n. sudo apache2ctl -k graceful\nNote that this command includes checking and reloading the config in the same step. sudo apache2ctl -t\nsudo systemctl reload apache2\nNote that using\nsystemctl reload apache2\nalone will NOT validate your configuration but will execute the command in a clean environment and not in the current user environment."
        }
    ]
}