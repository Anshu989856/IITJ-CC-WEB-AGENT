{
    "file_name": "ocis_7.0_depl-examples_container-setup.html",
    "file_path": "./owncloud_docs\\ocis_7.0_depl-examples_container-setup.html",
    "chunks": [
        {
            "cluster": 0,
            "chunk_content": "Documentation for ownCloud (A Kiteworks Company)\nInfinite Scale Documentation\nIntroduction\nQuick Guide\nInfinite Scale Overview\nArchitecture and Concepts\nAvailability and Scalability\nSecurity Aspects\nDeployment\nPrerequisites\nStorage\nGeneral Storage Considerations\nNetwork File System\nS3\nPosixFS\nGeneral Information\nThe ocis init Command\nContainer Orchestration\nOffice Applications using WOPI\nSecuring oCIS\nUser Triggered GDPR Report\nServices\nGeneral Information\nDeployment Considerations\nEnvironment Variable Notes\nEnvironment Variables with Special Scope\nEnvironment Variable Changes\nRegistry\nCaching and Persistence\nGateways\nLogging\nPorts Used\nTransport Layer Security\nList of Services\nActivitylog\nAntivirus\nApp Provider\nApp Registry\nAudit\nAuth App\nAuth Basic\nAuth Bearer\nAuth Machine\nAuth Service\nClientlog\nCollaboration\nEventhistory\nFrontend\nGateway\nGraph\nGroups\nIDM\nInvitations\nIDP\nNATS\nNotifications\nOCDAV\nOCM\nOCS\nPolicies\nPostprocessing\nProxy\nSearch\nSettings\nSharing\nSSE\nStore\nStorage-Publiclink\nStorage-Shares\nStorage-System\nStorage-Users\nThumbnails\nUserlog\nUsers\nWeb\nWebDAV\nWebfinger\nWeb UI\nCustom Configuration\nCustom Theming\nMaintenance\nBackup and Restore\nBackup Considerations\nBackup\nRestore\nMaintenance Commands\nListing Space IDs\nListing User IDs\nMigration and Upgrades\nUpgrading Infinite Scale\nMonitoring\nPrometheus\nConfiguration Examples\nOffice Integration\nSearch\nDeployment Examples\nMinimal Bare Metal\nBare Metal with systemd\nContainer Setup\nUbuntu with Docker Compose\nLocal Production Setup\nDeployment on Hetzner\nSetup Federations\nScienceMesh Setup\nAdditional Information\nKnowledge Base\nInfinite Scale Documentation\n7.0\nDesktop App\nnext\n5.3\n5.2\nInfinite Scale Documentation\nnext\n7.1\n7.0\nMobile App for Android\nnext\n4.5\n4.4\nMobile App for iOS\nnext\n12.4\n12.3\nownCloud Main Page\nownCloud Server\nnext\n10.15\n10.14\nownCloud Web User Interfaces\nnext\nInfinite Scale Documentation\nDeployment Examples\nContainer Setup\nnext\n7.1\n7.0\nEdit this Page\nContainer Setup\nTable of Contents\nIntroduction\nDocker Prerequisites\nInstall Docker\nCheck the Docker Group Membership\nImage Management\nDownload the Infinite Scale Image\nUpdate an Image\nRemove an Infinite Scale Image\nStart the Infinite Scale Runtime\nPreparation\nFirst Time Start\nRecurring Start of Infinite Scale\nDelete a Setup\nExecute Infinite Scale Commands\nUseful Docker Parameters\nUseful Docker Commands\nStart the Container Detached\nList Running Containers\nStop a Running Container\nRestarting a Container\nAutostart Infinite Scale Runtime on Boot\nPrint Logs From Detached Container\nMulti-Container Environment\nGUI for Docker\nIntroduction\nImages for a container-based setup of Infinite Scale are available on Docker Hub. ownCloud highly recommends reading the\nGeneral Info\nas it contains valuable information about configuration rules, managing services and default paths - just to mention some of the useful topics. Preparation\nIn the examples shown below, bind mounts with the following folders are used to keep data persistent and located in your home directory. To check this, type:\ndocker inspect owncloud/ocis -f '{{.Config.User}}'\n1000\nFor the folders above, the following rules apply:\nBecause\nbind-mounts\n(used in the example below) create paths if they do not exist with the root user and group, the container user cannot write into them. To overcome this issue, you have to create both folders upfront manually to avoid a permission denied problem. If this does not match, you must take care that the container user can write into the created paths. Note that if you do not define a host directory with a bind mount as target location, the initial setup will get lost because the container ends after executing the command. ownCloud therefore recommends either using bind mounts or Docker volumes to make the initial setup, further changes and your data persistent. This is  because\nlocalhost\nwould point to a location inside the container and not to the server being accessed. In such a case, you have to define different ports and data paths for each of the runtime containers to avoid unexpected behavior. --interactive, -i: Keep STDIN open even if not attached\nThis keeps STDIN open to the container. --tty, -t: Allocate a pseudo-TTY\nAllocate a virtual terminal session within the container. --publish, -p: Publish a container’s port(s) to the host\nDefines the port mapping\n<hostPort>:<containerPort>\n. Use the port mapping if you want to access the dockerized Infinite Scale web user interface. Giving containers a meaningful name helps to identify them more easily. See\nCreate a service which creates an NFS volume\nfor an example. Bind mounts\n(\n--type=bind\n) depend on the directory structure and OS of your server. You should always create the source directories upfront because of correct permissions (see:\nPreparation\n), despite the fact that bind-mounts create directories that do not yet exist on the host. In such a case, the directory will be created automatically using the user the\ndocker service\nruns with, usually the root user, making the source path inaccessible to the user inside the docker container. macOS cannot use bind mounts, as Docker Desktop for macOS does currently not fully support extended attributes. Use a Docker volume for persistent data instead. Note that the same parameters are used as before when the container has been started with the\nrun\ncommand. Dependent Docker Service Startup\nIf you are using bind mounts and want to ensure that you have e.g. If you do not want the container to autostart any longer, you have to\nstop\nit manually first. If containers are on the same network, they can talk to each other. See the\nMulti Container Apps\ndocumentation to read more about this topic. In a nutshell, you have to create a Docker network and reference this network in all the containers that should be able to talk to each other. Bare Metal with systemd\nLocal Production Setup\nAbout ownCloud\nThe Secure Collaboration Platform\nNews\nPrivacy statement\nImprint\nResources\nFAQ\nHelp\nSecurity\nChangelog\nGet started\nInteract\nRocket.Chat\nForum\nContribute\nCustomer support\n© Copyright 2011-2025, The ownCloud developers."
        },
        {
            "cluster": 1,
            "chunk_content": "You can easily download and start such an image with only a few commands. Note that when checking if software is installed on your system with the\nwhich\ncommand below, you might be shown links containing the queried names but pointing to a different program. If not, you may get no output at all or a message that it couldn’t be found. Note that this command will download the correct image suitable for your OS if available. If not explicitly declared otherwise, the\nlatest\ntag is implicitly used and always reflects the latest\nproduction\nversion. When a new image is available use these steps to upgrade the image. Refer to the\nDefault Users and Groups\nsection if you want to have demo users created when initializing the system. You can edit this file later. This is not recommended for public instances! As you cannot overwrite the existing configuration, you must delete the old configuration first to proceed. For details see:\nConfigurations to Access the Web UI\n. In the example below, replace\n<your-hostname>\nwith the host name or IP address of your server. See\nConfiguration Rules\nfor more details. Consider\nalways\nas a good starting point. It does not receive input or display output. You can replace\nalways\nwith other options suitable for your environment."
        },
        {
            "cluster": 4,
            "chunk_content": "See the latest or stable images from\nDocker Hub\n. This description mainly focuses on Docker which you can take as template or starting point if you are using different container managing software products. After running a check via\nwhich\n, also try to execute the queried command and look if the output printed comes from docker like in the following example:\nUsage:  docker [OPTIONS] COMMAND\nor\nUsage:  docker compose [OPTIONS] COMMAND\nUse the following command to check if\ndocker\nis installed on your system:\nwhich docker\nIf Docker is installed, you’ll be informed. In that case you need to install Docker first. Install Docker\nOn most Linux distributions, you can simply install Docker via the package manager. For later use, you might want to install\nDocker-Compose\nas well. Alternatively, install Docker depending on your OS from the Docker site. See\nInstall Docker Engine\nand\nInstall Docker Compose\nfor details. When using macOS, you have to install\nDocker Desktop\nwhich includes the Docker Engine, the Docker CLI client, Docker Compose,\nDocker Dashboard\nand other tools. Check the Docker Group Membership\nRunning a Docker container without root privileges (\nsudo\n), requires the user to be a member of the docker group. First, check if the docker group is already created and you are member of this group:\ncat /etc/group | grep docker\ndocker:x:998:<your-user-name>\nIf the group does not exist or you are not a member, continue with\nPost-installation steps for Linux\nto create the group and add your user to it. docker inspect owncloud/ocis:latest \\\n-f '{{index .Config.Labels \"org.opencontainers.image.version\"}}'\nExample output\nv7.0.0\nUpdate an Image\nFirst check the current version of the image used with the command above and compare it with the versions available on\nDocker Hub\n. To do so,\nlist the running containers\nfirst and type the following command replacing the <container-id> accordingly:\ndocker exec -it <container-id> sh\nYou can now use commands like\nocis --help\nor others to\nmanage your runtime services\n. To exit the container’s shell, either type\nexit\nor\nCTRL\n+\nD\n. Useful Docker Parameters\nThe following\nDocker command-line options\nare quite helpful to know:\n--env, -e: Set environment variables\nUse this to pass only a few environment variables to the run command. --rm: Automatically remove the container when it exits\nTell the Docker daemon to clean up the container and remove the file system after the container exits. --name: Assign a name to the container\nBy default, containers created with\ndocker run\nare given a random name like\nsmall_roentgen\nwhich may not be suitable to identify their purpose properly. --restart: Restart policy to apply when a container exits\nSee the details in the\ndocker run\ndocumentation for available options. --mount: Attach a filesystem mount to the container\nDocker volumes\n(\n--type=volume\n) are completely managed by Docker and have no server OS dependency. Note that the directory on the host must already exist, it will not be created by docker. Useful Docker Commands\nStart the Container Detached\nNote that the\ndocker run\ncommand will bind the container to the shell you are using. If you want to detach it so it won’t be stopped when the shell is closed or gets disconnected (SIGHUP), use the following\ndocker run\ncommand-line option:\n-d, --detach: Run container in background and print container ID\nThe Docker container runs in the background of your terminal. List Running Containers\nTo\nlist\nall\nrunning\ncontainers, type:\ndocker ps\nExample output\nCONTAINER ID   IMAGE           COMMAND                        CREATED         STATUS         PORTS                                       NAMES\na0e4db3e91e8   owncloud/ocis   \"/usr/local/bin/ocis server\"   8 seconds ago   Up 6 seconds   0.0.0.0:9200->9200/tcp, :::9200->9200/tcp   ocis_runtime\nStop a Running Container\nTo\nstop\na running detached container, you need the container ID which you will get with the above command. Then type the following command and replace <container-id> with the ID of the container you want to stop:\ndocker stop <container-id>\nRestarting a Container\nRestarting a Docker container\ndoes an equivalent of\ndocker stop\nand\ndocker start\n. Autostart the Docker Service\nCheck if the Docker service is set to be automatically started on boot:\nsudo systemctl is-enabled docker\nIf the output is\nenabled\n, you can proceed with the section to autostart the container. If the output is\ndisabled\n, follow the next steps to enable it:\nsudo systemctl enable --now docker\nThis will create an output like:\nCreated symlink /etc/systemd/system/multi-user.target.wants/docker.service → /lib/systemd/system/docker.service. Then check if the service has started with:\nsudo systemctl status docker\nThis should display output like:\n● docker.service - Docker Application Container Engine\nLoaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled)\n... a necessary NFS mount point up and running\nbefore\nthe Docker service and the container starts up, see\nStart a Service After a Resource is Mounted\n. Autostart the Container\nTo start the container automatically after the Docker service has started or when the container exits because of an error, add the\n--restart=always\ncommand line option to the\ndocker run\ncommand. Print Logs From Detached Container\nThe\ndocker logs\ncommand shows information logged by a running container, which is useful if you have detached it. To show the logs and follow log output, type the following and replace the <container-id> accordingly:\ndocker logs -f <container-id>\nMulti-Container Environment\nContainers run in isolation and don’t know anything about other processes or containers on the same machine. GUI for Docker\nDocker provides a GUI named\nDocker Desktop\nfor various operating systems, though you can use other tools like\nPortainer\n. For more information see the\nDocker Desktop macOS\npage. For more information see the\nDocker Desktop Linux\npage for your distribution."
        },
        {
            "cluster": 2,
            "chunk_content": "Docker Prerequisites\nTo fetch and run Infinite Scale in a Docker container, make sure the package docker is installed. Image Management\nDownload the Infinite Scale Image\nTo give some terminology guidance, images are unchangeable snapshots of live containers, while containers are running (or stopped) instances of an image. To download the\nlatest Infinite Scale image\n, run the following command. For Windows, Infinite Scale Docker images are not available. If you want to test out a rolling release use\nowncloud/ocis-rolling\ninstead:\ndocker pull owncloud/ocis\nCheck your Infinite Scale image with:\ndocker images\nExample output\nREPOSITORY      TAG       IMAGE ID       CREATED       SIZE\nowncloud/ocis   latest    fc4151802141   9 hours ago   98.3MB\nCheck your Infinite Scale version with the following command. Stop\nthe running Infinite Scale container\nRemove\nthe actual image\nDownload\nthe desired new image\nStart\nthe Infinite Scale runtime\nFor detailed commands see the corresponding sections. Remove an Infinite Scale Image\nIf you want to remove an Infinite Scale image, run the following command:\ndocker images\nExample output\nREPOSITORY      TAG       IMAGE ID       CREATED        SIZE\nowncloud/ocis   latest    22c455afc445   46 hours ago   98.3MB\nReplace <image-id> with the ID you want to remove from the above printout:\ndocker rmi -f <image-id>\nStart the Infinite Scale Runtime\nInfinite Scale is started in two steps:\nA first time start to initialize the system and\na recurring start after initialization. The Infinite Scale container runs internally with the default user and group ID of 1000. First Time Start\nInfinite Scale needs a\nfirst time initialization\nto set up the environment. docker run --rm -it \\\n--mount type=bind,source=$HOME/ocis/ocis-config,target=/etc/ocis \\\n--mount type=bind,source=$HOME/ocis/ocis-data,target=/var/lib/ocis \\\nowncloud/ocis init\nOn success, you will see a message like:\nDo you want to configure Infinite Scale with certificate checking disabled? For more details, see:\nInitialize Infinite Scale\n. Recurring Start of Infinite Scale\nWhen you run the Infinite Scale container, you\nmust\nspecify at least the\nOCIS_URL\nas an environment variable to have browser access. To run the Docker container, simply type:\ndocker run \\\n--name ocis_runtime \\\n--rm \\\n-it \\\n-p 9200:9200 \\\n--mount type=bind,source=$HOME/ocis/ocis-config,target=/etc/ocis \\\n--mount type=bind,source=$HOME/ocis/ocis-data,target=/var/lib/ocis \\\n-e OCIS_INSECURE=true \\\n-e PROXY_HTTP_ADDR=0.0.0.0:9200 \\\n-e OCIS_URL=https://<your-hostname>:9200 \\\nowncloud/ocis\nTo access Infinite Scale, open your browser and type\nhttps://<your-hostname>:9200\nWhile this is not used in production and for testing purposes only, you could run more than one Infinite Scale runtime container concurrently. Execute Infinite Scale Commands\nTo execute Infinite Scale commands, you have to enter the shell of the running container. To restart a container, type the following and replace the <container-id> accordingly:\ndocker restart <container-id>\nAutostart Infinite Scale Runtime on Boot\nTo autostart Infinite Scale when the server boots or reboots, some steps need to be performed. This step can be an important measure, because if the container starts up but the necessary mount point is not available, you may be in an undefined Infinite Scale operating state."
        },
        {
            "cluster": 3,
            "chunk_content": "Read the ocis release notes before upgrading to avoid missing notes about possible breaking changes. Change the locations according your needs:\nFor the config we use the folder\n$HOME/ocis/ocis-config\n. For data we use the folder\n$HOME/ocis/ocis-data\n. To do so, type:\nmkdir -p $HOME/ocis/ocis-config\nmkdir -p $HOME/ocis/ocis-data\nThe user you have logged in with must have the default user and group ID of 1000 to match the container user and group ID. You can do this for example with the command:\nsudo chown -Rfv 1000:1000 $HOME/ocis/\nIn this case, you need to access the content of the\nocis\nfolder with root privileges or with a user matching the owner ID. You will need to answer questions as the basis for generating a default\nocis.yaml\nfile. [yes | no = default]\n=========================================\ngenerated OCIS Config\n=========================================\nconfigpath : /etc/ocis/ocis.yaml\nuser       : admin\npassword   : <removed for documentation>\nIf you get an error message like the following:\nCould not create config: config in /etc/ocis/ocis.yaml already exists\nyou already have created a configuration once. Delete a Setup\nIf you want to delete your setup, which is\nboth\nthe configuration and the data, just delete the\nocis-config\nand the\nocis-data\nfolder and restart the process described in this chapter. --env-file: Read in a file of environment variables\nIf you have more environment variables to hand over, put them all in a file and use this command-line option. Preferably use\n/etc/ocis\non your host as location. Note the volume mount target path\ntarget=/var/lib/ocis\nwhich uses the default Infinite Scale data path if not otherwise defined. Note the use of\n$HOME/ocis/…​\nfor the paths when using the users home directory. When using\n~/ocis/…​\n, you will get an error like\nmount path must be absolute\n. Use this type to mount a local directory of your OS. Example:\n-v /some/host/dir:/var/lib/ocis\n, which uses the default Infinite Scale data path if not otherwise defined. In general, a filesystem at your OS mount point must be a\nsupported filesystem\nwhich supports extended attributes."
        }
    ]
}