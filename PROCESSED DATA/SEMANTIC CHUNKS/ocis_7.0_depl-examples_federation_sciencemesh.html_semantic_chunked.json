{
    "file_name": "ocis_7.0_depl-examples_federation_sciencemesh.html",
    "file_path": "./owncloud_docs\\ocis_7.0_depl-examples_federation_sciencemesh.html",
    "chunks": [
        {
            "cluster": 4,
            "chunk_content": "Documentation for ownCloud (A Kiteworks Company)\nInfinite Scale Documentation\nIntroduction\nQuick Guide\nInfinite Scale Overview\nArchitecture and Concepts\nAvailability and Scalability\nSecurity Aspects\nDeployment\nPrerequisites\nStorage\nGeneral Storage Considerations\nNetwork File System\nS3\nPosixFS\nGeneral Information\nThe ocis init Command\nContainer Orchestration\nOffice Applications using WOPI\nSecuring oCIS\nUser Triggered GDPR Report\nServices\nGeneral Information\nDeployment Considerations\nEnvironment Variable Notes\nEnvironment Variables with Special Scope\nEnvironment Variable Changes\nRegistry\nCaching and Persistence\nGateways\nLogging\nPorts Used\nTransport Layer Security\nList of Services\nActivitylog\nAntivirus\nApp Provider\nApp Registry\nAudit\nAuth App\nAuth Basic\nAuth Bearer\nAuth Machine\nAuth Service\nClientlog\nCollaboration\nEventhistory\nFrontend\nGateway\nGraph\nGroups\nIDM\nInvitations\nIDP\nNATS\nNotifications\nOCDAV\nOCM\nOCS\nPolicies\nPostprocessing\nProxy\nSearch\nSettings\nSharing\nSSE\nStore\nStorage-Publiclink\nStorage-Shares\nStorage-System\nStorage-Users\nThumbnails\nUserlog\nUsers\nWeb\nWebDAV\nWebfinger\nWeb UI\nCustom Configuration\nCustom Theming\nMaintenance\nBackup and Restore\nBackup Considerations\nBackup\nRestore\nMaintenance Commands\nListing Space IDs\nListing User IDs\nMigration and Upgrades\nUpgrading Infinite Scale\nMonitoring\nPrometheus\nConfiguration Examples\nOffice Integration\nSearch\nDeployment Examples\nMinimal Bare Metal\nBare Metal with systemd\nContainer Setup\nUbuntu with Docker Compose\nLocal Production Setup\nDeployment on Hetzner\nSetup Federations\nScienceMesh Setup\nAdditional Information\nKnowledge Base\nInfinite Scale Documentation\n7.0\nDesktop App\nnext\n5.3\n5.2\nInfinite Scale Documentation\nnext\n7.1\n7.0\nMobile App for Android\nnext\n4.5\n4.4\nMobile App for iOS\nnext\n12.4\n12.3\nownCloud Main Page\nownCloud Server\nnext\n10.15\n10.14\nownCloud Web User Interfaces\nnext\nInfinite Scale Documentation\nDeployment Examples\nSetup Federations\nScienceMesh Setup\nnext\n7.1\n7.0\nEdit this Page\nSetup Federations Using ScienceMesh\nTable of Contents\nIntroduction\nOne Time Setup\nSetup a Trust Relationship\nSetup a Federation Between Users\nShare Resources\nIntroduction\nThis document guides you to setup a federation between users of Infinite Scale instances using the ScienceMesh framework which includes the Open Cloud Mesh (OCM) technology. One Time Setup\nThe following description has only to be done one time per instance involved to setup a trust relationship and requires sysadmins which have access to the Infinite Scale configuration files. Setup a Trust Relationship\nIn the example below, a trust relationship is setup between the\nocis.owncloud.test\nand\nhost.docker.internal\ninstances. To do so, an\nocmproviders.json\nfile needs to be created according the description in\nTrust Between Instances\n. When the file has been properly setup,\nOpenCloudMesh\nneeds to be enabled via an environment variable. See\nEnable OCM\nfor more details. Finally, depending on the deployment, either all federation instances or each ocm service needs to be restarted to take the changes effective."
        },
        {
            "cluster": 1,
            "chunk_content": "See the\nScienceMesh\nlink for more framework details. To setup a federation using ScienceMesh, only a view steps are necessary:\nSetup a trust between instances involved. Setup the federation between users using generated tokens. Share resources between users of the federation. The following needs sysadmin priviledges on both federation parties\nTo prepare the Infinite Scale instances involved for federation, a trust relationship must be setup. Setup a Federation Between Users\nBefore sharing resources, a sharer must first invite a parter to join a federation. After setting up the federation, sharing resources can mutually be created. When\ndemo users\nhave been setup, which should not be present in production, one federation partner must be a user that has been created manually. Optionally, enter a description and an eMail address of the partner user for the federation you want to create and click\nGenerate\n. Accept the invite token by the federation partner\nIn our example, user\nludmilla\nfrom the\nhost.docker.internal\ninstance is the federation partner and will accept the invite token. If the federation partner got an eMail to accept the invite, click on the\nlink\nprovided in the eMail to open the\nInvitations\nscreen with prefilled data in the\nAcccept invitations\nwindow. Click\nAccept invitation\nwhen done:\nIn window\nFederated connections\n, the setup federation is now shown and ready to share resources between the federation partners. This information is respective also shown on the inviter side of the federation:\nAcceptor:\nInvitor:\nShare Resources\nAfter the federation has been finally setup, federated users can now share resources. If you have more federations, you can add more users."
        },
        {
            "cluster": 2,
            "chunk_content": "For security reasons and data protection, invitations are limited to trusted instances only. The following can be carried out by any user of the trusted instances. Generate an invite token by the invitor\nIn our example, user\nvlad\nfrom the\nocis.owncloud.test\ninstance generates the invite token. Select the\nScienceMesh\napp, the selector can be opened by the square icon on the top left:\nThe\nInvitations\nscreen opens:\nIn\nInvite users\n, click\nGenerate new invitation\n, the following window appears. If an eMail address is entered, a preformed URL with the token is sent to the sharee for ease of accepting. Note that you cant edit a generated token. You either must recreate or send it manually. Back in\nInvite users\n, the generated token shows up. The remaining time to accept the invite before expiring is also shown. Select the ScienceMesh app, the selector can be opened by the square icon on the top left:\nThe\nInvitations\nscreen opens:\nIn\nAcccept invitations\n, if not prefilled via the eMail link, enter the token and select the institution of the user who sent the invite from the dropdown field. Token and institution must match to be acceptable. Note that a user must have accepted the invitaion to be selectable in the sharing dialogue."
        },
        {
            "cluster": 0,
            "chunk_content": "This only needs to be done one time per invitor/acceptor pair. This pair is now called a federation. With the three vertical dots, you can select additional options."
        },
        {
            "cluster": 3,
            "chunk_content": "In\nFiles App\nInside a Space\nFile or Folder\nSharing Icon\n, switch to\nexternal\nand start typing the user name. When found, select it:\nAs rule of thumb:\nYou cannot share your personal space. You cannot share a project space. You should not share files from your personal space for security reasons. Only share files and folders inside project spaces. When done, click\nShare\nIn\nFiles App\nShares\n, you can see all shares that are\nShared with me\nor\nShared with others\n:\nDeployment on Hetzner\nKnowledge Base\nAbout ownCloud\nThe Secure Collaboration Platform\nNews\nPrivacy statement\nImprint\nResources\nFAQ\nHelp\nSecurity\nChangelog\nGet started\nInteract\nRocket.Chat\nForum\nContribute\nCustomer support\nÂ© Copyright 2011-2025, The ownCloud developers."
        }
    ]
}