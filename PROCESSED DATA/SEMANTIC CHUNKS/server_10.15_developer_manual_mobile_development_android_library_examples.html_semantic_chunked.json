{
    "file_name": "server_10.15_developer_manual_mobile_development_android_library_examples.html",
    "file_path": "./owncloud_docs\\server_10.15_developer_manual_mobile_development_android_library_examples.html",
    "chunks": [
        {
            "cluster": 3,
            "chunk_content": "Documentation for ownCloud (A Kiteworks Company)\nownCloud Server\nIntroduction\nAdmin Manual\nIntroduction\nUseful Pages\nFAQ\nGDPR\nInstallation\nDeployment Considerations\nDeployment Recommendations\nNFS\nSystem Requirements\nConfiguration Notes and Tips\nInstallation Options\nInstalling With Docker\nManual Installation on Linux\nDetailed Installation Guide\nDetailed Installation on Ubuntu (various versions)\nQuick Installation Guide\nOn Ubuntu 20.04\nOn Ubuntu 22.04\nLinux Package Manager\nLinux Package Manager Installation\nThe Installation Wizard\nTroubleshooting\nChanging Your ownCloud URL\nInstalling and Managing Apps\nSupported Apps\nMedia Viewer\nSELinux Configuration\nUsing Let’s Encrypt SSL Certificates\nUsing Letsencrypt\nApache\nConfiguration\nDatabase\nDatabase Conversion\nDatabase Configuration\nEncryption\nEncryption Configuration\nEncryption Configuration Quick Guide\nExternal Storage\nExternal Storage Configuration\nExternal Storage Authentication Mechanisms\nAmazonS3\nDropbox\nFTP\nGoogle\nLocal\nownCloud\nS3 as Primary\nSFTP\nSMB\nWebDAV\nFiles and Sharing\nBig File Upload Configuration\nManual File Locking\nDefault Files Configuration\nFederated Cloud Sharing Configuration\nFile Sharing Configuration\nFile Versioning\nTransactional File Locking\nPreview Configuration\nMimetypes\nManaging the Trashbin\nIntegration\nMicrosoft Teams\nownCloud App for Splunk\nGeneral Topics\nCode Signing\nImpersonate Users\nFull Text Search\nServer\nActivity Configuration\nBackground Jobs Configuration\nCaching Configuration\nConfig Sample PHP Parameters\nConfig Apps Sample PHP Parameters\nCustom Client Repos\nEmail Configuration\nExcluded Blacklisted Files\nExternal Sites\nHarden Server\nImport SSL Cert\nIndex PHP Less URLs\nOCC Command\nLanguage Configuration\nLegal Settings Configuration\nLogging\nLogging Configuration\nRequest Tracing\nReverse Proxy Configuration\nSecurity\nBrute-Force Protection\nOAuth2\nPassword policy\nSecurity Setup Warnings\nThe HSM (Hardware Security Module) Daemon\nDependency Notes\nServer Tuning\nThird Party PHP Configuration\nVirus Scanner Support\nUI Configuration\nUser\nUser Management\nUser Roles\nReset Admin Password\nReset User Password\nUser Auth FTP SMB IMAP\nUser Auth LDAP\nUser Auth Two-Factor\nUser Auth OAuth2\nUser Provisioning API\nCustom Groups App\nGuests App\nOpenID Connect (OIDC)\nLogin Policies\nMaintenance\nUpgrading\nManual Upgrade\nDatabase Upgrade\nUpgrading from Package\nUsing the Updater App\nUpgrading PHP\nMarketplace Apps\nBackup and Restore\nBackup\nRestore\nMaintenance Mode\nExport and Import Instance Data\nManually Moving Data Folders\nEncryption\nMigrating from User Key to Master Key Encryption\nMigrating to a Different Server\nMigrating to Kiteworks PCN\nEnterprise\nAuthentication\nEnterprise Only Authentication\nKerberos Authentication\nClients\nCustom Client Repos\nCollaboration\nCollabora Online / Secure View\nMicrosoft Office Online / WOPI Integration\nDocument Classification\nClassify Documents and Enforce Policies\nExternal Storage\nLDAP Home Connector Configuration\nSharepoint integration Configuration\nWindows Network Drive Configuration\nWND Configuration Quick Guide\nFile Management\nFile Tagging\nFile Lifecycle Management\nFirewall\nFile Firewall\nInstallation\nInstalling & Upgrading ownCloud Enterprise Edition\nOracle DB Setup & Configuration\nLogging\nAuditing\nReporting\nMetrics\nGenerate a Config Report\nSecurity\nRansomware Protection\nUser Management\nShibboleth Integration\nSAML 2.0 Based SSO\nTroubleshooting\nGeneral Troubleshooting\nPath and Filename Length Limitations\nRetrieve Log Files and Configuration Settings\nRemove Non-Existent Background Jobs\nFound a Mistake? Developer Manual\nIntroduction\nGeneral Contributor Guidelines\nCommunity Code of Conduct\nCoding Style & General Guidelines\nDebugging\nPerformance Considerations\nSecurity Guidelines\nBackporting\nHelp and Communication\nDeveloping ownCloud Core\nIntroduction\nSetup Your Development Environment\nApplication Configuration\nTheming\nTranslation\nCode Standards Compliance\nTesting\nownCloud Test Pilots\nDrone Testing\nUnit Testing\nAcceptance Tests\nUser Interface Testing\nAvailable APIs\nThe External API\nThe Provisioning API\nOCS\nThe OCS Notifications API (v1)\nThe OCS REST API\nThe OCS Recipient API\nThe OCS Share API\nThe OCS TOTP Validation API\nThe OCS User Sync API\nNotify Public Link By Email\nThe Roles API\nWebDAV APIs\nThe Comments API\nThe Custom Groups Management API\nThe Files Versions API\nThe Meta API\nThe Search API\nThe Tags API\nThe Trash Bin API\nThe Public Files API\nApplication Development\nFundamental Concepts\nApplication Metadata\nThe Classloader\nConfiguration\nRouting\nControllers\nTemplates\nJavaScript\nCSS\nMiddleware\nDatabase Connectivity\nBackground Jobs\nLogging\nTesting\nThe DI Container\nFilesystem\nRESTful API\nHooks\nPublishing in the ownCloud Marketplace\nChangelog\nMarket App\nAdvanced Concepts\nCustom Filesystem Caches\nCustom Storage Backends\nNotifications\nStorage Backends\nExternal Storage Backends\nTranslation\nTwo-Factor Providers\nUser Management\nCode Signing\nTutorial\nMinimum Requirements\nThe Request Life Cycle\nThe Core Application Files\nRoutes and Controllers\nDatabase Connectivity\nCreate Template Content\nCreate a Navigation Menu\nAdd JavaScript and CSS\nWiring it Up\nApply the Finishing Touches\nAdd a RESTful API\nWriting Tests\nMobile Development\nAndroid\nLibrary Installation\nExamples\niOS\nLibrary Installation\nExamples\nBugtracker\nCode Reviews\nBug Triaging\nFound a Mistake? ownCloud Server UI\nIntroduction\nThe WebUI\nWeb Interface\nNavigating the WebUI\nPersonal Settings\nGeneral\nStorage\nSharing\nSecurity\nCustom Groups\nFiles\nAccess WebDAV\nSharing Files\nSearch & Full Text Search\nTagging Files\nComments\nVersion Control\nEncrypting Files\nManaging Deleted Files\nLarge File Uploads\nManual File Locking\nFile Lifecycle Management\nPublic Link Shares\nFederated Cloud Sharing\nManaging Connected Browsers and Devices\nOnline Collaboration\nStorage Quotas\nExternal Storage\nConnecting to SharePoint\nDesktop Mobile Sync\nApps\nActivity\nCalendar\nContacts\nMarket\nMedia Viewer App\nIntegration\nMicrosoft Teams\nSynchronization Clients\nSync iOS\nSync KDE\nSync OSX\nSync Thunderbird\nTroubleshooting\nFound a Mistake? Library Installation\niOS\nAbout ownCloud\nThe Secure Collaboration Platform\nNews\nPrivacy statement\nImprint\nResources\nFAQ\nHelp\nSecurity\nChangelog\nGet started\nInteract\nRocket.Chat\nForum\nContribute\nCustomer support\n© Copyright 2011-2025, The ownCloud developers."
        },
        {
            "cluster": 1,
            "chunk_content": "ownCloud Server\n10.15\nDesktop App\nnext\n5.3\n5.2\nInfinite Scale Documentation\nnext\n7.1\n7.0\nMobile App for Android\nnext\n4.5\n4.4\nMobile App for iOS\nnext\n12.4\n12.3\nownCloud Main Page\nownCloud Server\nnext\n10.15\n10.14\nownCloud Web User Interfaces\nnext\nownCloud Server\nDeveloper Manual\nMobile Development\nAndroid\nExamples\nnext\n10.15\n10.14\nEdit this Page\nExamples\nInit the library\nStart using the library; it is needed to init the object mClient that\nwill be in charge of keeping the communication with the server. Code example\npublic class MainActivity extends Activity\nimplements  OnRemoteOperationListener,\nOnDatatransferProgressListener {\nprivate OwnCloudClient mClient;\nprivate Handler mHandler = new Handler();\n...\npublic void onCreate(Bundle savedInstanceState) {\n...\n// Parse URI to the base URL of the ownCloud server\nUri serverUri = Uri.parse(getString(R.string.server_base_url));\n// Create client object to perform remote operations\nmClient = OwnCloudClientFactory.createOwnCloudClient(\nserverUri,\nthis,\n// Activity or Service context\ntrue);\nSet credentials\nAuthentication on the app is possible by 3 different methods:\nBasic authentication, user name and password\nBearer access token (oAuth2)\nCookie (SAML-based single-sign-on)\nCode example\npackage com.owncloud.android.lib.common;\npublic class OwnCloudClient extends HttpClient {\n...\n// Set basic credentials\nclient.setCredentials(\nOwnCloudCredentialsFactory.newBasicCredentials(username, password)\n);\n// Set bearer access token\nclient.setCredentials(\nOwnCloudCredentialsFactory.newBearerCredentials(accessToken)\n);\n// Set SAML2 session token\nclient.setCredentials(\nOwnCloudCredentialsFactory.newSamlSsoCredentials(cookie)\n);\n}\nCreate a folder\nCreate a new folder on the cloud server, the info needed to be sent is\nthe path of the new folder. The info needed is filePath, path of the file/folder on\nthe server, the Boolean variable, getReshares, come from the Sharing\napi, from the moment it is not in use within the ownCloud Android\nlibrary. The info needed is filePath, the path of the item that you want to share\nand Password, this comes from the Sharing api, from the moment it is not\nin use within the ownCloud Android library."
        },
        {
            "cluster": 0,
            "chunk_content": "Code example\nprivate void startFolderCreation(String newFolderPath) {\nCreateRemoteFolderOperation createOperation = new CreateRemoteFolderOperation(newFolderPath, false);\ncreateOperation.execute( mClient , this , mHandler);\n}\n@Override\npublic void onRemoteOperationFinish(RemoteOperation operation, RemoteOperationResult result) {\nif (operation instanceof CreateRemoteFolderOperation) {\nif (result.isSuccess()) {\n// do your stuff here\n}\n}\n…\n}\nRead folder\nGet the content of an existing folder on the cloud server, the info\nneeded to be sent is the path of the folder, in the example shown it has\nbeen asked the content of the root folder. Code example\nprivate void startReadRootFolder() {\nReadRemoteFolderOperation refreshOperation = new ReadRemoteFolderOperation(FileUtils.PATH_SEPARATOR);\n// root folder\nrefreshOperation.execute(mClient, this, mHandler);\n}\n@Override\npublic void onRemoteOperationFinish(RemoteOperation operation, RemoteOperationResult result) {\nif (operation instanceof ReadRemoteFolderOperation) {\nif (result.isSuccess()) {\nList< RemoteFile > files = result.getData();\n// do your stuff here\n}\n}\n…\n}\nRead file\nGet information related to a certain file or folder, information\nobtained is:\nfilePath\n,\nfilename\n,\nisDirectory\n,\nsize\nand\ndate\n. Code example\nprivate void startReadFileProperties(String filePath) {\nReadRemoteFileOperation readOperation = new ReadRemoteFileOperation(filePath);\nreadOperation.execute(mClient, this, mHandler);\n}\n@Override\npublic void onRemoteOperationFinish(RemoteOperation operation, RemoteOperationResult result) {\nif (operation instanceof ReadRemoteFileOperation) {\nif (result.isSuccess()) {\nRemoteFile file = result.getData()[0];\n// do your stuff here\n}\n}\n…\n}\nDelete file or folder\nDelete a file or folder on the cloud server. Code example\nprivate void startRemoveFile(String filePath) {\nRemoveRemoteFileOperation removeOperation = new RemoveRemoteFileOperation(remotePath);\nremoveOperation.execute( mClient , this , mHandler);\n}\n@Override\npublic void onRemoteOperationFinish(RemoteOperation operation, RemoteOperationResult result) {\nif (operation instanceof RemoveRemoteFileOperation) {\nif (result.isSuccess()) {\n// do your stuff here\n}\n}\n…\n}\nDownload a file\nDownload an existing file on the cloud server. Code example\nprivate void startDownload(String filePath, File targetDirectory) {\nDownloadRemoteFileOperation downloadOperation = new DownloadRemoteFileOperation(filePath, targetDirectory.getAbsolutePath());\ndownloadOperation.addDatatransferProgressListener(this);\ndownloadOperation.execute( mClient, this, mHandler);\n}\n@Override\npublic void onRemoteOperationFinish( RemoteOperation operation, RemoteOperationResult result) {\nif (operation instanceof DownloadRemoteFileOperation) {\nif (result.isSuccess()) {\n// do your stuff here\n}\n}\n}\n@Override\npublic void onTransferProgress( long progressRate, long totalTransferredSoFar, long totalToTransfer, String fileName) {\nmHandler.post( new Runnable() {\n@Override\npublic void run() {\n// do your UI updates about progress here\n}\n});\n}\nUpload a file\nUpload a new file to the cloud server. Code example\nprivate void startUpload (File fileToUpload, String remotePath, String mimeType) {\nUploadRemoteFileOperation uploadOperation = new UploadRemoteFileOperation( fileToUpload.getAbsolutePath(), remotePath, mimeType);\nuploadOperation.addDatatransferProgressListener(this);\nuploadOperation.execute(mClient, this, mHandler);\n}\n@Override\npublic void onRemoteOperationFinish(RemoteOperation operation, RemoteOperationResult result) {\nif (operation instanceof UploadRemoteFileOperation) {\nif (result.isSuccess()) {\n// do your stuff here\n}\n}\n}\n@Override\npublic void onTransferProgress(long progressRate, long totalTransferredSoFar, long totalToTransfer, String fileName) {\nmHandler.post( new Runnable() {\n@Override\npublic void run() {\n// do your UI updates about progress here\n}\n});\n}\nMove a file or folder\nMove an existing file or folder to a different location in the ownCloud\nserver. Code example\nprivate void startFileMove(String filePath, String newFilePath, boolean overwrite) {\nMoveRemoteFileOperation moveOperation = new MoveRemoteFileOperation(filePath, newFilePath, overwrite);\nmoveOperation.execute( mClient , this , mHandler);\n}\n@Override\npublic void onRemoteOperationFinish(RemoteOperation operation, RemoteOperationResult result) {\nif (operation instanceof MoveRemoteFileOperation) {\nif (result.isSuccess()) {\n// do your stuff here\n}\n}\n…\n}\nRead shared items by link\nGet information about what files and folder are shared by link (the\nobject mClient contains the information about the server url and\naccount)\nCode example\nprivate void startAllSharesRetrieval() {\nGetRemoteSharesOperation getSharesOp = new GetRemoteSharesOperation();\ngetSharesOp.execute( mClient , this , mHandler);\n}\n@Override\npublic void onRemoteOperationFinish( RemoteOperation operation, RemoteOperationResult result) {\nif (operation instanceof GetRemoteSharesOperation) {\nif (result.isSuccess()) {\nArrayList< OCShare > shares = new ArrayList< OCShare >();\nfor (Object obj: result.getData()) {\nshares.add(( OCShare) obj);\n}\n// do your stuff here\n}\n}\n}\nGet the share resources for a given file or folder\nGet information about what files and folder are shared by link on a\ncertain folder. Code example\nprivate void startSharesRetrievalForFileOrFolder(String filePath, boolean getReshares) {\nGeteRemoteSharesForFileOperation operation = new GetRemoteSharesForFileOperation(filePath, getReshares, false);\noperation.execute( mClient, this, mHandler);\n}\nprivate void startSharesRetrievalForFilesInFolder(String folderPath, boolean getReshares) {\nGetRemoteSharesForFileOperation operation = new GetRemoteSharesForFileOperation(folderPath, getReshares, true);\noperation.execute( mClient, this, mHandler);\n}\n@Override\npublic void onRemoteOperationFinish( RemoteOperation operation, RemoteOperationResult result) {\nif (operation instanceof GetRemoteSharesForFileOperation) {\nif (result.isSuccess()) {\nArrayList< OCShare > shares = new ArrayList< OCShare >();\nfor (Object obj: result.getData()) {\nshares.add(( OCShare) obj);\n}\n// do your stuff here\n}\n}\n}\nShare link of file or folder\nShare a file or a folder from your cloud server by link. Code example\nprivate void startCreationOfPublicShareForFile(String filePath, String password) {\nCreateRemoteShareOperation operation = new CreateRemoteShareOperation(filePath, ShareType.PUBLIC_LINK, \"\", false, password, 1);\noperation.execute( mClient , this , mHandler);\n}\nprivate void startCreationOfGroupShareForFile(String filePath, String groupId) {\nCreateRemoteShareOperation operation = new CreateRemoteShareOperation(filePath, ShareType.GROUP, groupId, false , \"\", 31);\noperation.execute(mClient, this, mHandler);\n}\nprivate void startCreationOfUserShareForFile(String filePath, String userId) {\nCreateRemoteShareOperation operation = new CreateRemoteShareOperation(filePath, ShareType.USER, userId, false, \"\", 31);\noperation.execute(mClient, this, mHandler);\n}\n@Override\npublic void onRemoteOperationFinish( RemoteOperation operation, RemoteOperationResult result) {\nif (operation instanceof CreateRemoteShareOperation) {\nif (result.isSuccess()) {\nOCShare share = (OCShare) result.getData ().get(0);\n// do your stuff here\n}\n}\n}\nDelete a share resource\nStop sharing by link a file or a folder from your cloud server. The info needed is the object OCShare that you want to stop sharing by\nlink. Code example\nprivate void startShareRemoval(OCShare share) {\nRemoveRemoteShareOperation operation = new RemoveRemoteShareOperation((int) share.getIdRemoteShared());\noperation.execute( mClient, this, mHandler);\n}\n@Override\npublic void onRemoteOperationFinish( RemoteOperation operation, RemoteOperationResult result) {\nif (operation instanceof RemoveRemoteShareOperation) {\nif (result.isSuccess()) {\n// do your stuff here\n}\n}\n}\nTips\nCredentials must be set before calling any method\nPaths must not be on URL Encoding\nCorrect path:\nhttps://example.com/owncloud/remote.php/dav/PopMusic\nWrong path:\nhttps://example.com/owncloud/remote.php/dav/Pop%20Music/\nThere are some forbidden characters to be used in folder and files names on the server, same on the ownCloud Android Library:\n/\n,\n<\n,\n>\n,\n:\n,\n\"\n,\n\\`\n,\n? Upload and download actions may be cancelled thanks to the objects\nuploadOperation.cancel()\n,\ndownloadOperation.cancel()\nUnit tests, before launching unit tests you have to enter your account information (server url, user and password) on\nTestActivity.java\n."
        },
        {
            "cluster": 2,
            "chunk_content": "As answer of this method, it\nwill be received an array with all the files and folders stored in the\nselected folder. The info needed is the path\nof folder/file to be deleted. The info needed is path\nof the file on the server and targetDirectory, path where the file will\nbe stored on the device. The info needed is fileToUpload,\npath where the file is stored on the device, remotePath, path where the\nfile will be stored on the server and mimeType."
        },
        {
            "cluster": 4,
            "chunk_content": "Parameters needed are the path to the file or folder to move,\nand the new path desired for it. The parent folder of the new path must\nexist in the server. When the parameter `overwrite' is set to `true', the file or folder is\nmoved even if the new path is already used by a different file or\nfolder. This one will be replaced by the former."
        }
    ]
}