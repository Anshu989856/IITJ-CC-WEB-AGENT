{
    "file_name": "server_admin_manual_configuration_files_big_file_upload_configuration.html",
    "file_path": "./owncloud_docs\\server_admin_manual_configuration_files_big_file_upload_configuration.html",
    "chunks": [
        {
            "cluster": 0,
            "chunk_content": "Documentation for ownCloud (A Kiteworks Company)\nownCloud Server\nIntroduction\nAdmin Manual\nIntroduction\nUseful Pages\nFAQ\nGDPR\nInstallation\nDeployment Considerations\nDeployment Recommendations\nNFS\nSystem Requirements\nConfiguration Notes and Tips\nInstallation Options\nInstalling With Docker\nManual Installation on Linux\nDetailed Installation Guide\nDetailed Installation on Ubuntu (various versions)\nQuick Installation Guide\nOn Ubuntu 20.04\nOn Ubuntu 22.04\nLinux Package Manager\nLinux Package Manager Installation\nThe Installation Wizard\nTroubleshooting\nChanging Your ownCloud URL\nInstalling and Managing Apps\nSupported Apps\nMedia Viewer\nSELinux Configuration\nUsing Let’s Encrypt SSL Certificates\nUsing Letsencrypt\nApache\nConfiguration\nDatabase\nDatabase Conversion\nDatabase Configuration\nEncryption\nEncryption Configuration\nEncryption Configuration Quick Guide\nExternal Storage\nExternal Storage Configuration\nExternal Storage Authentication Mechanisms\nAmazonS3\nDropbox\nFTP\nGoogle\nLocal\nownCloud\nS3 as Primary\nSFTP\nSMB\nWebDAV\nFiles and Sharing\nBig File Upload Configuration\nManual File Locking\nDefault Files Configuration\nFederated Cloud Sharing Configuration\nFile Sharing Configuration\nFile Versioning\nTransactional File Locking\nPreview Configuration\nMimetypes\nManaging the Trashbin\nIntegration\nMicrosoft Teams\nownCloud App for Splunk\nGeneral Topics\nCode Signing\nImpersonate Users\nFull Text Search\nServer\nActivity Configuration\nBackground Jobs Configuration\nCaching Configuration\nConfig Sample PHP Parameters\nConfig Apps Sample PHP Parameters\nCustom Client Repos\nEmail Configuration\nExcluded Blacklisted Files\nExternal Sites\nHarden Server\nImport SSL Cert\nIndex PHP Less URLs\nOCC Command\nLanguage Configuration\nLegal Settings Configuration\nLogging\nLogging Configuration\nRequest Tracing\nReverse Proxy Configuration\nSecurity\nBrute-Force Protection\nOAuth2\nPassword policy\nSecurity Setup Warnings\nThe HSM (Hardware Security Module) Daemon\nDependency Notes\nServer Tuning\nThird Party PHP Configuration\nVirus Scanner Support\nUI Configuration\nUser\nUser Management\nUser Roles\nReset Admin Password\nReset User Password\nUser Auth FTP SMB IMAP\nUser Auth LDAP\nUser Auth Two-Factor\nUser Auth OAuth2\nUser Provisioning API\nCustom Groups App\nGuests App\nOpenID Connect (OIDC)\nLogin Policies\nMaintenance\nUpgrading\nManual Upgrade\nDatabase Upgrade\nUpgrading from Package\nUsing the Updater App\nUpgrading PHP\nMarketplace Apps\nBackup and Restore\nBackup\nRestore\nMaintenance Mode\nExport and Import Instance Data\nManually Moving Data Folders\nEncryption\nMigrating from User Key to Master Key Encryption\nMigrating to a Different Server\nMigrating to Kiteworks PCN\nEnterprise\nAuthentication\nEnterprise Only Authentication\nKerberos Authentication\nClients\nCustom Client Repos\nCollaboration\nCollabora Online / Secure View\nMicrosoft Office Online / WOPI Integration\nDocument Classification\nClassify Documents and Enforce Policies\nExternal Storage\nLDAP Home Connector Configuration\nSharepoint integration Configuration\nWindows Network Drive Configuration\nWND Configuration Quick Guide\nFile Management\nFile Tagging\nFile Lifecycle Management\nFirewall\nFile Firewall\nInstallation\nInstalling & Upgrading ownCloud Enterprise Edition\nOracle DB Setup & Configuration\nLogging\nAuditing\nReporting\nMetrics\nGenerate a Config Report\nSecurity\nRansomware Protection\nUser Management\nShibboleth Integration\nSAML 2.0 Based SSO\nTroubleshooting\nGeneral Troubleshooting\nPath and Filename Length Limitations\nRetrieve Log Files and Configuration Settings\nRemove Non-Existent Background Jobs\nFound a Mistake? ownCloud Server UI\nIntroduction\nThe WebUI\nWeb Interface\nNavigating the WebUI\nPersonal Settings\nGeneral\nStorage\nSharing\nSecurity\nCustom Groups\nFiles\nAccess WebDAV\nSharing Files\nSearch & Full Text Search\nTagging Files\nComments\nVersion Control\nEncrypting Files\nManaging Deleted Files\nLarge File Uploads\nManual File Locking\nFile Lifecycle Management\nPublic Link Shares\nFederated Cloud Sharing\nManaging Connected Browsers and Devices\nOnline Collaboration\nStorage Quotas\nExternal Storage\nConnecting to SharePoint\nDesktop Mobile Sync\nApps\nActivity\nCalendar\nContacts\nMarket\nMedia Viewer App\nIntegration\nMicrosoft Teams\nSynchronization Clients\nSync iOS\nSync KDE\nSync OSX\nSync Thunderbird\nTroubleshooting\nFound a Mistake? ownCloud Server\n10.15\nDesktop App\nnext\n5.3\n5.2\nInfinite Scale Documentation\nnext\n7.1\n7.0\nMobile App for Android\nnext\n4.5\n4.4\nMobile App for iOS\nnext\n12.4\n12.3\nownCloud Main Page\nownCloud Server\nnext\n10.15\n10.14\nownCloud Web User Interfaces\nnext\nownCloud Server\nAdmin Manual\nConfiguration\nFiles and Sharing\nBig File Upload Configuration\nnext\n10.15\n10.14\nEdit this Page\nBig File Upload Configuration\nTable of Contents\nIntroduction\nGeneral Considerations\nConfiguration via .htaccess/user.ini\nConfiguring via PHP Global Settings\nConfiguring via a Virtual Host\nConfiguring via ownCloud\nGeneral Upload Issues\nApache Directives\nApache with mod_reqtimeout\nApache with mod_fcgid\nImportant Changes in Apache 2.4.54\nLong-Running Uploads\nIntroduction\nIf you’re expecting big file uploads, some considerations have to be taken into account. General Considerations\nMake sure that a version of PHP\nsupported by ownCloud\nis installed. Though ownCloud already disables the PHP setting\nOutput Buffering\nin the shipped\n.htaccess\nand\n.user.ini\nto prevent PHP memory-related errors, it can be the case that you must manually set it in your\nphp.ini\nor\nVirtualHosts\nwhen the other two configuration files can’t be used in your environment. Configuration via .htaccess/user.ini\nownCloud comes with its own\nowncloud/.htaccess\nfile. Set the following parameters inside the corresponding file using your own desired values, as in the following examples, both files are located in the ownCloud root folder:\n.user.ini\npost_max_size=16G\noutput_buffering=0\nupload_max_filesize=16G\nupload_tmp_dir=/mnt/php_big_temp/\n.htaccess\nphp_value\tpost_max_size=16G\nphp_value\toutput_buffering=0\nphp_value\tupload_max_filesize=16G\nphp_value\tupload_tmp_dir=/mnt/php_big_temp/\nIf you see PHP timeouts in your log files, increase the timeout values, which are in seconds, as in the example below. Use the\nphp_value\nprefix like above when configuring the\n.htaccess\nfile:\nmax_input_time=3600\nmax_execution_time=3600\nConsider that any settings made in\n.htaccess\nor\n.user.ini\nmay need to be repopulated after an upgrade of ownCloud. Configuring via PHP Global Settings\nIf you don’t want to use the ownCloud\n.htaccess\nor\n.user.ini\nfile, you may configure PHP globally instead. If you are running ownCloud on a 32-bit system, any\nopen_basedir\ndirective in your\nphp.ini\nfile needs to be commented out. <VirtualHost *:443>\nDocumentRoot /var/www/owncloud\nServerName myowncloud.com\nphp_admin_value\tpost_max_size 16G\nphp_admin_value\toutput_buffering 0\nphp_admin_value\tupload_max_filesize 16G\nphp_admin_value\tupload_tmp_dir /mnt/php_big_temp/\n... If you see PHP timeouts in your log files, increase the timeout values, which are in seconds, as in the example below:\nphp_admin_value max_input_time 3600\nphp_admin_value max_execution_time 3600\nConfiguring via ownCloud\nAs an alternative to the\nupload_tmp_dir\nof PHP (e.g., if you don’t have access to your\nphp.ini\n) you can also configure some parameters in\nconfig.php\n. Files and Sharing\nManual File Locking\nAbout ownCloud\nThe Secure Collaboration Platform\nNews\nPrivacy statement\nImprint\nResources\nFAQ\nHelp\nSecurity\nChangelog\nGet started\nInteract\nRocket.Chat\nForum\nContribute\nCustomer support\n© Copyright 2011-2025, The ownCloud developers."
        },
        {
            "cluster": 3,
            "chunk_content": "Developer Manual\nIntroduction\nGeneral Contributor Guidelines\nCommunity Code of Conduct\nCoding Style & General Guidelines\nDebugging\nPerformance Considerations\nSecurity Guidelines\nBackporting\nHelp and Communication\nDeveloping ownCloud Core\nIntroduction\nSetup Your Development Environment\nApplication Configuration\nTheming\nTranslation\nCode Standards Compliance\nTesting\nownCloud Test Pilots\nDrone Testing\nUnit Testing\nAcceptance Tests\nUser Interface Testing\nAvailable APIs\nThe External API\nThe Provisioning API\nOCS\nThe OCS Notifications API (v1)\nThe OCS REST API\nThe OCS Recipient API\nThe OCS Share API\nThe OCS TOTP Validation API\nThe OCS User Sync API\nNotify Public Link By Email\nThe Roles API\nWebDAV APIs\nThe Comments API\nThe Custom Groups Management API\nThe Files Versions API\nThe Meta API\nThe Search API\nThe Tags API\nThe Trash Bin API\nThe Public Files API\nApplication Development\nFundamental Concepts\nApplication Metadata\nThe Classloader\nConfiguration\nRouting\nControllers\nTemplates\nJavaScript\nCSS\nMiddleware\nDatabase Connectivity\nBackground Jobs\nLogging\nTesting\nThe DI Container\nFilesystem\nRESTful API\nHooks\nPublishing in the ownCloud Marketplace\nChangelog\nMarket App\nAdvanced Concepts\nCustom Filesystem Caches\nCustom Storage Backends\nNotifications\nStorage Backends\nExternal Storage Backends\nTranslation\nTwo-Factor Providers\nUser Management\nCode Signing\nTutorial\nMinimum Requirements\nThe Request Life Cycle\nThe Core Application Files\nRoutes and Controllers\nDatabase Connectivity\nCreate Template Content\nCreate a Navigation Menu\nAdd JavaScript and CSS\nWiring it Up\nApply the Finishing Touches\nAdd a RESTful API\nWriting Tests\nMobile Development\nAndroid\nLibrary Installation\nExamples\niOS\nLibrary Installation\nExamples\nBugtracker\nCode Reviews\nBug Triaging\nFound a Mistake? Setups based on your needs can be configured. In Centos and RHEL, Apache has a few more default configurations within systemd. You will have to set the\ntemp\ndirectory in two places:\nIn php.ini, e.g.,\nsys_temp_dir = \"/scratch/tmp\"\nIn Apache systemd file e.g. sudo systemctl edit httpd\nand change/add:\nPrivateTmp=false\nWhen done, you need to reload the daemon and restart the service:\nsudo systemctl daemon-reload\nsudo systemctl restart httpd\nPlease\ndo not\nchange\n/usr/lib/systemd/system/httpd.service\ndirectly, only use\nsudo systemctl edit httpd\n. If not doing so, a httpd package upgrade may revert your changes. When using\nphp-fpm\n, PHP settings in\n.htaccess\nare not accessed. These settings must then be set in the\n.user.ini\nfile. php-fpm\nwill read settings from any .user.ini file in the same directory as the .php file that is being served via a web server. Make sure to comment out or remove any lines in\n.htaccess\nif you added any like in the section above. See the\nLoaded Configuration File\nsection of\nPHP Version and Information\nto find your relevant php.ini files. This eliminates the need to maintain custom settings in a\n.user.ini\nor\n.htaccess\nfile especially on upgrades. Note the mandatory prefix\nphp_admin_value\nbefore the php parameter. If you have configured the\nsession_lifetime\nsetting in your\nconfig.php\n,\nsee\nSample Config PHP Parameters\n, make sure it is not too low. If unsure, remove this entirely from your configuration to reset it to the default shown in the\nconfig.sample.php\n. Other web server modules like described in\nGeneral Troubleshooting\n. Disable mod_reqtimeout on Ubuntu\nOn Ubuntu, you can disable the module by running the following command:\nsudo a2dismod reqtimeout\nDisable mod_reqtimeout on CentOS\nOn CentOS, comment out the following line in\n/etc/httpd/conf/httpd.conf\n:\nLoadModule reqtimeout_module modules/mod_reqtimeout.so\nWhen you have run\nasdismod\nor updated\n/etc/httpd/conf/httpd.conf\n, restart Apache. This is not a regular setting but serves as a workaround for\nApache with mod_fcgid bug #51747\n. Setting\nFcgidMaxRequestInMem\nsignificantly higher than usual may no longer be necessary, once bug #51747 is fixed."
        },
        {
            "cluster": 1,
            "chunk_content": "Consider that user quotas may prevent big file uploads due to a user reaching the space limitation. The directory used for\nupload_tmp_dir\nmust be fully accessible by PHP / the webserver user, usually\nwww-data\n. Your temp directory or partition has to be big enough to hold multiple parallel uploads from multiple users. The formula for this is\ntemp_space = concurrent_uploads * chunk size\nFor example, if the chunk size is\n10MB\n(which is the default but might vary between different clients) and the average number of users uploading at the same time is\n25\n, then you’ll need 250MB of temp space, as the formula below shows. 10MB x 25 users = 250MB required temp space\nThe user’s upload directory, usually in\n<datadirectory>/<username>/uploads\n(see\nSample Config PHP Parameters\nfor details) also has to be big enough. The formula is a bit different, as this directory collects all chunks of a file for that upload for that user until the upload is completed. The space needed for this directory is temporarily the same size as for the final file size. As an example, if a user wants to upload a 4GB file, temporarily 4GB of space needs to be available in the upload directory to hold the chunks. When the upload has finished, all chunks are written to the final destination and the chunks are deleted afterwards freeing that temporary space. The formula for the upload directory’s temp space for all users is:\ntemp_space = concurrent_uploads * average_upload_size_per_user\n. The location of the upload directory can be defined via the config setting\ndav.chunk_base_dir\n. The space temporarily consumed in the upload directory will not count against the user quota. If a user has no quota left in his peronal storage and the quota excludes external mounts, uploads to a windows network drive share as example will succeed. The file temporarily created in the upload directory will not count against his personal storage. Set a temporary location for uploaded files by using the\ntempdirectory\nsetting."
        },
        {
            "cluster": 2,
            "chunk_content": "Set the following parameters inside the corresponding php.ini file using your own desired file size values, as in the following example:\npost_max_size=16G\noutput_buffering=0\nupload_max_filesize=16G\nupload_tmp_dir=/mnt/php_big_temp/\nIf you see PHP timeouts in your log files, increase the timeout values, which are in seconds, as in the example below:\nmax_input_time=3600\nmax_execution_time=3600\nConfiguring via a Virtual Host\nYou can configure php parameters also per virtual host - if you have access to the Apache configuration file. This setting needs to be configured to at least the time (in seconds) that the longest upload will take. General Upload Issues\nVarious environmental factors could cause a restriction of the upload size. Examples are:\nThe\nLVE Manager\nof\nCloudLinux\nwhich sets an\nI/O limit\n. Some services like\nCloudflare\nare also known to cause uploading issues. Upload limits enforced by proxies used by your clients. Apache Directives\nLimitRequestBody\nSSLRenegBufferSize\nApache with mod_reqtimeout\nThe\nmod_reqtimeout\nApache module could also stop large uploads from completing. If you’re using this module and uploads of large files fail, either disable it in your Apache config or increase the configured\nRequestReadTimeout\nvalues. There are also several other configuration options in your web server config which could prevent the upload of larger files. Refer to your web server’s manual for how to configure those values correctly:\nApache with mod_fcgid\nFcgidMaxRequestInMem\nFcgidMaxRequestLen\nIf you are using Apache 2.4 with mod_fcgid, as of February/March 2016,\nFcgidMaxRequestInMem\nstill needs to be significantly increased from its default value to avoid the occurrence of segmentation faults when uploading big files. Important Changes in Apache 2.4.54\nIn Apache HTTP Server 2.4.53 and earlier, the default value of the\nLimitRequestBody\ndirective was 0 (unlimited). This has changed starting with Apache HTTP Server 2.4.54 where the default value is set to 1073741824 bytes (1 GB). This means, that uploads to public folders when chunking is not in effect will be limited to this file size. Change this value according to your needs in order to allow large file uploads. Please refer to the official Apache documentation\nLimitRequestBody\nfor more information. Long-Running Uploads\nFor very long-running uploads\nthose lasting longer than 1h\nto public folders,\nwhen chunking is not in effect\n,\nfilelocking.ttl\nshould be set to a significantly large value in\nconfig.php\n. If not, large file uploads will fail with a file locking error, because the Redis garbage collection will delete the initially acquired file lock after 1 hour by default."
        },
        {
            "cluster": 4,
            "chunk_content": "To estimate a good value, use the following formula:\ntime_in_seconds = (maximum_upload_file_size / slowest_assumed_upload_connection). For the value of \"\nslowest assumed upload connection\n\", take the\nupload\nspeed of the user with the slowest connection and divide it by two. For example, let’s assume that the user with the slowest connection has an 8MBit/s DSL connection; which usually indicates the download speed. This type of connection would, usually, have 1MBit/s upload speed (but confirm with the ISP). Divide this value in half, to have a buffer when there is network congestion, to arrive at 512KBit/s as the final value."
        }
    ]
}