{
    "file_name": "server_admin_manual_configuration_files_mimetypes.html",
    "file_path": "./owncloud_docs\\server_admin_manual_configuration_files_mimetypes.html",
    "chunks": [
        {
            "cluster": 4,
            "chunk_content": "Documentation for ownCloud (A Kiteworks Company)\nownCloud Server\nIntroduction\nAdmin Manual\nIntroduction\nUseful Pages\nFAQ\nGDPR\nInstallation\nDeployment Considerations\nDeployment Recommendations\nNFS\nSystem Requirements\nConfiguration Notes and Tips\nInstallation Options\nInstalling With Docker\nManual Installation on Linux\nDetailed Installation Guide\nDetailed Installation on Ubuntu (various versions)\nQuick Installation Guide\nOn Ubuntu 20.04\nOn Ubuntu 22.04\nLinux Package Manager\nLinux Package Manager Installation\nThe Installation Wizard\nTroubleshooting\nChanging Your ownCloud URL\nInstalling and Managing Apps\nSupported Apps\nMedia Viewer\nSELinux Configuration\nUsing Let’s Encrypt SSL Certificates\nUsing Letsencrypt\nApache\nConfiguration\nDatabase\nDatabase Conversion\nDatabase Configuration\nEncryption\nEncryption Configuration\nEncryption Configuration Quick Guide\nExternal Storage\nExternal Storage Configuration\nExternal Storage Authentication Mechanisms\nAmazonS3\nDropbox\nFTP\nGoogle\nLocal\nownCloud\nS3 as Primary\nSFTP\nSMB\nWebDAV\nFiles and Sharing\nBig File Upload Configuration\nManual File Locking\nDefault Files Configuration\nFederated Cloud Sharing Configuration\nFile Sharing Configuration\nFile Versioning\nTransactional File Locking\nPreview Configuration\nMimetypes\nManaging the Trashbin\nIntegration\nMicrosoft Teams\nownCloud App for Splunk\nGeneral Topics\nCode Signing\nImpersonate Users\nFull Text Search\nServer\nActivity Configuration\nBackground Jobs Configuration\nCaching Configuration\nConfig Sample PHP Parameters\nConfig Apps Sample PHP Parameters\nCustom Client Repos\nEmail Configuration\nExcluded Blacklisted Files\nExternal Sites\nHarden Server\nImport SSL Cert\nIndex PHP Less URLs\nOCC Command\nLanguage Configuration\nLegal Settings Configuration\nLogging\nLogging Configuration\nRequest Tracing\nReverse Proxy Configuration\nSecurity\nBrute-Force Protection\nOAuth2\nPassword policy\nSecurity Setup Warnings\nThe HSM (Hardware Security Module) Daemon\nDependency Notes\nServer Tuning\nThird Party PHP Configuration\nVirus Scanner Support\nUI Configuration\nUser\nUser Management\nUser Roles\nReset Admin Password\nReset User Password\nUser Auth FTP SMB IMAP\nUser Auth LDAP\nUser Auth Two-Factor\nUser Auth OAuth2\nUser Provisioning API\nCustom Groups App\nGuests App\nOpenID Connect (OIDC)\nLogin Policies\nMaintenance\nUpgrading\nManual Upgrade\nDatabase Upgrade\nUpgrading from Package\nUsing the Updater App\nUpgrading PHP\nMarketplace Apps\nBackup and Restore\nBackup\nRestore\nMaintenance Mode\nExport and Import Instance Data\nManually Moving Data Folders\nEncryption\nMigrating from User Key to Master Key Encryption\nMigrating to a Different Server\nMigrating to Kiteworks PCN\nEnterprise\nAuthentication\nEnterprise Only Authentication\nKerberos Authentication\nClients\nCustom Client Repos\nCollaboration\nCollabora Online / Secure View\nMicrosoft Office Online / WOPI Integration\nDocument Classification\nClassify Documents and Enforce Policies\nExternal Storage\nLDAP Home Connector Configuration\nSharepoint integration Configuration\nWindows Network Drive Configuration\nWND Configuration Quick Guide\nFile Management\nFile Tagging\nFile Lifecycle Management\nFirewall\nFile Firewall\nInstallation\nInstalling & Upgrading ownCloud Enterprise Edition\nOracle DB Setup & Configuration\nLogging\nAuditing\nReporting\nMetrics\nGenerate a Config Report\nSecurity\nRansomware Protection\nUser Management\nShibboleth Integration\nSAML 2.0 Based SSO\nTroubleshooting\nGeneral Troubleshooting\nPath and Filename Length Limitations\nRetrieve Log Files and Configuration Settings\nRemove Non-Existent Background Jobs\nFound a Mistake? Developer Manual\nIntroduction\nGeneral Contributor Guidelines\nCommunity Code of Conduct\nCoding Style & General Guidelines\nDebugging\nPerformance Considerations\nSecurity Guidelines\nBackporting\nHelp and Communication\nDeveloping ownCloud Core\nIntroduction\nSetup Your Development Environment\nApplication Configuration\nTheming\nTranslation\nCode Standards Compliance\nTesting\nownCloud Test Pilots\nDrone Testing\nUnit Testing\nAcceptance Tests\nUser Interface Testing\nAvailable APIs\nThe External API\nThe Provisioning API\nOCS\nThe OCS Notifications API (v1)\nThe OCS REST API\nThe OCS Recipient API\nThe OCS Share API\nThe OCS TOTP Validation API\nThe OCS User Sync API\nNotify Public Link By Email\nThe Roles API\nWebDAV APIs\nThe Comments API\nThe Custom Groups Management API\nThe Files Versions API\nThe Meta API\nThe Search API\nThe Tags API\nThe Trash Bin API\nThe Public Files API\nApplication Development\nFundamental Concepts\nApplication Metadata\nThe Classloader\nConfiguration\nRouting\nControllers\nTemplates\nJavaScript\nCSS\nMiddleware\nDatabase Connectivity\nBackground Jobs\nLogging\nTesting\nThe DI Container\nFilesystem\nRESTful API\nHooks\nPublishing in the ownCloud Marketplace\nChangelog\nMarket App\nAdvanced Concepts\nCustom Filesystem Caches\nCustom Storage Backends\nNotifications\nStorage Backends\nExternal Storage Backends\nTranslation\nTwo-Factor Providers\nUser Management\nCode Signing\nTutorial\nMinimum Requirements\nThe Request Life Cycle\nThe Core Application Files\nRoutes and Controllers\nDatabase Connectivity\nCreate Template Content\nCreate a Navigation Menu\nAdd JavaScript and CSS\nWiring it Up\nApply the Finishing Touches\nAdd a RESTful API\nWriting Tests\nMobile Development\nAndroid\nLibrary Installation\nExamples\niOS\nLibrary Installation\nExamples\nBugtracker\nCode Reviews\nBug Triaging\nFound a Mistake? ownCloud Server UI\nIntroduction\nThe WebUI\nWeb Interface\nNavigating the WebUI\nPersonal Settings\nGeneral\nStorage\nSharing\nSecurity\nCustom Groups\nFiles\nAccess WebDAV\nSharing Files\nSearch & Full Text Search\nTagging Files\nComments\nVersion Control\nEncrypting Files\nManaging Deleted Files\nLarge File Uploads\nManual File Locking\nFile Lifecycle Management\nPublic Link Shares\nFederated Cloud Sharing\nManaging Connected Browsers and Devices\nOnline Collaboration\nStorage Quotas\nExternal Storage\nConnecting to SharePoint\nDesktop Mobile Sync\nApps\nActivity\nCalendar\nContacts\nMarket\nMedia Viewer App\nIntegration\nMicrosoft Teams\nSynchronization Clients\nSync iOS\nSync KDE\nSync OSX\nSync Thunderbird\nTroubleshooting\nFound a Mistake? Preview Configuration\nManaging the Trashbin\nAbout ownCloud\nThe Secure Collaboration Platform\nNews\nPrivacy statement\nImprint\nResources\nFAQ\nHelp\nSecurity\nChangelog\nGet started\nInteract\nRocket.Chat\nForum\nContribute\nCustomer support\n© Copyright 2011-2025, The ownCloud developers."
        },
        {
            "cluster": 2,
            "chunk_content": "ownCloud Server\n10.15\nDesktop App\nnext\n5.3\n5.2\nInfinite Scale Documentation\nnext\n7.1\n7.0\nMobile App for Android\nnext\n4.5\n4.4\nMobile App for iOS\nnext\n12.4\n12.3\nownCloud Main Page\nownCloud Server\nnext\n10.15\n10.14\nownCloud Web User Interfaces\nnext\nownCloud Server\nAdmin Manual\nConfiguration\nFiles and Sharing\nMimetypes\nnext\n10.15\n10.14\nEdit this Page\nMimetypes Management\nTable of Contents\nIntroduction\nMimetype Aliases\nChanging Existing Icons and Using Custom Icons\nExample - Changing the JSON File Icon\nMimetype Mapping\nIcon retrieval\nIntroduction\nownCloud allows you to create aliases for mimetypes and map file extensions to a mimetype. These allow administrators the ability to change the existing icons that ownCloud uses to represent certain file types and folders, as well as to use custom icons for mimetypes and file extensions which ownCloud doesn’t natively support. Changing Existing Icons and Using Custom Icons\nIf you want to change one or more of the existing icons which ownCloud uses, or if you want to expand the available list, here’s how to do so:\nFirst, create a copy of\nresources/config/mimetypealiases.dist.json\nand save it as\nconfig/mimetypealiases.json\nThis is required for two reasons:\nIt will take precedence over the default file. The original file will get replaced on each ownCloud upgrade. Please refer to the\nownCloud theming documentation\nfor where to put the new image files. Here is an example for Ubuntu Linux:\nsudo -u www-data ./occ maintenance:mimetype:update-js\nExample - Changing the JSON File Icon\nLet’s go through an example of to change the icon that ownCloud uses to represent JSON files, which you can see above. Mimetype Mapping\nownCloud allows administrators to map a file extension to a mimetype, e.g., such as mapping files ending in\nmp3\nto\naudio/mpeg\n. Which then, in turn, allows ownCloud to show the audio icon. If not, then ownCloud will fall back to using the icon for\ntext/plain\n. Please refer to the\nownCloud theming documentation\nfor where to put the new image files."
        },
        {
            "cluster": 1,
            "chunk_content": "This is handy in a variety of situations, e.g. if you want a custom audio icon for audio mimetypes instead of the default file icon. {\n\"application/coreldraw\": \"image\",\n\"application/font-sfnt\": \"image\",\n\"application/font-woff\": \"image\",\n\"application/illustrator\": \"image\",\n\"application/epub+zip\": \"text\",\n\"application/javascript\": \"text/code\"\n}\nYou can see that:\nthe image icon is used to represent Corel Draw, SFNT and WOFF font files, and Adobe Illustrator files,\nePub files are represented by the text file icon,\nJavaScript files are represented by the text/code icon. * The location is because the\ncore/img/filetypes\ndirectory stores the mimetype file icons. * The name is important as it’s a rough mapping between the alias name and the icon’s file name, i.e.,\ntext/json\nbecomes\ntext-json\n. sudo -u www-data ./occ maintenance:mimetype:update-js\nAfter doing so, whenever you view a folder that contains JSON files or upload one, your new icon file will be used to represent the file, as in the image below. If it is, it will use that icon. Icon retrieval\nWhen an icon is retrieved for a mimetype, if the full mimetype cannot be found, the search will fallback to looking for the part before the slash. Given a file with the mimetype\nimage/my-custom-image\n, if no icon exists for the full mimetype, the icon for\nimage\nwill be used instead. This allows specialized mimetypes to fallback to generic icons when the relevant icons are unavailable."
        },
        {
            "cluster": 0,
            "chunk_content": "Mimetype Aliases\nownCloud’s default mimetype configuration is defined in\nowncloud/resources/config/mimetypealiases.dist.json\nBelow you can see a snippet of the file where the mimetype’s on the left and the icon used to represent that mimetype is on the right. Then, either override one or more existing definitions or add new custom aliases as required. Some common mimetypes that may be useful in creating aliases are:\nMimetype\nDescription\nimage\nGeneric image\nimage/vector\nVector image\naudio\nGeneric audio file\nx-office/document\nWord processed document\nx-office/spreadsheet\nSpreadsheet\nx-office/presentation\nPresentation\ntext\nGeneric text document\ntext/code\nSource code\nOnce you have made changes to\nconfig/mimetypealiases.json\nuse the\nocc command\nto propagate the changes throughout your ownCloud installation. From the root directory of your ownCloud installation, copy\nresources/config/mimetypealiases.dist.json\nto\nconfig/mimetypealiases.json\nUpdate the alias for\napplication/json\n, which you should find on line 8, to match the following, and save the file:\n\"application/json\": \"text/json\",\nCopy a new SVG icon to represent JSON files to\ncore/img/filetypes\n, calling it\ntext-json.svg\n. Run the following command to update the mimetype alias database. In this case, ownCloud will first check if a mimetype alias is defined for\napplication/json\n, in\nmimetypealiases.json\n. If you want to update or extend the existing mapping, as with updating the mimetype aliases, create a copy of\nresources/config/mimetypemapping.dist.json\nand save it as\nconfig/mimetypemapping.json\nThen, in this new file, make any changes required."
        },
        {
            "cluster": 3,
            "chunk_content": "The name and location of the file are important. The default file extension to mimetype mapping configuration is stored in\nresources/config/mimetypemapping.dist.json\nThis is similar to\nresources/config/mimetypealiases.dist.json\nand also returns a basic JSON array. {\n\"3gp\": [\"video/3gpp\"],\n\"7z\": [\"application/x-7z-compressed\"],\n\"accdb\": [\"application/msaccess\"],\n\"ai\": [\"application/illustrator\"],\n\"apk\": [\"application/vnd.android.package-archive\"],\n\"arw\": [\"image/x-dcraw\"],\n\"avi\": [\"video/x-msvideo\"],\n\"bash\": [\"text/x-shellscript\"],\n\"json\": [\"application/json\", \"text/plain\"]\n}\nIn the example above, you can see nine mimetypes mapped to file extensions. Each of them, except the last (\njson\n), maps a file extension to a mimetype. Now take a look at the JSON example."
        }
    ]
}