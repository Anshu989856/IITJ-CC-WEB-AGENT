{
    "file_name": "server_admin_manual_configuration_server_background_jobs_configuration.html",
    "file_path": "./owncloud_docs\\server_admin_manual_configuration_server_background_jobs_configuration.html",
    "chunks": [
        {
            "cluster": 2,
            "chunk_content": "Documentation for ownCloud (A Kiteworks Company)\nownCloud Server\nIntroduction\nAdmin Manual\nIntroduction\nUseful Pages\nFAQ\nGDPR\nInstallation\nDeployment Considerations\nDeployment Recommendations\nNFS\nSystem Requirements\nConfiguration Notes and Tips\nInstallation Options\nInstalling With Docker\nManual Installation on Linux\nDetailed Installation Guide\nDetailed Installation on Ubuntu (various versions)\nQuick Installation Guide\nOn Ubuntu 20.04\nOn Ubuntu 22.04\nLinux Package Manager\nLinux Package Manager Installation\nThe Installation Wizard\nTroubleshooting\nChanging Your ownCloud URL\nInstalling and Managing Apps\nSupported Apps\nMedia Viewer\nSELinux Configuration\nUsing Let’s Encrypt SSL Certificates\nUsing Letsencrypt\nApache\nConfiguration\nDatabase\nDatabase Conversion\nDatabase Configuration\nEncryption\nEncryption Configuration\nEncryption Configuration Quick Guide\nExternal Storage\nExternal Storage Configuration\nExternal Storage Authentication Mechanisms\nAmazonS3\nDropbox\nFTP\nGoogle\nLocal\nownCloud\nS3 as Primary\nSFTP\nSMB\nWebDAV\nFiles and Sharing\nBig File Upload Configuration\nManual File Locking\nDefault Files Configuration\nFederated Cloud Sharing Configuration\nFile Sharing Configuration\nFile Versioning\nTransactional File Locking\nPreview Configuration\nMimetypes\nManaging the Trashbin\nIntegration\nMicrosoft Teams\nownCloud App for Splunk\nGeneral Topics\nCode Signing\nImpersonate Users\nFull Text Search\nServer\nActivity Configuration\nBackground Jobs Configuration\nCaching Configuration\nConfig Sample PHP Parameters\nConfig Apps Sample PHP Parameters\nCustom Client Repos\nEmail Configuration\nExcluded Blacklisted Files\nExternal Sites\nHarden Server\nImport SSL Cert\nIndex PHP Less URLs\nOCC Command\nLanguage Configuration\nLegal Settings Configuration\nLogging\nLogging Configuration\nRequest Tracing\nReverse Proxy Configuration\nSecurity\nBrute-Force Protection\nOAuth2\nPassword policy\nSecurity Setup Warnings\nThe HSM (Hardware Security Module) Daemon\nDependency Notes\nServer Tuning\nThird Party PHP Configuration\nVirus Scanner Support\nUI Configuration\nUser\nUser Management\nUser Roles\nReset Admin Password\nReset User Password\nUser Auth FTP SMB IMAP\nUser Auth LDAP\nUser Auth Two-Factor\nUser Auth OAuth2\nUser Provisioning API\nCustom Groups App\nGuests App\nOpenID Connect (OIDC)\nLogin Policies\nMaintenance\nUpgrading\nManual Upgrade\nDatabase Upgrade\nUpgrading from Package\nUsing the Updater App\nUpgrading PHP\nMarketplace Apps\nBackup and Restore\nBackup\nRestore\nMaintenance Mode\nExport and Import Instance Data\nManually Moving Data Folders\nEncryption\nMigrating from User Key to Master Key Encryption\nMigrating to a Different Server\nMigrating to Kiteworks PCN\nEnterprise\nAuthentication\nEnterprise Only Authentication\nKerberos Authentication\nClients\nCustom Client Repos\nCollaboration\nCollabora Online / Secure View\nMicrosoft Office Online / WOPI Integration\nDocument Classification\nClassify Documents and Enforce Policies\nExternal Storage\nLDAP Home Connector Configuration\nSharepoint integration Configuration\nWindows Network Drive Configuration\nWND Configuration Quick Guide\nFile Management\nFile Tagging\nFile Lifecycle Management\nFirewall\nFile Firewall\nInstallation\nInstalling & Upgrading ownCloud Enterprise Edition\nOracle DB Setup & Configuration\nLogging\nAuditing\nReporting\nMetrics\nGenerate a Config Report\nSecurity\nRansomware Protection\nUser Management\nShibboleth Integration\nSAML 2.0 Based SSO\nTroubleshooting\nGeneral Troubleshooting\nPath and Filename Length Limitations\nRetrieve Log Files and Configuration Settings\nRemove Non-Existent Background Jobs\nFound a Mistake? Developer Manual\nIntroduction\nGeneral Contributor Guidelines\nCommunity Code of Conduct\nCoding Style & General Guidelines\nDebugging\nPerformance Considerations\nSecurity Guidelines\nBackporting\nHelp and Communication\nDeveloping ownCloud Core\nIntroduction\nSetup Your Development Environment\nApplication Configuration\nTheming\nTranslation\nCode Standards Compliance\nTesting\nownCloud Test Pilots\nDrone Testing\nUnit Testing\nAcceptance Tests\nUser Interface Testing\nAvailable APIs\nThe External API\nThe Provisioning API\nOCS\nThe OCS Notifications API (v1)\nThe OCS REST API\nThe OCS Recipient API\nThe OCS Share API\nThe OCS TOTP Validation API\nThe OCS User Sync API\nNotify Public Link By Email\nThe Roles API\nWebDAV APIs\nThe Comments API\nThe Custom Groups Management API\nThe Files Versions API\nThe Meta API\nThe Search API\nThe Tags API\nThe Trash Bin API\nThe Public Files API\nApplication Development\nFundamental Concepts\nApplication Metadata\nThe Classloader\nConfiguration\nRouting\nControllers\nTemplates\nJavaScript\nCSS\nMiddleware\nDatabase Connectivity\nBackground Jobs\nLogging\nTesting\nThe DI Container\nFilesystem\nRESTful API\nHooks\nPublishing in the ownCloud Marketplace\nChangelog\nMarket App\nAdvanced Concepts\nCustom Filesystem Caches\nCustom Storage Backends\nNotifications\nStorage Backends\nExternal Storage Backends\nTranslation\nTwo-Factor Providers\nUser Management\nCode Signing\nTutorial\nMinimum Requirements\nThe Request Life Cycle\nThe Core Application Files\nRoutes and Controllers\nDatabase Connectivity\nCreate Template Content\nCreate a Navigation Menu\nAdd JavaScript and CSS\nWiring it Up\nApply the Finishing Touches\nAdd a RESTful API\nWriting Tests\nMobile Development\nAndroid\nLibrary Installation\nExamples\niOS\nLibrary Installation\nExamples\nBugtracker\nCode Reviews\nBug Triaging\nFound a Mistake? ownCloud Server UI\nIntroduction\nThe WebUI\nWeb Interface\nNavigating the WebUI\nPersonal Settings\nGeneral\nStorage\nSharing\nSecurity\nCustom Groups\nFiles\nAccess WebDAV\nSharing Files\nSearch & Full Text Search\nTagging Files\nComments\nVersion Control\nEncrypting Files\nManaging Deleted Files\nLarge File Uploads\nManual File Locking\nFile Lifecycle Management\nPublic Link Shares\nFederated Cloud Sharing\nManaging Connected Browsers and Devices\nOnline Collaboration\nStorage Quotas\nExternal Storage\nConnecting to SharePoint\nDesktop Mobile Sync\nApps\nActivity\nCalendar\nContacts\nMarket\nMedia Viewer App\nIntegration\nMicrosoft Teams\nSynchronization Clients\nSync iOS\nSync KDE\nSync OSX\nSync Thunderbird\nTroubleshooting\nFound a Mistake? These can all be configured in the admin settings menu. The following sections describe the differences between each method. As a result, it makes sense (often times) to accept it in the interests of expediency. For this reason, we encourage you to not use it for too long — especially if your site is rapidly growing. However, it is also the\nleast\nreliable. Especially when using the Activity App or external storages, where new files are added, updated, or deleted one of the other methods should be used. Forbidden error for Scanner.php\nIf you find a\nForbidden\nerror message in your log files, with a reference to the\nScanner.php\nfile, then you should:\nCheck if you have any shares with the status\npending\n. Activity Configuration\nCaching Configuration\nAbout ownCloud\nThe Secure Collaboration Platform\nNews\nPrivacy statement\nImprint\nResources\nFAQ\nHelp\nSecurity\nChangelog\nGet started\nInteract\nRocket.Chat\nForum\nContribute\nCustomer support\n© Copyright 2011-2025, The ownCloud developers."
        },
        {
            "cluster": 0,
            "chunk_content": "ownCloud Server\n10.15\nDesktop App\nnext\n5.3\n5.2\nInfinite Scale Documentation\nnext\n7.1\n7.0\nMobile App for Android\nnext\n4.5\n4.4\nMobile App for iOS\nnext\n12.4\n12.3\nownCloud Main Page\nownCloud Server\nnext\n10.15\n10.14\nownCloud Web User Interfaces\nnext\nownCloud Server\nAdmin Manual\nConfiguration\nServer\nBackground Jobs Configuration\nnext\n10.15\n10.14\nEdit this Page\nBackground Jobs\nTable of Contents\nIntroduction\nDocker Note\nCron Jobs\nCron\nWebcron\nAJAX\nParallel Task Execution\nAvailable Background Jobs\nTroubleshooting\nRemove Non-Existent Background Jobs\nForbidden error for Scanner.php\nIntroduction\nA system like ownCloud sometimes requires tasks to be done on a regular basis without requiring user interaction or hindering ownCloud’s performance. To run Cron jobs with ownCloud, we recommend that you use the occ\nsystem:cron\ncommand. As an example:\nsudo -u www-data ./occ background:cron\nIs the same as using the\nCron\nsection on your ownCloud Admin page. If required, this can also be adjusted by the\nenvironment variables\nOWNCLOUD_CROND_ENABLED\nand\nOWNCLOUD_CROND_SCHEDULE\n. What’s more, an increasing amount of ownCloud automation has been migrated from AJAX to Cron in recent versions. For example, to run a Cron job on a *nix system every 15 minutes (recommended), under the default web server user (often,\nwww-data\nor\nwwwrun\n) you must set up the following Cron job to call the occ\nsystem:cron\ncommand:\nsudo crontab -u www-data -e\n*/15  *  *  *  * /usr/bin/php -f /path/to/your/owncloud/occ system:cron\nYou can verify if the cron job has been added and scheduled by executing:\nsudo crontab -u www-data -l\n*/15  *  *  *  * /usr/bin/php -f /path/to/your/owncloud/occ system:cron\nYou have to make sure that PHP is found by Cron; hence why we’ve deliberately added the full path. There are other methods to invoke programs by the system regularly, e.g.,\nsystemd timers\nWebcron\nBy registering your ownCloud\ncron.php\nscript address as an external webcron service (for example,\neasyCron\n), you ensure that background jobs are executed regularly. To use this type of service, your external webcron service must be able to access your ownCloud server using the Internet. For example:\nURL to call: http[s]://<domain-of-your-server>/owncloud/cron.php\nAJAX\nThe AJAX scheduling method is the default option. Each time a user visits the ownCloud page, a single background job is executed. Parallel Task Execution\nRegardless of the approach which you take, since ownCloud 9.1, Cron jobs can be run in parallel. There is no way to do so via the ownCloud UI."
        },
        {
            "cluster": 1,
            "chunk_content": "For that reason, as a system administrator you can configure background jobs (for example, database clean-ups) to be executed without any user interaction. The reason for this distinction is that AJAX is easier to get up and running. However, doing so is known to cause issues, such as backlogs and potentially not running every job on a heavily-loaded system. While Webcron is better than AJAX, it has limitations too. This method enables the execution of scheduled jobs without the inherent limitations which the web server might have. The advantage of this mechanism, however, is that it does not require access to the system nor registration with a third party service. The disadvantage of this mechanism, when compared to the\nWebcron\nservice, is that it requires regular visits to the page for it to be triggered. Depending on the process which you are automating, this may not be necessary. However, for longer-running tasks, such as those which are LDAP related, it may be very beneficial. These jobs are generally only needed on large instances and can be run as background jobs. Make sure that they’re not started in parallel on multiple machines. Running in parallel on a single machine is fine. But, currently, there isn’t sufficient locking in place to prevent them from conflicting with each other if running in parallel across multiple machines."
        },
        {
            "cluster": 4,
            "chunk_content": "These jobs are typically referred to as\nCron Jobs\n. Cron jobs are commands or shell-based scripts that are scheduled to periodically run at fixed times, dates, or intervals. Use the\nocc background command set\nto select which scheduler you want to use for controlling. For more details on how to manage background jobs, refer to\nManaging Background Jobs\n. Docker Note\nIf you are using the official docker images you don’t need to take care about the configuration for background jobs, the docker image is already configured to use cron internally. Cron Jobs\nYou can schedule Cron jobs in three ways:\nCron\n,\nWebcron\n, or\nAJAX\n. However, the recommended method is to use Cron. There are a number of things to keep in mind when choosing an automation option:\nWhile the default method is AJAX, though the preferred way is to use Cron. For example, running Webcron will only remove a single item from the job queue, not all of them. Cron, however, will clear the entire queue. It’s for this reason that we encourage you to use Cron — if at all possible. Cron\nUsing the operating system Cron feature is the preferred method for executing regular tasks. Please refer to\nthe crontab man page\nfor the exact command syntax if you don’t want to have it run every 15 minutes. This is done by running\nbackground:cron\nmultiple times. But, the most direct way to do so, is by opening three console tabs and in each one run\nsudo -u www-data ./occ system:cron\nEach of these processes would acquire their own list of jobs to process without overlapping any other. Available Background Jobs\nA number of existing background jobs are available to be run just for specific tasks. Configure\nconditional logging\nfor cron to see more output."
        },
        {
            "cluster": 3,
            "chunk_content": "If the number of users in your installation ranges between 1,000 and 3,000, or if you’re using LDAP and it becomes a bottleneck, then admins can delete several entries in the\noc_jobs\ntable and replace them with the corresponding\nocc\ncommand, which you can see here:\nOCA\\\\DAV\\CardDAV\\\\SyncJob\n→\nocc dav:sync-system-addressbook\nOCA\\\\Federation\\\\SyncJob\n→\nocc federation:sync-addressbooks\nOCA\\\\Files_Trashbin\\\\BackgroundJob\\\\ExpireTrash\n→\nocc trashbin:expire\nOCA\\\\Files_Versions\\\\BackgroundJob\\\\ExpireVersions\n→\nocc versions:expire\nIf used, these should be scheduled to run on a daily basis. While not exhaustive, these include:\nCleanupChunks\nThe\nCleanupChunks\ncommand,\nocc dav:cleanup-chunks\n, will clean up outdated chunks (uploaded files) more than a certain number of days old and needs to be added to your crontab. There is no matching background job to delete from the\noc_jobs\ntable. ExpireTrash\nThe ExpireTrash job, contained in\nOCA\\Files_Trashbin\\BackgroundJob\\ExpireTrash\n, will remove any file in the ownCloud trash bin which is older than the specified maximum file retention time. It can be run, as follows, using the\nOCC trashbin\ncommand:\nsudo -u www-data ./occ trashbin:expire\nExpireVersions\nThe ExpireVersions job, contained in\nOCA\\Files_Versions\\BackgroundJob\\ExpireVersions\n, will expire versions of files which are older than the specified maximum version retention time. It can be run, as follows, using the\nOCC versions\ncommand:\nsudo -u www-data ./occ versions:expire\nPlease take care when adding\nExpireTrash\nand\nExpireVersions\nas\nCron\njobs. SyncJob (CardDAV)\nThe\nCardDAV SyncJob\n, contained in\nOCA\\DAV\\CardDAV\\SyncJob\n, syncs the local system address book, updating any existing contacts, and deleting any expired contacts. It can be run, as follows, using the\nOCC dav\ncommand:\nsudo -u www-data ./occ dav:sync-system-addressbook\nSyncJob (Federation)\nOCAFederationSyncJob\nIt can be run, as follows, using the\nOCC federation sync\ncommand:\nsudo -u www-data ./occ federation:sync-addressbooks\nTroubleshooting\nRemove Non-Existent Background Jobs\nSee the\nRemove Non-Existent Background Jobs\nsection in the general troubleshooting documentation for more details."
        }
    ]
}