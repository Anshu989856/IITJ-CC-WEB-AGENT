{
    "file_name": "server_admin_manual_configuration_files_file_versioning.html",
    "file_path": "./owncloud_docs\\server_admin_manual_configuration_files_file_versioning.html",
    "chunks": [
        {
            "cluster": 3,
            "chunk_content": "Documentation for ownCloud (A Kiteworks Company)\nownCloud Server\nIntroduction\nAdmin Manual\nIntroduction\nUseful Pages\nFAQ\nGDPR\nInstallation\nDeployment Considerations\nDeployment Recommendations\nNFS\nSystem Requirements\nConfiguration Notes and Tips\nInstallation Options\nInstalling With Docker\nManual Installation on Linux\nDetailed Installation Guide\nDetailed Installation on Ubuntu (various versions)\nQuick Installation Guide\nOn Ubuntu 20.04\nOn Ubuntu 22.04\nLinux Package Manager\nLinux Package Manager Installation\nThe Installation Wizard\nTroubleshooting\nChanging Your ownCloud URL\nInstalling and Managing Apps\nSupported Apps\nMedia Viewer\nSELinux Configuration\nUsing Let’s Encrypt SSL Certificates\nUsing Letsencrypt\nApache\nConfiguration\nDatabase\nDatabase Conversion\nDatabase Configuration\nEncryption\nEncryption Configuration\nEncryption Configuration Quick Guide\nExternal Storage\nExternal Storage Configuration\nExternal Storage Authentication Mechanisms\nAmazonS3\nDropbox\nFTP\nGoogle\nLocal\nownCloud\nS3 as Primary\nSFTP\nSMB\nWebDAV\nFiles and Sharing\nBig File Upload Configuration\nManual File Locking\nDefault Files Configuration\nFederated Cloud Sharing Configuration\nFile Sharing Configuration\nFile Versioning\nTransactional File Locking\nPreview Configuration\nMimetypes\nManaging the Trashbin\nIntegration\nMicrosoft Teams\nownCloud App for Splunk\nGeneral Topics\nCode Signing\nImpersonate Users\nFull Text Search\nServer\nActivity Configuration\nBackground Jobs Configuration\nCaching Configuration\nConfig Sample PHP Parameters\nConfig Apps Sample PHP Parameters\nCustom Client Repos\nEmail Configuration\nExcluded Blacklisted Files\nExternal Sites\nHarden Server\nImport SSL Cert\nIndex PHP Less URLs\nOCC Command\nLanguage Configuration\nLegal Settings Configuration\nLogging\nLogging Configuration\nRequest Tracing\nReverse Proxy Configuration\nSecurity\nBrute-Force Protection\nOAuth2\nPassword policy\nSecurity Setup Warnings\nThe HSM (Hardware Security Module) Daemon\nDependency Notes\nServer Tuning\nThird Party PHP Configuration\nVirus Scanner Support\nUI Configuration\nUser\nUser Management\nUser Roles\nReset Admin Password\nReset User Password\nUser Auth FTP SMB IMAP\nUser Auth LDAP\nUser Auth Two-Factor\nUser Auth OAuth2\nUser Provisioning API\nCustom Groups App\nGuests App\nOpenID Connect (OIDC)\nLogin Policies\nMaintenance\nUpgrading\nManual Upgrade\nDatabase Upgrade\nUpgrading from Package\nUsing the Updater App\nUpgrading PHP\nMarketplace Apps\nBackup and Restore\nBackup\nRestore\nMaintenance Mode\nExport and Import Instance Data\nManually Moving Data Folders\nEncryption\nMigrating from User Key to Master Key Encryption\nMigrating to a Different Server\nMigrating to Kiteworks PCN\nEnterprise\nAuthentication\nEnterprise Only Authentication\nKerberos Authentication\nClients\nCustom Client Repos\nCollaboration\nCollabora Online / Secure View\nMicrosoft Office Online / WOPI Integration\nDocument Classification\nClassify Documents and Enforce Policies\nExternal Storage\nLDAP Home Connector Configuration\nSharepoint integration Configuration\nWindows Network Drive Configuration\nWND Configuration Quick Guide\nFile Management\nFile Tagging\nFile Lifecycle Management\nFirewall\nFile Firewall\nInstallation\nInstalling & Upgrading ownCloud Enterprise Edition\nOracle DB Setup & Configuration\nLogging\nAuditing\nReporting\nMetrics\nGenerate a Config Report\nSecurity\nRansomware Protection\nUser Management\nShibboleth Integration\nSAML 2.0 Based SSO\nTroubleshooting\nGeneral Troubleshooting\nPath and Filename Length Limitations\nRetrieve Log Files and Configuration Settings\nRemove Non-Existent Background Jobs\nFound a Mistake? Developer Manual\nIntroduction\nGeneral Contributor Guidelines\nCommunity Code of Conduct\nCoding Style & General Guidelines\nDebugging\nPerformance Considerations\nSecurity Guidelines\nBackporting\nHelp and Communication\nDeveloping ownCloud Core\nIntroduction\nSetup Your Development Environment\nApplication Configuration\nTheming\nTranslation\nCode Standards Compliance\nTesting\nownCloud Test Pilots\nDrone Testing\nUnit Testing\nAcceptance Tests\nUser Interface Testing\nAvailable APIs\nThe External API\nThe Provisioning API\nOCS\nThe OCS Notifications API (v1)\nThe OCS REST API\nThe OCS Recipient API\nThe OCS Share API\nThe OCS TOTP Validation API\nThe OCS User Sync API\nNotify Public Link By Email\nThe Roles API\nWebDAV APIs\nThe Comments API\nThe Custom Groups Management API\nThe Files Versions API\nThe Meta API\nThe Search API\nThe Tags API\nThe Trash Bin API\nThe Public Files API\nApplication Development\nFundamental Concepts\nApplication Metadata\nThe Classloader\nConfiguration\nRouting\nControllers\nTemplates\nJavaScript\nCSS\nMiddleware\nDatabase Connectivity\nBackground Jobs\nLogging\nTesting\nThe DI Container\nFilesystem\nRESTful API\nHooks\nPublishing in the ownCloud Marketplace\nChangelog\nMarket App\nAdvanced Concepts\nCustom Filesystem Caches\nCustom Storage Backends\nNotifications\nStorage Backends\nExternal Storage Backends\nTranslation\nTwo-Factor Providers\nUser Management\nCode Signing\nTutorial\nMinimum Requirements\nThe Request Life Cycle\nThe Core Application Files\nRoutes and Controllers\nDatabase Connectivity\nCreate Template Content\nCreate a Navigation Menu\nAdd JavaScript and CSS\nWiring it Up\nApply the Finishing Touches\nAdd a RESTful API\nWriting Tests\nMobile Development\nAndroid\nLibrary Installation\nExamples\niOS\nLibrary Installation\nExamples\nBugtracker\nCode Reviews\nBug Triaging\nFound a Mistake? ownCloud Server UI\nIntroduction\nThe WebUI\nWeb Interface\nNavigating the WebUI\nPersonal Settings\nGeneral\nStorage\nSharing\nSecurity\nCustom Groups\nFiles\nAccess WebDAV\nSharing Files\nSearch & Full Text Search\nTagging Files\nComments\nVersion Control\nEncrypting Files\nManaging Deleted Files\nLarge File Uploads\nManual File Locking\nFile Lifecycle Management\nPublic Link Shares\nFederated Cloud Sharing\nManaging Connected Browsers and Devices\nOnline Collaboration\nStorage Quotas\nExternal Storage\nConnecting to SharePoint\nDesktop Mobile Sync\nApps\nActivity\nCalendar\nContacts\nMarket\nMedia Viewer App\nIntegration\nMicrosoft Teams\nSynchronization Clients\nSync iOS\nSync KDE\nSync OSX\nSync Thunderbird\nTroubleshooting\nFound a Mistake? ownCloud Server\n10.15\nDesktop App\nnext\n5.3\n5.2\nInfinite Scale Documentation\nnext\n7.1\n7.0\nMobile App for Android\nnext\n4.5\n4.4\nMobile App for iOS\nnext\n12.4\n12.3\nownCloud Main Page\nownCloud Server\nnext\n10.15\n10.14\nownCloud Web User Interfaces\nnext\nownCloud Server\nAdmin Manual\nConfiguration\nFiles and Sharing\nFile Versioning\nnext\n10.15\n10.14\nEdit this Page\nFiles Versions\nTable of Contents\nIntroduction\nHow Versions are Created\nHow Versions are Deleted\nDefault Versions Delete Patterns\nChange the Expiration Settings\nPossible Config Values\nRestoring a Version\nExtended Version Metadata\nShow the Author of a Version\nConscious Persistent Major Versions\nEnterprise File Retention\nIntroduction\nEvery time when a file gets rewritten to the storage, the versions app (\nfiles_versions\n) creates a new backup copy of the file. ├── files\n│   └── welcome.txt\n└── files_versions\n├── welcome.txt.v1556203470\n├── welcome.txt.v1556203501\n└── welcome.txt.v1556203567\nFile versioning only gets triggered if the change is made via the ownCloud ecosystem. Default Versions Delete Patterns\nThis is the default pattern used to delete old versions:\nFor the last second we keep one version\nFor the last 10 seconds ownCloud keeps one version every 2 seconds\nFor the last minute ownCloud keeps one version every 10 seconds\nFor the last hour ownCloud keeps one version every minute\nFor the last 24 hours ownCloud keeps one version every hour\nFor the last 30 days ownCloud keeps one version every day\nIf the versions are older than 30 days ownCloud keeps one version every week\nThe versions are adjusted along this pattern every time a new version is created and the background job was executed. If the stored versions exceed this limit, ownCloud deletes the oldest file versions until it meets the disk space limit again. Conscious Persistent Major Versions\nownCloud can automatically generate and increment version numbers for new file versions. Major versions are persistent versions that are not subject to any retention policies set by ownCloud. Version tags cannot be modified by the user, they are auto-generated by ownCloud. File Sharing Configuration\nTransactional File Locking\nAbout ownCloud\nThe Secure Collaboration Platform\nNews\nPrivacy statement\nImprint\nResources\nFAQ\nHelp\nSecurity\nChangelog\nGet started\nInteract\nRocket.Chat\nForum\nContribute\nCustomer support\n© Copyright 2011-2025, The ownCloud developers."
        },
        {
            "cluster": 0,
            "chunk_content": "Versions are visible for the user in the webinterface only and do not get synced to clients. How Versions are Created\nWhen a backup copy is created, it is stored inside a folder\nfiles_versions\nwhich is inside the users root folder. Versions are displayed in the WebUI in the details view in the right sidebar if you click on the file row in the file listing. Extended Version Metadata\nSave additional metadata (author, version tag, etc.) of each version of uploaded and edited files. This means the author or version number will show only for new versions of the file and be empty for older versions. Show the Author of a Version\nEach update to the file that generates a new file version will additionally show the author in the Versions Tab. This is helpful to keep track of who changed a version. Based on this feature, one can define the actual version to be a major version which gets a major version number and all new upcoming versions start counting from this major number. To create a new persistent major version, the user has to click on the check mark next to the version info tab. The versions follow the X.Y format, where X is a major part and Y is a minor part of the version."
        },
        {
            "cluster": 2,
            "chunk_content": "An admin can control the retention behaviour of versioned files. It does not get triggered if the change is made at a mounted filesystem directly. You can restore the current file to one of the earlier backup copies in the list, by clicking on the\nrestore\nicon of the specific version. How Versions are Deleted\nThe versions app deletes old file versions automatically to ensure that users do not exceed their storage quotas. This is done by automatic background jobs which clean up the versions following a specific pattern. Adjust the\n'versions_retention_obligation'\nsetting in\nconfig.php\nto avoid filling up the user’s quota. disabled\nDisable version retention; no files will be deleted. 'versions_retention_obligation' => '30, 30',\nRestoring a Version\nIn the WebUI in the details view, there is a restore button next to the versions. It can be used to restore the file to a past version. Restore does not delete the old version, instead a new current version is created. Note that retention policy can be applied after the restore operation, which could result in the old version being removed because of the retention policy. This behavior can be changed with the persistent major version feature discussed in the section below. Publishing the version persists it until the original file is deleted by somebody with such permission or by the system administrator via occ versions:cleanup command. For more information check the\nversions retention\nsection. Enterprise File Retention\nEnterprise customers have additional tools for managing file retention policies; see\nAdvanced File Tagging With the Workflow App\n."
        },
        {
            "cluster": 1,
            "chunk_content": "The app will add the suffix\n.v\nfollowed by the unix timestamp of the creation date of the backup copy. This pattern defines the expiration date for each backup version. Example\nTime Period before last Expiration\nMaximum Number of Versions:\n1 second\n1\n10 seconds\n5\n1 minute\n6\n1 hour\n59\n1 day\n23\n30 days\n30\nThe versions app never uses more than 50% of the user’s storage quota. Change the Expiration Settings\nYou may alter the\ndefault pattern\nin\nconfig.php\n. The default setting is\nauto\n, which sets the default pattern:\n'versions_retention_obligation' => 'auto',\nPossible Config Values\nauto\nDefault value if nothing is set\nD, auto\nKeep versions at least for D days, apply expiration rules to all versions that are older than D days\nauto, D\nDelete all versions that are older than D days automatically, delete other versions according to expiration rules\nD1, D2\nKeep versions for at least\nD1\ndays and delete when they exceed\nD2\ndays. Example 1:\nKeep all versions for at least 10 days, apply expiration rules to all versions that are older than 10 days. This will keep a lot more versions during the last 10 days compared to the default pattern. 'versions_retention_obligation' => '10, auto',\nExample 2:\nApply expiration rules to all versions that are created during the last 30 days and do not keep any versions older than 30 days. 'versions_retention_obligation' => 'auto, 30',\nExample 3:\nDo not apply any expiration rules. Delete all versions after 30 days."
        },
        {
            "cluster": 4,
            "chunk_content": "For details see the section below. You can enable the feature\nvia an entry in config.php\n. The metadata is only collected after enabling the feature using the\nconfig.php\nconfiguration file. Check the image above."
        }
    ]
}