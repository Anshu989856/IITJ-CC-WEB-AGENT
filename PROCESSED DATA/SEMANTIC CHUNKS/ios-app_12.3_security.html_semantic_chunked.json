{
    "file_name": "ios-app_12.3_security.html",
    "file_path": "./owncloud_docs\\ios-app_12.3_security.html",
    "chunks": [
        {
            "cluster": 1,
            "chunk_content": "Documentation for ownCloud (A Kiteworks Company)\nMobile App for iOS\nIntroduction\nGetting the ownCloud iOS App\nManaging User Accounts\nConfigure Settings\nManaging Your Files\nOffline Files and Folders\nCollaboration and Links\nQuick Access\niOS Files App and 3rd Party Apps\nTask Scheduling\nSecurity\nFrequently Asked Questions (FAQ)\nAppendices\nMobile Device Management (MDM)\nTroubleshooting\nMobile App for iOS\n12.3\nDesktop App\nnext\n5.3\n5.2\nInfinite Scale Documentation\nnext\n7.1\n7.0\nMobile App for Android\nnext\n4.5\n4.4\nMobile App for iOS\nnext\n12.4\n12.3\nownCloud Main Page\nownCloud Server\nnext\n10.15\n10.14\nownCloud Web User Interfaces\nnext\nMobile App for iOS\nSecurity\nnext\n12.4\n12.3\nEdit this Page\nSecurity\nTable of Contents\nIntroduction\nAuthentication\nAPI\nSecrets\nSupported Methods\nMethod Selection\nOAuth2 Implementation\nConnections\nURL Limits\nRedirects\nSSL/TLS Certificates\nInspecting Certificate Details\nMore Information\nData\nSeparation\nEncryption\nSync\nSecure Document View\nPasscode\nMiscellaneous\nContinuous Integration (CI)\nSQL Injection\nReproducibility\nPlanned Logging Feature (not included in released yet!!) Introduction\nThis guide steps you through the security features of of ownCloud’s Mobile App for iOS. in the new\nownCloud iOS SDK\nand new\nownCloud iOS App\n. Authentication\nAPI\nThe ownCloud iOS SDK (2018) is a\ngeneral-purpose API\nfor implementing passphrase- and token-based authentication methods, which provides three key benefits. Task Scheduling\nFrequently Asked Questions (FAQ)\nAbout ownCloud\nThe Secure Collaboration Platform\nNews\nPrivacy statement\nImprint\nResources\nFAQ\nHelp\nSecurity\nChangelog\nGet started\nInteract\nRocket.Chat\nForum\nContribute\nCustomer support\n© Copyright 2011-2025, The ownCloud developers."
        },
        {
            "cluster": 0,
            "chunk_content": "These are:\nEnsures structural separation of code between general connection-handling and authentication. Simplifies code reviews, by limiting each implementation to one class each (e.g.,\nOAuth2\n,\nBasicAuth\n). Supported Methods\nAuthentication method implementations are available for\nOAuth2\nand\nBasic Authentication\n. Method Selection\nAfter performing auto-detection, identified authentication methods are filtered and ranked by preference. The method with the highest ranking is then picked for the user. By default, all detected methods are considered and OAuth2 ranks higher than Basic Authentication. Filtering and ranking can be customized by\nMDM Configuration\n. Instead, they are reported to the user and must be explicitly approved. Additional hardening is achieved by disabling JavaScript and blocking all network requests, which protects against lesser known, non-obvious attacks like\nCSS Keylogging\n. Miscellaneous\nContinuous Integration (CI)\nContinuous Integration tests verify that central security mechanisms and assumptions work as expected, covering areas such as\nredirections\n,\ncertificate handling\n, common Man-in-the-middle (MITM) attack scenarios, and the secure storage of authentication secrets."
        },
        {
            "cluster": 2,
            "chunk_content": "Secrets\nAuthentication secrets contain information such as\nusernames\n,\npasswords\nor\ntokens\n, and are\ngenerated by the respective authentication method implementation. Authentication Secrets are securely\nstored in the app’s Keychain and tagged as\nAccessibleAfterFirstUnlock\n. They cannot be accessed after a restart until the device has been unlocked once by the user. This, for example, allows making OAuth2 the only possible authentication method, so no credentials need to be stored on the device. OAuth2 Implementation\nThe OAuth2 implementation uses\nSFAuthenticationSession\n, which is described as a best practice by\nRFC 8252\n- when running under iOS 11. Under iOS 12, the OAuth2 implementation uses\nASWebAuthenticationSession\n, which is the successor of\nSFAuthenticationSession\n. Benefits of using these APIs include:\nPrivilege separation:\nweb content is run in a separate process\nTrustworthiness:\napps can’t inject code into or access the contents of the web view\nConvenience for the user:\ncookies from Safari are available to the web content inside the session\nConnections\nURL Limits\nUsing\nMDM Configuration\n, server URLs can be pre-filled or \"hard-coded\" as the only allowed server URL. More Information\nFor more information, please refer to\nthe security information\n. Data\nSeparation\nSeparate directories are used for the data of every server connection. This provides the following benefits:\nA strong barrier against accidentally spilling data between different connections. All data relating to a connection can be deleted by deleting the respective directory. Encryption\nThe app uses the\nfilesystem encryption built into iOS\n. Using the\nCompleteUntilFirstUserAuthentication\nfile protection, data can’t be accessed after a restart until the device has been unlocked once by the user. Sync\nThe\nSync Strategies\n, planned to be used in the app, focus on preventing data loss locally and remotely. Secure Document View\nHTML and Microsoft Office document content is viewed using\nWKWebView\n, which renders the content in a separate process. Passcode\nUsers can set a Passcode to control access to the app. Find out more about this in the\nPasscode section of the Settings documentation\n."
        },
        {
            "cluster": 3,
            "chunk_content": "Redirects\nRedirects during login are not followed silently. SQL Injection\nTo protect against SQL injection attacks, parameters are never made part of the SQL statements themselves. Instead, placeholders are used and the parameters are subsequently bound to the SQL statements. For example, instead of running a query, such as\nSELECT * FROM users WHERE name='John Doe'\n, the query would be parameterised, such as:\nSELECT * FROM users WHERE name=:nameToSearchFor\n. Planned Logging Feature (not included in released yet!!) When logging information, parts of the log message can be tagged as private. If \"\nMask private data\n\" is enabled, under\nSettings\nLogging\n(it is by default), these parts will be - before the log message is written - either replaced with\n«private»\nor a trimmed version that doesn’t contain privacy-sensitive information. An example for the latter would be an\nNSError\nobject’s error message containing the names of the item it is about. If masked, only the error’s error domain and error code are written to the log, but not the error message."
        },
        {
            "cluster": 4,
            "chunk_content": "SSL/TLS Certificates\nWhen adding servers, users have the opportunity to view a detailed summary of the server’s SSL/TLS certificate before they are prompted for credentials or authentication via OAuth2. If a SSL/TLS certificate fails trust evaluation (e.g., because it’s self-signed or signed by an unknown Certificate Authority), the user is given an opportunity to:\nView a detailed summary of the certificate, by clicking on the notification. Trust the certificate, despite the warnings, by clicking\nApprove\n. Reject the certificate, by clicking\nCancel\n. In the case of redirects across several HTTPS servers, users are given the opportunity to review the certificates of all servers involved in addition to the redirects. MDM Configuration support is planned for:\nPre-approving specific certificates and certificates with specific public keys. Allowing only connections with specific certificates or certificates with specific public keys. Inspecting Certificate Details\nIf users want to inspect the details of an approved security certificate, from the Accounts list, swipe left on the account that you want to check the certificate of and click\nEdit\n. Then, click the row\nCertificate Details\n. You will then see the certificate’s details, starting with the validation status. Reproducibility\nThe build script that created the\nOpenSSL binaries\nused in the app is available in the SDK’s\nGitHub repository\nand can be used to reproduce the build result. OpenSSL is used solely to provide detailed summaries of SSL/TLS certificates - functionality that iOS is currently missing."
        }
    ]
}