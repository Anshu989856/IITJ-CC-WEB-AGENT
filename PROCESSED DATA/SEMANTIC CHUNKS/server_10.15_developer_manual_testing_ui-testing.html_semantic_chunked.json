{
    "file_name": "server_10.15_developer_manual_testing_ui-testing.html",
    "file_path": "./owncloud_docs\\server_10.15_developer_manual_testing_ui-testing.html",
    "chunks": [
        {
            "cluster": 2,
            "chunk_content": "Documentation for ownCloud (A Kiteworks Company)\nownCloud Server\nIntroduction\nAdmin Manual\nIntroduction\nUseful Pages\nFAQ\nGDPR\nInstallation\nDeployment Considerations\nDeployment Recommendations\nNFS\nSystem Requirements\nConfiguration Notes and Tips\nInstallation Options\nInstalling With Docker\nManual Installation on Linux\nDetailed Installation Guide\nDetailed Installation on Ubuntu (various versions)\nQuick Installation Guide\nOn Ubuntu 20.04\nOn Ubuntu 22.04\nLinux Package Manager\nLinux Package Manager Installation\nThe Installation Wizard\nTroubleshooting\nChanging Your ownCloud URL\nInstalling and Managing Apps\nSupported Apps\nMedia Viewer\nSELinux Configuration\nUsing Let’s Encrypt SSL Certificates\nUsing Letsencrypt\nApache\nConfiguration\nDatabase\nDatabase Conversion\nDatabase Configuration\nEncryption\nEncryption Configuration\nEncryption Configuration Quick Guide\nExternal Storage\nExternal Storage Configuration\nExternal Storage Authentication Mechanisms\nAmazonS3\nDropbox\nFTP\nGoogle\nLocal\nownCloud\nS3 as Primary\nSFTP\nSMB\nWebDAV\nFiles and Sharing\nBig File Upload Configuration\nManual File Locking\nDefault Files Configuration\nFederated Cloud Sharing Configuration\nFile Sharing Configuration\nFile Versioning\nTransactional File Locking\nPreview Configuration\nMimetypes\nManaging the Trashbin\nIntegration\nMicrosoft Teams\nownCloud App for Splunk\nGeneral Topics\nCode Signing\nImpersonate Users\nFull Text Search\nServer\nActivity Configuration\nBackground Jobs Configuration\nCaching Configuration\nConfig Sample PHP Parameters\nConfig Apps Sample PHP Parameters\nCustom Client Repos\nEmail Configuration\nExcluded Blacklisted Files\nExternal Sites\nHarden Server\nImport SSL Cert\nIndex PHP Less URLs\nOCC Command\nLanguage Configuration\nLegal Settings Configuration\nLogging\nLogging Configuration\nRequest Tracing\nReverse Proxy Configuration\nSecurity\nBrute-Force Protection\nOAuth2\nPassword policy\nSecurity Setup Warnings\nThe HSM (Hardware Security Module) Daemon\nDependency Notes\nServer Tuning\nThird Party PHP Configuration\nVirus Scanner Support\nUI Configuration\nUser\nUser Management\nUser Roles\nReset Admin Password\nReset User Password\nUser Auth FTP SMB IMAP\nUser Auth LDAP\nUser Auth Two-Factor\nUser Auth OAuth2\nUser Provisioning API\nCustom Groups App\nGuests App\nOpenID Connect (OIDC)\nLogin Policies\nMaintenance\nUpgrading\nManual Upgrade\nDatabase Upgrade\nUpgrading from Package\nUsing the Updater App\nUpgrading PHP\nMarketplace Apps\nBackup and Restore\nBackup\nRestore\nMaintenance Mode\nExport and Import Instance Data\nManually Moving Data Folders\nEncryption\nMigrating from User Key to Master Key Encryption\nMigrating to a Different Server\nMigrating to Kiteworks PCN\nEnterprise\nAuthentication\nEnterprise Only Authentication\nKerberos Authentication\nClients\nCustom Client Repos\nCollaboration\nCollabora Online / Secure View\nMicrosoft Office Online / WOPI Integration\nDocument Classification\nClassify Documents and Enforce Policies\nExternal Storage\nLDAP Home Connector Configuration\nSharepoint integration Configuration\nWindows Network Drive Configuration\nWND Configuration Quick Guide\nFile Management\nFile Tagging\nFile Lifecycle Management\nFirewall\nFile Firewall\nInstallation\nInstalling & Upgrading ownCloud Enterprise Edition\nOracle DB Setup & Configuration\nLogging\nAuditing\nReporting\nMetrics\nGenerate a Config Report\nSecurity\nRansomware Protection\nUser Management\nShibboleth Integration\nSAML 2.0 Based SSO\nTroubleshooting\nGeneral Troubleshooting\nPath and Filename Length Limitations\nRetrieve Log Files and Configuration Settings\nRemove Non-Existent Background Jobs\nFound a Mistake? Developer Manual\nIntroduction\nGeneral Contributor Guidelines\nCommunity Code of Conduct\nCoding Style & General Guidelines\nDebugging\nPerformance Considerations\nSecurity Guidelines\nBackporting\nHelp and Communication\nDeveloping ownCloud Core\nIntroduction\nSetup Your Development Environment\nApplication Configuration\nTheming\nTranslation\nCode Standards Compliance\nTesting\nownCloud Test Pilots\nDrone Testing\nUnit Testing\nAcceptance Tests\nUser Interface Testing\nAvailable APIs\nThe External API\nThe Provisioning API\nOCS\nThe OCS Notifications API (v1)\nThe OCS REST API\nThe OCS Recipient API\nThe OCS Share API\nThe OCS TOTP Validation API\nThe OCS User Sync API\nNotify Public Link By Email\nThe Roles API\nWebDAV APIs\nThe Comments API\nThe Custom Groups Management API\nThe Files Versions API\nThe Meta API\nThe Search API\nThe Tags API\nThe Trash Bin API\nThe Public Files API\nApplication Development\nFundamental Concepts\nApplication Metadata\nThe Classloader\nConfiguration\nRouting\nControllers\nTemplates\nJavaScript\nCSS\nMiddleware\nDatabase Connectivity\nBackground Jobs\nLogging\nTesting\nThe DI Container\nFilesystem\nRESTful API\nHooks\nPublishing in the ownCloud Marketplace\nChangelog\nMarket App\nAdvanced Concepts\nCustom Filesystem Caches\nCustom Storage Backends\nNotifications\nStorage Backends\nExternal Storage Backends\nTranslation\nTwo-Factor Providers\nUser Management\nCode Signing\nTutorial\nMinimum Requirements\nThe Request Life Cycle\nThe Core Application Files\nRoutes and Controllers\nDatabase Connectivity\nCreate Template Content\nCreate a Navigation Menu\nAdd JavaScript and CSS\nWiring it Up\nApply the Finishing Touches\nAdd a RESTful API\nWriting Tests\nMobile Development\nAndroid\nLibrary Installation\nExamples\niOS\nLibrary Installation\nExamples\nBugtracker\nCode Reviews\nBug Triaging\nFound a Mistake? ownCloud Server UI\nIntroduction\nThe WebUI\nWeb Interface\nNavigating the WebUI\nPersonal Settings\nGeneral\nStorage\nSharing\nSecurity\nCustom Groups\nFiles\nAccess WebDAV\nSharing Files\nSearch & Full Text Search\nTagging Files\nComments\nVersion Control\nEncrypting Files\nManaging Deleted Files\nLarge File Uploads\nManual File Locking\nFile Lifecycle Management\nPublic Link Shares\nFederated Cloud Sharing\nManaging Connected Browsers and Devices\nOnline Collaboration\nStorage Quotas\nExternal Storage\nConnecting to SharePoint\nDesktop Mobile Sync\nApps\nActivity\nCalendar\nContacts\nMarket\nMedia Viewer App\nIntegration\nMicrosoft Teams\nSynchronization Clients\nSync iOS\nSync KDE\nSync OSX\nSync Thunderbird\nTroubleshooting\nFound a Mistake? ownCloud Server\n10.15\nDesktop App\nnext\n5.3\n5.2\nInfinite Scale Documentation\nnext\n7.1\n7.0\nMobile App for Android\nnext\n4.5\n4.4\nMobile App for iOS\nnext\n12.4\n12.3\nownCloud Main Page\nownCloud Server\nnext\n10.15\n10.14\nownCloud Web User Interfaces\nnext\nownCloud Server\nDeveloper Manual\nDeveloping ownCloud Core\nTesting\nUser Interface Testing\nnext\n10.15\n10.14\nEdit this Page\nUser Interface Testing\nTable of Contents\nRequirements\nOverview\nSet Up Test\nRunning UI Tests using IPv6\nRunning UI Tests for One Feature\nRunning UI Tests for an App\nSkipping Tests\nKnown Issues\nRequirements\nownCloud >= 10.0. Make sure you have a running instance of ownCloud\nsetup completely\n. No self-signed SSL certificates. Acceptance Tests\nAvailable APIs\nAbout ownCloud\nThe Secure Collaboration Platform\nNews\nPrivacy statement\nImprint\nResources\nFAQ\nHelp\nSecurity\nChangelog\nGet started\nInteract\nRocket.Chat\nForum\nContribute\nCustomer support\n© Copyright 2011-2025, The ownCloud developers."
        },
        {
            "cluster": 1,
            "chunk_content": "Default language set to\nen\n(in\nconfig/config.php\nset\n'default_language' ⇒ 'en',\n). An admin user called\nadmin\nwith the password\nadmin\n. Testing utils (running\nmake\nin your terminal from the\nwebroot\ndirectory will install them). You will also need\nInBucket\n. Elapsed run-time on a local developer system is very dependent on the IO as well as CPU performance. By running these in terminal windows, it is simple to press\nctrl-C\nto stop them when you are finished. Set the following environment variables:\nEMAIL_HOST=localhost\n(so that the tests know how to deliver mails)\nTEST_SERVER_URL\n(The URL of your webserver)\nTEST_SERVER_FED_URL\n(The alternative URL of your webserver for federation share tests -\noptional\n)\nBROWSER\n(Any one of\nchrome\n,\nfirefox\n,\ninternet explorer\nor\nMicrosoftEdge\n. And connect to\nlocalhost\n. Running UI Tests using IPv6\nThe test system must have (at least locally) functioning IPv6:\nworking loopback address ::1\na\nreal\nroutable IPv6 address (not just a link-local address)\nIf you have a server set up that listens on both IPv4 and IPv6 (e.g. localhost on 127.0.0.1 and ::1) then the UI tests will access the server via whichever protocol your operating system prefers. If there are tests that specifically specify IPv4 or IPv6, then those will choose a suitable local address to come from so that they access the server using the required IP version. version 3.12.0 or newer. Place the Selenium standalone server jar file and the web driver(s) somewhere in the same folder. Download version 2.53.2 of the Selenium web driver\n."
        },
        {
            "cluster": 3,
            "chunk_content": "The testing app installed and enabled. Overview\nTests are divided into suites, enabling each suite to test some logical portion of the functionality and for the total elapsed run-time of a single suite to be reasonable (up to about 30 minutes on drone). Smaller apps may have all tests in a single suite. Each suite consists of a number of features. Each feature is described\nin a\n*.feature\nfile. There are a number of scenarios in each feature\nfile. Each scenario has a number of scenario steps that define the steps\ntaken to do the test. It will take many hours on a typical development system. If you run any test scenarios that need an email service (to test password reset etc."
        },
        {
            "cluster": 4,
            "chunk_content": "Docker CE Installed\nDocker Post-install\ndone to put your developer account in the docker group so you can run Docker without\nsudo\nDocker subnet enabled for any firewall that may be active such as,\nufw\n. The example below shows how to update UFW’s firewall rules to allow the\n172.17.0.0/16\nDocker subnet:\nsudo ufw status\nsudo ufw allow from 172.17.0.0/16\nDocker containers pulled. It is recommended to use\nstandalone-chrome-debug\nwhich allows seeing the browser live. The latest\nstandalone-chrome-*\ncontainers have an\nissue\n. So make sure to pull the specific chrome container versions listed below. Pull any or all of these Docker containers:\ndocker pull selenium/standalone-chrome:3.141.59-oxygen\ndocker pull selenium/standalone-chrome-debug:3.141.59-oxygen\ndocker pull selenium/standalone-firefox\ndocker pull selenium/standalone-firefox-debug\ndocker pull inbucket/inbucket\nA\nvnc\nviewer installed (in order to view the browser action as the UI tests run). For example:\nsudo apt install tigervnc-viewer\nTo run the\nSelenium server\nlocally (not in Docker) see the notes at the end. Set Up Test\nStart the Selenium Docker container in a terminal:\ndocker run -p 4445:4444 -p 5900:5900 -v /dev/shm:/dev/shm selenium/standalone-chrome-debug\nPorts on the Selenium Docker IP address are mapped to\nlocalhost\nso they can be accessed by the tests and the\nvnc\nviewer. Start the InBucket Docker container in another terminal:\ndocker run -p 2500:2500 -p 9000:9000 inbucket/inbucket\nPorts on the InBucket docker IP address are mapped to\nlocalhost\nso they can be accessed by the tests. Defaults to\nchrome\n)\nBROWSER_VERSION\n(version of the browser you want to use -\noptional\n)\ne.g., to test an instance running on the Docker subnet with Chrome do:\nexport EMAIL_HOST=localhost\nexport TEST_SERVER_URL=http://172.17.0.1:8080/owncloud-core\nexport TEST_SERVER_FED_URL=http://172.17.0.1:8180/owncloud-core\nexport BROWSER=chrome\nIf your ownCloud install is running locally on Apache, then it should already be available on the Docker subnet at\n172.17.0.1\nTo run the federation Sharing tests:\nInstall another instance of ownCloud with its own separate database, code, data directory and URL\nInstall and enable the testing app\nMake sure you have configured HTTPS with valid certificates on both servers URLs\nImport SSL certificates\n(or do not offer HTTPS). The browser for the tests runs inside the Selenium docker container. View it by running the\nvnc\nviewer:\nvncviewer\n. The VNC password of the docker container is\nsecret\n. Docker is now the recommended way, but local Selenium is also possible:\nSelenium standalone server\ne.g. ), then you need to run the InBucket Docker container."
        },
        {
            "cluster": 0,
            "chunk_content": "Run a suite of tests:\nmake test-acceptance-webui BEHAT_SUITE=webUILogin\nThe names of suites are found in the\ntests/acceptance/config/behat.yml\nfile, and start with\nwebUI\n. Because not everyone will have functional IPv6 on their test system yet, tests that specifically require IPv6 are tagged\n@skip @ipv6\n. To run those tests, follow the section below on running skipped tests and specify\n--tags @ipv6\n. Running UI Tests for One Feature\nYou can run the UI tests for just a single feature by specifying the\nfeature file:\nmake test-acceptance-webui BEHAT_FEATURE=tests/acceptance/features/webUITrashbin/trashbinDelete.feature\nTo run just a single scenario within a feature, specify the line number\nof the scenario:\nmake test-acceptance-webui BEHAT_FEATURE=tests/acceptance/features/webUITrashbin/trashbinDelete.feature<linenumber>\nRunning UI Tests for an App\nWith the app installed, run the UI tests for the app from the app root folder:\ncd apps/files_texteditor\n../../tests/acceptance/run.sh --suite webUITextEditor\nRun UI the tests for just a single feature of the app by specifying\nthe feature file:\ncd apps/files_texteditor\n../../tests/acceptance/run.sh tests/acceptance/features/webUITextEditor/editTextFiles.feature\nSkipping Tests\nIf a UI test is known to fail because of an existing bug, then it is\nleft in the test set\nbut\nis skipped by default. Skip a test by tagging\nit\n@skip\nand then put another tag with text that describes the reason\nit is skipped. e.g.,:\n@skip @trashbin-restore-problem-issue-1234\nScenario: restore a single file from the trashbin\nSkipped tests are listed at the end of a default UI test run. You can locally run the skipped test(s). Run all skipped tests for a suite with:\nmake test-acceptance-webui BEHAT_SUITE=webUITrashbin BEHAT_FILTER_TAGS=@skip\nOr run just a particular test by using its unique tag:\nmake test-acceptance-webui BEHAT_SUITE=webUITrashbin BEHAT_FILTER_TAGS=@trashbin-restore-problem-issue-1234\nWhen fixing the bug, remove these skip tags in the PR along with the bug\nfix code. Additional Command Options\nRunning all test suites in a single run is not recommended. However, you may run all UI tests with:\nmake test-acceptance-webui\nBy default, any test scenarios that fail are automatically rerun once. This minimizes transient failures caused by browser and Selenium driver timing issues. When developing tests it can be convenient to override this behavior. To not rerun failed test scenarios:\nmake test-acceptance-webui NORERUN=true BEHAT_SUITE=webUILogin\nLocal Selenium Setup\nYou may optionally run the Selenium server locally. Browser installed that you would like to test on (e.g. chrome)\nWeb driver for the browser\nthat you want to test. Start the Selenium server:\njava -jar selenium-server-standalone-3.12.0.jar \\\n-port 4445 \\\n-enablePassThrough false\nIn this configuration, the tests will continually open the browser-under-test on your local system. Known Issues\nTests that are known not to work in specific browsers are tagged e.g.,\n@skipOnFIREFOX47+\nor\n@skipOnINTERNETEXPLORER\nand will be skipped by the script automatically\n- The web driver for the current version of Firefox works differently to the old one. If you want to test FF < 56 you need to test on 47.0.2 and to use Selenium server 2.53.1 for it\nDownload and install version 47.0.2 of Firefox\n."
        }
    ]
}