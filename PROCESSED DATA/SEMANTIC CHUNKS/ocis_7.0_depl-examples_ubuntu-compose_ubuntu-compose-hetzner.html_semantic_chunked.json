{
    "file_name": "ocis_7.0_depl-examples_ubuntu-compose_ubuntu-compose-hetzner.html",
    "file_path": "./owncloud_docs\\ocis_7.0_depl-examples_ubuntu-compose_ubuntu-compose-hetzner.html",
    "chunks": [
        {
            "cluster": 3,
            "chunk_content": "Documentation for ownCloud (A Kiteworks Company)\nInfinite Scale Documentation\nIntroduction\nQuick Guide\nInfinite Scale Overview\nArchitecture and Concepts\nAvailability and Scalability\nSecurity Aspects\nDeployment\nPrerequisites\nStorage\nGeneral Storage Considerations\nNetwork File System\nS3\nPosixFS\nGeneral Information\nThe ocis init Command\nContainer Orchestration\nOffice Applications using WOPI\nSecuring oCIS\nUser Triggered GDPR Report\nServices\nGeneral Information\nDeployment Considerations\nEnvironment Variable Notes\nEnvironment Variables with Special Scope\nEnvironment Variable Changes\nRegistry\nCaching and Persistence\nGateways\nLogging\nPorts Used\nTransport Layer Security\nList of Services\nActivitylog\nAntivirus\nApp Provider\nApp Registry\nAudit\nAuth App\nAuth Basic\nAuth Bearer\nAuth Machine\nAuth Service\nClientlog\nCollaboration\nEventhistory\nFrontend\nGateway\nGraph\nGroups\nIDM\nInvitations\nIDP\nNATS\nNotifications\nOCDAV\nOCM\nOCS\nPolicies\nPostprocessing\nProxy\nSearch\nSettings\nSharing\nSSE\nStore\nStorage-Publiclink\nStorage-Shares\nStorage-System\nStorage-Users\nThumbnails\nUserlog\nUsers\nWeb\nWebDAV\nWebfinger\nWeb UI\nCustom Configuration\nCustom Theming\nMaintenance\nBackup and Restore\nBackup Considerations\nBackup\nRestore\nMaintenance Commands\nListing Space IDs\nListing User IDs\nMigration and Upgrades\nUpgrading Infinite Scale\nMonitoring\nPrometheus\nConfiguration Examples\nOffice Integration\nSearch\nDeployment Examples\nMinimal Bare Metal\nBare Metal with systemd\nContainer Setup\nUbuntu with Docker Compose\nLocal Production Setup\nDeployment on Hetzner\nSetup Federations\nScienceMesh Setup\nAdditional Information\nKnowledge Base\nInfinite Scale Documentation\n7.0\nDesktop App\nnext\n5.3\n5.2\nInfinite Scale Documentation\nnext\n7.1\n7.0\nMobile App for Android\nnext\n4.5\n4.4\nMobile App for iOS\nnext\n12.4\n12.3\nownCloud Main Page\nownCloud Server\nnext\n10.15\n10.14\nownCloud Web User Interfaces\nnext\nInfinite Scale Documentation\nDeployment Examples\nUbuntu with Docker Compose\nDeployment on Hetzner\nnext\n7.1\n7.0\nEdit this Page\nDeploy Infinite Scale on the Hetzner Cloud\nTable of Contents\nIntroduction\nRequirements\nHardware\nKnowledge Stack\nSoftware Stack\nVolumes\nOther Requirements\nDomain Names\nAccessing Infinite Scale\nLimitations\nPrepare Hetzner\nSSH Key\nLogin to Hetzner\nConfigure and Order the Desired Server\nAdd the IP Address to the Domains\nPrepare the Server\nInstall Required Software Packages\nDownload and Transfer the Example\nExtract the Example\nEdit the Configuration File\nCertificate Generation Process\nStart the Deployment\nSolving First Startup Issues\nStop the Deployment\nChange Settings\nFirst Time Login\nMonitor the Instance\nContainer\nLogs\nAdmin Password\nInitial Admin Password from Docker Log\nCommand Line Password Reset\nVolume Migration\nUpdating and Upgrading\nUpdating\nUpgrading\nCertificate Renewal\nIntroduction\nInstall Infinite Scale using Docker Compose on the Hetzner Cloud for production use. The aim of this guide is to be up and running as fast as possible using a deployment setup that includes\nInfinite Scale and web office applications for document collaboration\nfor home usage or small businesses. We therefore highly recommend reading the guide and not just trying to copy paste commands. With the decision to use\nHetzner\nfor our cloud deployment example, you can select from a variety of server locations which include many residing in the EU. Using a location inside the EU has a big\npositive\nimpact for your data in terms of General Data Protection Regulation (GDPR). With the minimum configuration available on Hetzner, you can start with about €4/month for a cloud driven Infinite Scale deployment. Note that prices are subject to changes and only intended for informational purposes. This guide references the latest production version of Infinite Scale. With this setup, each deployment only contains one instance of Infinite Scale. Requirements\nHardware\nThis guide describes an installation of Infinite Scale on the Hetzner Cloud using Ubuntu LTS as OS and docker compose. The underlying hardware can be configured according to the offers from Hetzner and your requirements. At minimum and at the time of writing, type\nCX22\n(2 shared Intel CPU’s with 4GB RAM) with 40GB embedded space can be selected. The selection can be changed after deployment if more resources are needed. Disk space\nAbout 2.4GB of disk space is needed for the default enabled services as you not only get Infinite Scale but also office packages for online collaboration and other required software to run this setup. Depending on Hetzner’s offers, an embedded diskspace of 40GB is included as part of the server. When the server is reset, the diskspace and ALL of its data is lost. Consider configuring independent volumes which can be sized according your needs but are at an extra monthly charge. Note that you can start with embedded disk space and reconfigure afterwards. See the\nVolumes\ndescription for an explanation of the term volume. Memory\nWe recommend at minimum 4-6GB of memory. If you plan to enable antivirus scanning, see the memory consideration section in the\nantivirus\nservice for additional memory requirements. Being able to order cloud resources on Hetzner. Being capable to order and configure external accessible domains. Being capable to define firewall rules available on Hetzner. Command line (bash) tools like:\nKey generation, ssh, actions on files, edit files etc. Maintaining a server and installing software packages etc. Software Stack\nFor the OS,\nUbuntu LTS 24.04\nhas been selected. While this is easy to handle and does not need extra configuration, you have dependencies that should be considered like sharing space, snapshotting, resetting, backup/restore, migration etc. Note that the term volume can be used in different contexts. For example,\nHetzner\nuses the term volume for a definable disk space that is independently provisioned and charged. Such a volume can then be connected to a docker volume to store data. eMail\nThe following data needs to be available to configure the Infinite Scale eMail setup, see the\nnotifications service\nfor more details. If all other email data is not available, Infinite Scale will start but no notifications can be sent. SMTP_SENDER\nAn eMail address that is used for sending Infinite Scale notification eMails like\nocis <noreply@yourdomain.com>\n. You have to deviate from the examples according to your environment. Accessing Infinite Scale\nInfinite Scale can be accessed from the internet and from your local network via a browser using the URL defined in\nOCIS_DOMAIN\n:\nLimitations\nData Location\nIf not otherwise setup and configured, all data is stored in volumes managed by docker in the same partition of the server. If you want to define your own volume paths, provide the paths and configure them in the\n.env\nfile accordingly. This is highly recommended for production environments and described in the\nHardware\nand\nVolumes\nsections above. User and User Access Management\nThe following embedded services are well suited for home use and smaller businesses though Infinite Scale can be configured to use external products which is relevant for bigger installations and not covered here. Infinite Scale has an embedded identity management (IDM\n[\n1\n]\n) which takes care of creating, storing, and managing user identity information. In addition, it also has an embedded identity provider (IDP\n[\n2\n]\n) to track and manage user identities, as well as the permissions and access levels associated with those identities. We recommend, if possible, using the\ned25519\nalgorithm and a passphrase for enhanced security. Then, you either can use an existing project, if you have one, or create a\nnew project\n. The volumes defined can then be used by\nconfiguring variables\nin the\n.env\nfile\nFirewall\n(add a rule for at minimum port 22, 80 and 443, can be added later on too)\n…​ there can be more items not listed here, configure them according your needs. The example commands below are based on a Linux client. This mainly effects the location the browser downloads to (\n~/Downloads\n). With the settings defined, Infinite Scale is able to send notifications to users. If the settings are not defined, Infinite Scale will start, but notifications can’t be sent. Additional options can be configured like web apps. This output helps finding configuration issues more easily. To do so visit\nLet’s Debug\n. If deleting volumes is necessary, deleting them selectively is the preferred method, see the section above for an example. See the section above for how to do so. If you have logged in successfully, you should see the following screen:\nCongratulations\n, you have successfully setup Infinite Scale with Web Office. Checkout the\nDesktop App\nor\nMobile Apps\nto sync files to/from clients. The Infinite Scale deployment will reboot automatically on a server reboot if the compose environment is not shut down by command. Among other topics described below, some basic\nmonitoring\ncommands and a short description to\nupdate\nInfinite Scale is provided. You can scroll through the log using the keyboard, see the\nless description\nfor more details. For example, this can be required to separate the container from its data or if a high data volume is expected. See additional documentation in the\nStart a Service After a Resource is Mounted\nif you want to use network mounts like NFS or iSCSI for the data directory. Prepare two directories which will provide the mount point for Infinite Scale\ndata\nand\nconfig\n. The example will use the local path\n/mnt/data\nand\nmnt/config\n, adapt according your environment. /mnt/data\nChange the ownership of the new source folders recursively. These images can be updated if there are new releases available, like for security or bug fixes. Follow the respective\nUpgrading Infinite Scale\nguide. This will update all images with any versions that might have changed. See the\nIDM\nservice for more details\n2\n. See the\nIDP\nservice for more details\n3\n. Derived from the\nocis_full\ndeveloper example\nLocal Production Setup\nScienceMesh Setup\nAbout ownCloud\nThe Secure Collaboration Platform\nNews\nPrivacy statement\nImprint\nResources\nFAQ\nHelp\nSecurity\nChangelog\nGet started\nInteract\nRocket.Chat\nForum\nContribute\nCustomer support\n© Copyright 2011-2025, The ownCloud developers."
        },
        {
            "cluster": 2,
            "chunk_content": "It also uses valid certificates from Letsencrypt. Knowledge Stack\nYou, as administrator, must have the following minimum knowledge stack. You must configure at minimum the\nSMTP_SENDER\n, even it is a dummy email like\nnoreply@example.com\n, the deployment will not startup otherwise. See the\n.env\nfile more details. Name the keys during the generation process accordingly to avoid overwriting existing ones. unzip\nThe package\nunzip\nmay not be present. If you are using macOS or Windows, the commands need to be adapted accordingly. With the next step, if you have already unzipped that file before or if you intend to update an existing extract with a new compose version downloaded, the\n.env\nfile will get\noverwritten\nwithout notice and you need to\nreconfigure\nthis deployment! TRAEFIK_ACME_MAIL\nAdd a valid response eMail address for Letsencrypt, see the note below. TRAEFIK_ACME_CASERVER\nSet the CAServer to staging, see the note below. These should be configured\nafter\nsuccessfully starting the deployment without issues. This eases finding any first startup issues that need to be solved first. These certifcates show that the process works but they cant be used in production. To do so, the environment variable\nTRAEFIK_ACME_CASERVER\nneeds to be set to LetsEncrypt’s\nStaging Environment\n, see the\n.env\nfile for the value to be set. By doing so, any restart after fixing issues will not count against the rate limit of LetsEncrypt. The\nTRAEFIK_ACME_MAIL\nmust be set to a valid eMail address you own. When certificate issuing is triggered, LetsEncrypt checks in the request for creating valid certificates, if the response eMail address is valid and continues if so. If not, it logs an error and self-signed certificates are being used, see see\nSolving First Startup Issues\n. Start the Deployment\n. Then, if any issues occur, you need to\nStop the Deployment\nand fix them before continuing with the next step. See\nSolving First Startup Issues\nfor a list of common issues,\nFinally, if there are no (more) issues which you can identify because\nFake LE intermediate X1\ncertificates have been generated (check the certificate issuer in the browser, Google for how to do so), you must\ndelete the\ncert-volume\nand set back the\nTRAEFIK_ACME_CASERVER\nenvironment variable to empty and startup the instance as described below. Check the logs\nSee\nMonitor the Instance\nfor more details on logging. First check the traefik logs for certificate issues, then other logs. See\nSolving First Startup Issues\nfor more details. If no issues are logged, traefik and LetsEncrypt were able to handle connectivity and domains. In case you have used staging certificates as suggested above,\nstop the deployment\n,\ndelete the\ncert-volume\nand start the deployment as described above. When done, recheck the\ntraefik logs\nand when all is fine, you can access your instance, see\nFirst Time Login\n. Solving First Startup Issues\nNote, see\nMonitor the Instance\nfor more details on logging. If any issues are logged by traefik on first startup with respect to LetsEncrypt like:\nCommon issues\n…​Contact emails @example.org are forbidden\n:\nThe environment variable\nTRAEFIK_ACME_MAIL\nneeds to be set to a valid eMail address you own. …​unable to generate a certificate for the domains…​\n,\nacme: error: 400\nand\nacme-challenge\n:\nCheck if the TCP ports 80/443 are open in the firewall configured. You can run a test\nduring running compose\nto test if traefik can be reached on those ports. For any issue fixed, before you bring up the instance again, some steps need to be taken. Change Settings\nTo change settings via the\n.env\nfile, the deployment\nmust be\nin the\ndown\nstate. If you have defined an initial password via the\n.env\nfile manually but forgot it, you need to follow one of the procedures described in the\nAdmin Password\nsection. As first entry, the initial admin password set during first startup is shown. If no password can be identified, you must reset the admin password via the command line as described below. Command Line Password Reset\nTo change the admin password from the command line, which you can do at any time, follow the guide described in\nPassword Reset for IDM Users\n. Stop the running instance. These commands will stop the deployment, update all images and start the deployment again. This works because the relevant\nxxx_TAG\nvariables in the\n.env\nfile are set to\nlatest\nby default while others have hardcoded versions set. Backup your existing deployment source/configuration and update the\ndeployment sources\n- if they have been changed, re-apply your configuration settings. Traefik takes care of the renewal process automatically. In case of a renewal issue, just restart the compose environment as Traefik checks certificate expiry on startup."
        },
        {
            "cluster": 0,
            "chunk_content": "Some decisions and steps need to be taken in order when setting up and configuring the server. Other Requirements\nFirewall\nBecause the server configured on Hetzner is exposed to the internet, we highly recommend configuring a firewall for security reasons. Hetzner provides a firewall configuration option right from the beginning, or is available after the server has been defined. The minimum configuration for the firewall is to allow TCP port 22, 80 and 443. We also recommend to allow\nICMP\nto be able to ping the server. Though possible, there is no need to configure an additional firewall inside the server. SMTP_HOST\nSMTP host to connect to. SMTP_PORT\nPort of the SMTP host to connect to. SMTP_USERNAME\nUsername for the SMTP host to connect to. SMTP_PASSWORD\nPassword for the SMTP host to connect to. SMTP_AUTHENTICATION\nAuthentication method for the SMTP communication. SMTP_SECURITY\nDefine using secure or insecure connections to the SMTP server. Prepare Hetzner\nSSH Key\nWe recommend using key-based authentication for ssh to access the configured server instead of using user and password. This is not only beneficial for security reasons but also because you can define the public key to be installed  during the initial server configuration. All OS\nFollow the\nssh-keygen guide\nto generate the required keys. The keys to use after generation are located in\n~/.ssh\n. Use the public key\nDuring server setup described in one of the sections below, you can use the content of the public key file to setup ssh authentication when asked. Alternatively, after the server has been created, you can copy the\npublic\nkey to the server by adding the\ncontents\nof the generated\n<key>.pub\nfile to the\n~/.ssh/authorized_keys\nfile manually. This step is necessary, because the server does not have password authentication which would be required to transfer the key by command. Additionally for Windows\nWhen using Putty to access your server, you must convert the\nprivate\nkey generated into Putty’s\nppk\nformat. Read the\nputtygen\nguide for how to do so. You need to specify on each login the ppk file generated via\nConnection\nSSH\nAuth\nConnections\nPrivate key file\n. When using the command shell with ssh to login or when using SCP, you must:\nHave the private/public keys in\nC:\\Users\\<user>\\.ssh\\\nAdd the following to\nC:\\Users\\<user>\\.ssh\\config\nHost <the-servers-public-url-or-ip>\nPreferredAuthentications publickey\nPasswordAuthentication no\nIdentityFile C:\\Users\\<user>\\.ssh\\<private-key-name>\nLogin to Hetzner\nIf you do not already have an account on\nHetzner\n, register for free and log in. Configure and Order the Desired Server\nAfter logging in, select from the selector on the top right the\ncloud\nitem. Select the project of choice and in the new screen click on\nAdd Server\n. In the following screen, you can define the\nServer Location\n(Choose one from the offered)\nImage\n(we use Ubuntu for this deployment)\nType\n(select any server type that matches your requirements)\nNetworking\n(we recommend using IPv4 as well as IPv6)\nSSH keys\n(here you enter the public key you created before)\nVolumes\n(add a volume if you want to separate the OS from the data)\nThis can be done at any time after the first setup but needs data migration. Name\n(define a name for the server)\nAfter you have finished, the server is built, and when done, you can click on it which opens a screen with more details and post-configuration options. Prepare the Server\nAs a standard regular task, you need to update packages, especially after first server login. In case install with:\napt install unzip\nDownload and Transfer the Example\nThe client to download the example is not the server you upload to. The server does not have a graphical interface (GUI) and therefore no browser. The client from where you download the example via a browser and upload it using\nscp\nmust have granted access to the server and have the\nscp\napp installed. Transfer the\n.zip\nfile created to the server by issuing the following command,\nreplace\nroot@182.83.2.94\nwith the username and address of the server according your setup:\nscp ~/Downloads/'owncloud ocis v7.0.0 deployments-examples_ocis_full.zip' root@182.83.2.94:/opt\nNote that the command differs a bit on Windows due to way how the home directory and the path separator is defined. Extract the Example\nLogin into the server and:\nCreate a subdirectory to save all compose files and folders. Only a few settings need to be configured:\nINSECURE\nComment this line because we are on an internet facing server. SMTP_xxx\nDefine these settings according to your eMail configuration. First Time Login\nNow, after preparations have finished, you can access your instance\nfrom any client\n. To do so, open your browser and enter the instance URL as you have defined it:\nocis.yourdomain.com\nWhich will show the following screen:\nFor the credentials, use:\nadmin\nas user and\nadmin\nfor the password,\nor the one you have defined manually during setup."
        },
        {
            "cluster": 4,
            "chunk_content": "Volumes\nVolumes are the location where docker stores data. In a nutshell, docker can handle two types of volumes:\nVolumes managed by docker:\nThese volumes are managed by docker and are located, if not otherwise defined, in the same partition where the OS is installed. External volumes:\nThese volumes are not managed by docker. You need to provide docker a mount point for the volume which can be a folder, partition, external storage etc. Open a shell on the server and issue the following command:\napt-get update && apt-get upgrade\nInstall Required Software Packages\nNote that we do not recommend using the Ubuntu embedded Docker installations but install and upgrade them manually to get the latest releases. Docker Engine\nFollow this guide to install\ndocker\n:\nInstall using the apt repository\n. Docker Compose\nFollow this guide to install\ndocker compose\n:\nInstall the Compose plugin\n. To download and extract the necessary deployment example\n[\n3\n]\n,\nopen a browser\nand enter the following URL:\nhttps://download-directory.github.io?url=https://github.com/owncloud/ocis/tree/v7.0.0/deployments/examples/ocis_full\nThe\n.zip\nfile will be downloaded into your local\nDownload\ndirectory. mkdir -p /opt/compose/ocis/ocis_full\nExtract the zip file into the directory by issuing the following command:\nunzip -d /opt/compose/ocis/ocis_full \\\n/opt/'owncloud ocis v7.0.0 deployments-examples_ocis_full.zip'\nWhen files have been extracted, list the directory with:\nls -la /opt/compose/ocis/ocis_full/\nThe listing should contain files and folders like the following:\nclamav.yml\ncloudimporter.yml\ncollabora.yml\nconfig\n...\nEdit the Configuration File\nChange into the\n/opt/compose/ocis/ocis_full\ndirectory and open the\n.env\nfile with an editor. OCIS_DOCKER_IMAGE\nCheck that the correct image type is selected (production). OCIS_CONFIG_DIR\nand\nOCIS_DATA_DIR\nIf you expect a higher amount of data in the instance, consider using own paths instead of using docker internal volumes. When the configuration is completed, you can optionally print the final assembled docker compose yml setup before starting it by using the following command. docker compose config\nCertificate Generation Process\nThe recommended process to generate live certificates is the following:\nFirst, let LetsEncrypt generate \"fake\" certificates. Start the Deployment\nWhen you have finished the configuration, you can start the deployment by issuing the following command:\ndocker compose up -d\nThis command will download all necessary containers and starts up the instance according your settings in the background (flag\n-d\n). This is because the certificate volume now holds invalid data:\nPost fixing the issue\nThe following actions need to be taken before starting the deployment again:\nShut down the deployment\ndocker compose down\nNote, do not use the\n-v\noption as it will delete ALL volumes. List the docker volumes\ndocker volume ls\nDelete the docker certs volume\ndocker volume rm ocis_full_certs\nStop the Deployment\nStopping the deployment is easy, just issue:\ndocker compose down --remove-orphans\nFor safety reasons,\ndo not\nadd the\n-v\n(volumes) flag to the command as that would delete all volumes including their data. See the\ndocker compose down\noptions\nfor more details. Monitor the Instance\nContainer\nTo get the state and the Container ID, issue one of the following commands:\nLong form, this command will print the required Container ID, among other data\ndocker ps -a\nShort form with only the Service name, State and Container ID, needs to be issued in\n/opt/compose/ocis/ocis_full\n:\ndocker compose ps -a --format \"table {{.Service}}\\t{{.State}}\\t{{.ID}}\"\nLogs\nIssue the following command to monitor a log:\nReplace the <container_id> according to the container for which you want to monitor the log. docker logs -f <container_id>\nAdmin Password\nInitial Admin Password from Docker Log\nIf the manually set\ninitial\nadmin password has been forgotten\nbefore\nit got changed, you can get it from the docker log. See the\nView container logs\nfor more details on docker logging. First you need to get the Infinite Scale\nCONTAINER ID\n:\ndocker compose ps -a --format \"table {{.Service}}\\t{{.State}}\\t{{.ID}}\"\nFrom the output, see an example below, note the container ID that matches\nocis\n:\nSERVICE         STATE     CONTAINER ID\ncollabora       running   a7f74dfbbec3\ncollaboration   running   ed4d086ddd06\nocis\nrunning\nb395d936c23a\ntika            running   08ae7b0c9c0e\ntraefik         running   5f0e1d03bcbf\nUse the container ID identified in the following command to read the Infinite Scale logs to get the initial admin password created, replace <CONTAINER ID> accordingly:\ndocker logs <CONTAINER ID> 2>&1 | less\nThe output prints the log from the beginning. Volume Migration\nThis section gives some guidance if you want to migrate the Infinite Scale docker internal volumes to docker volumes using a local path. For the following steps, the deployment\nmust be\nin the\nup\nstate, the containers must provide a container ID for copying. By doing so, the instance gets stopped but containers are not removed compared to when downing it:\ndocker compose stop\nGet the\nocis\ncontainer ID using one of the\nmaintenance - Container\ncommands. Copy both the content of the docker internal\nocis-config\nand\nocis-data\nvolume to their new local location by issuing the following commands, replace\n<CONTAINER ID>\naccordingly:\ndocker cp <CONTAINER ID>:/etc/ocis/. /mnt/config\ndocker cp <CONTAINER ID>:/var/lib/ocis/. This step is\nvery important\nbecause the user inside the container is\n1000\nand will mostly not match the user who copied the folders:\nchown -R 1000:1000 /mnt/config /mnt/data\nDown the compose instance by issuing:\ndocker compose down\nIn the\n.env\nfile, set the paths:\nOCIS_DATA_DIR=/mnt/data\nOCIS_CONFIG_DIR=/mnt/config\nBring the compose environment\nup\nwith:\ndocker compose up -d\nIf the containers come up without reporting issues, you have successfully moved your Infinite Scale docker internal volumes to local paths. Finally, you can remove the docker internal volumes for\nconfig\nand\ndata\n:\ndocker volume ls\ndocker volume rm ocis_full_ocis-config ocis_full_ocis-data\nUpdating and Upgrading\nUpdating\nInfinite Scale\nFollow these steps to update between production releases:\nFor Infinite Scale patch releases only! sudo docker compose down \\\nsudo docker compose pull \\\nsudo docker compose up -d --remove-orphans\nUpdate non-Infinite Scale Images\nSome images used do not have a particular release defined but use\nlatest\n. To do so, use the following commands:\nsudo docker compose pull \\\nsudo docker compose up -d --remove-orphans\nUpgrading\nFor all Infinite Scale major and minor releases including from former rolling to production\nStop the deployment with:\nsudo docker compose stop\nIf upgrading from rolling to production, change the\nOCIS_DOCKER_IMAGE\nenvironment variable from\nowncloud/ocis-rolling\nto\nowncloud/ocis\nin the\n.env\nfile. sudo docker compose pull\nStart the deployment. sudo docker compose up -d --remove-orphans\nCertificate Renewal\nThere is nothing special to do renewing certificates issued."
        },
        {
            "cluster": 1,
            "chunk_content": "Domain Name and Routing\nTo access Infinite Scale from the internet, you\nmust\n:\nOwn a domain name which will get multiple subdomains configured. You can also use a wildcard operator for the subdomains in the DNS configuration. In cases where you already use subdomains for other purposes, we recommend using a subdomain as entry point and add the wildcard operator there to allow different IP configurations. The IP address provided by Hetzner needs to be used for the (sub)domains configured. Note that you can use any domain provider of choice. Domain Names\nThis environment requires that multiple (sub)domain names are available. The (sub)domains must be configured to point to the server you configured. The same is true when using a wildcard configuration. For a wildcard setup on the DNS, three (sub)domains must be provided to configure the\n.env\nfile described in one of the next sections. The following (sub)domains are required at minimum, an example is printed for each, replace them according to your environment:\nOCIS_DOMAIN\nocis.yourdomain.com\nCOLLABORA_DOMAIN\ncollabora.yourdomain.com\nWOPISERVER_DOMAIN\nwopiserver.yourdomain.com\nNote that more (sub)domains may be required depending on your setup. In this screen, you also see the IP address of the server that is necessary to be used for the domains pointing to this server. Add the IP Address to the Domains\nAfter the server has been finally setup, you must use the IP address assigned to this server to configure DNS mapping at your DNS provider accordingly. If you have allowed ICMP requests in the firewall settings, you can then ping your server with one of the domain names defined. OCIS_DOMAIN\n,\nCOLLABORA_DOMAIN\nand\nWOPISERVER_DOMAIN\nSet the domain names as defined in\nDomain Names\n. When not defining your own domain names, internal evaluation only domain names with self-signed certificates are used automatically. …​DNS problem: NXDOMAIN looking up A for…​\nThis points to a DNS resolution problem. Check if the domains entered in the DNS and in the\n.env\nfile match. Note that when using wildcard domains on the DNS, the fixed part must match on both sides."
        }
    ]
}