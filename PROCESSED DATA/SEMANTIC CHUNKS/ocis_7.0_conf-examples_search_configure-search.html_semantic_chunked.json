{
    "file_name": "ocis_7.0_conf-examples_search_configure-search.html",
    "file_path": "./owncloud_docs\\ocis_7.0_conf-examples_search_configure-search.html",
    "chunks": [
        {
            "cluster": 3,
            "chunk_content": "Documentation for ownCloud (A Kiteworks Company)\nInfinite Scale Documentation\nIntroduction\nQuick Guide\nInfinite Scale Overview\nArchitecture and Concepts\nAvailability and Scalability\nSecurity Aspects\nDeployment\nPrerequisites\nStorage\nGeneral Storage Considerations\nNetwork File System\nS3\nPosixFS\nGeneral Information\nThe ocis init Command\nContainer Orchestration\nOffice Applications using WOPI\nSecuring oCIS\nUser Triggered GDPR Report\nServices\nGeneral Information\nDeployment Considerations\nEnvironment Variable Notes\nEnvironment Variables with Special Scope\nEnvironment Variable Changes\nRegistry\nCaching and Persistence\nGateways\nLogging\nPorts Used\nTransport Layer Security\nList of Services\nActivitylog\nAntivirus\nApp Provider\nApp Registry\nAudit\nAuth App\nAuth Basic\nAuth Bearer\nAuth Machine\nAuth Service\nClientlog\nCollaboration\nEventhistory\nFrontend\nGateway\nGraph\nGroups\nIDM\nInvitations\nIDP\nNATS\nNotifications\nOCDAV\nOCM\nOCS\nPolicies\nPostprocessing\nProxy\nSearch\nSettings\nSharing\nSSE\nStore\nStorage-Publiclink\nStorage-Shares\nStorage-System\nStorage-Users\nThumbnails\nUserlog\nUsers\nWeb\nWebDAV\nWebfinger\nWeb UI\nCustom Configuration\nCustom Theming\nMaintenance\nBackup and Restore\nBackup Considerations\nBackup\nRestore\nMaintenance Commands\nListing Space IDs\nListing User IDs\nMigration and Upgrades\nUpgrading Infinite Scale\nMonitoring\nPrometheus\nConfiguration Examples\nOffice Integration\nSearch\nDeployment Examples\nMinimal Bare Metal\nBare Metal with systemd\nContainer Setup\nUbuntu with Docker Compose\nLocal Production Setup\nDeployment on Hetzner\nSetup Federations\nScienceMesh Setup\nAdditional Information\nKnowledge Base\nInfinite Scale Documentation\n7.0\nDesktop App\nnext\n5.3\n5.2\nInfinite Scale Documentation\nnext\n7.1\n7.0\nMobile App for Android\nnext\n4.5\n4.4\nMobile App for iOS\nnext\n12.4\n12.3\nownCloud Main Page\nownCloud Server\nnext\n10.15\n10.14\nownCloud Web User Interfaces\nnext\nInfinite Scale Documentation\nConfiguration Examples\nSearch\nnext\n7.1\n7.0\nEdit this Page\nConfiguring Search\nTable of Contents\nIntroduction\nIndex Data\nGeneral Considerations\nSpace Requirements\nIndex Location and Scaling\nReloacting the Index\nIndex Maintenance\nRecreating an Index\nContent Extraction and Indexing\nTika Extractor\nPrerequisites\nConfigure Search using the Tika Extractor\nConfiguring Tika\nIntroduction\nThis document gives some guidance and notes about how to configure the search service. Depending on the configuration, space requirements can differ. Update your\nbackup\n/\nrestore\nplan and setup accordingly. Note that at the time of writing, containers are only available for the\namd64\nplatform. The\nDocker Compose Examples\n(ocis_wopi) is based on the container as it is ready to use. Container Based\nCheck that you have\ndocker\nand\ndocker compose\nand\ncontainer orchestration\ninstalled. Office Integration\nMinimal Bare Metal\nAbout ownCloud\nThe Secure Collaboration Platform\nNews\nPrivacy statement\nImprint\nResources\nFAQ\nHelp\nSecurity\nChangelog\nGet started\nInteract\nRocket.Chat\nForum\nContribute\nCustomer support\nÂ© Copyright 2011-2025, The ownCloud developers."
        },
        {
            "cluster": 4,
            "chunk_content": "Using search is a good way to find documents based on various criteria. The search service will return results for documents the searcher is eligible to access. Read the description of the\nsearch service\nfor more details. You can use basic search functionality without any configuration as it is preconfigured when using the default binary or container/orchestration deployment. Index Data\nWith basic search, only metadata is indexed. Indexing is a non-blocking operation. Consider separate hardware for the search service if response time is critical for your environment, as\nscaling\nis currently not possible for the search service. It has to extract every document and index it before it is available for searching. Currently this can only be done on a per space basis. Use the following command for this task:\nocis search index --space $SPACE_ID --user $USER_ID\nNote that not names but IDs are necessary and that the specified user ID needs access to the space to be indexed."
        },
        {
            "cluster": 1,
            "chunk_content": "Content can be searched when configuring Tika as the content extraction engine. Tika Extractor\nThough you can compile Tika manually on your system by following the\nGetting Started with Apache Tika\nguide (newer Tika versions may be available) or download a precompiled\nTika server\n, you can also run Tika using a\nTika container\n. Prerequisites\nThe following describes how to make Tika available for your environment. To see if the Tika container runs on your architecture, type:\ndocker run -d --name=tika --restart=always apache/tika\nIf you do not get a startup error message and accessing the container via\nhttp://your-server:9998\nreturns:\nyou can use the container. Finally, you can keep the image when planning to use a container based setup but remove the test container with\ndocker stop <ID>\nand\ndocker rm <ID>\nwhere ID is the container ID of Tika. Manual Based\nIf using the container does not work in your environment, you need to use the server installation of Tika which requires at least Java version 8 installed, check with\njava -version\nand install java if required. After downloading the\nTika server .jar\nfile, you can start the server with:\njava -jar tika-server-standard-2.7.0.jar\nIt is then accessible via\nhttp://your-server:9998\n. Check that the Tika server is automatically started like when using systemd - which is not covered here though you can take\nSetup the systemd Service\nfrom the\nSmall-Scale Deployment with systemd\nas setup reference. Configure Search using the Tika Extractor\nAs prerequisite, Tika needs to be accessible via\nhttp://your-server:9998\neither using the manual installation or via docker. You can decide to let Tika run on the same or a separate server from where the search service runs. The following configuration assumes that all Infinite Scale services including the search service and Tika run on the same hardware. These configuration parameters need to be set for the use of Tika:\nSEARCH_EXTRACTOR_TYPE=tika\nSEARCH_EXTRACTOR_TIKA_TIKA_URL=http://your-server:9998\nThe parameters can either be set via environment variables or as part of a\nyaml\nconfiguration file. Also see the\nDocker Compose Examples\n(ocis_wopi) for an example using container orchestration which also downloads the necessary Tika image. Configuring Tika\nThough in the majority of cases not necessary, components of Tika can be configured if required by providing an xml file with necessary data. For more information see\nConfiguring Tika\non their web page."
        },
        {
            "cluster": 2,
            "chunk_content": "Metadata:\nall data that\ndescribes\nthe file like\nName\n,\nSize\n,\nMimeType\n,\nTags\nand\nMtime\n. Content:\nall data that\nrelates to content\nof the file like\nwords\n,\ngeo data\n,\nexif data\netc. While indexing metadata is more or less instantaneous, extracting and indexing content can take some time depending on the setup and size of the document. The only valid answer to that question is - it depends and and you need to monitor it. Note that monitoring is not part of this document. Here are some notes to give some guidance:\nExtracting and indexing metadata consumes only little space compared to a content index, though it can be significant in an environment with a lot of files and limited filesystem space. When extracting and indexing content, the range for the consumed index can be - as rule of thumb - between 50-200% of saved documents containing text. Being conservative and taking a value of 150%, having 3TB of documents where text based data can be extracted, would require up to 4.5TB - only for the content index. As the OS, Infinite Scale and its data share the same filesystem, recovery can be a task taking considerable downtime. Content extraction can consume considerable CPU and memory ressources and naturally competes with all other services if running on the same hardware. Content Extraction and Indexing\nTo search for content, a content extraction engine needs to be installed and configured. Infinite scale currently supports\nApache Tika - a content analysis toolkit\nto extract content."
        },
        {
            "cluster": 0,
            "chunk_content": "It is triggered by various events (see\nState Changes which Trigger Indexing\n) and does not prevent file access by users. General Considerations\nSpace Requirements\nThere is no definitive answer as to how much space needs to be provided for storing the index or how it can be calculated. Having the index on the default location unmonitored, filling up the filesystem by the index can happen silently and make Infinite Scale unresponsive. Index Location and Scaling\nThe location of the search index can be customized and should be on a fast backend. The search index can be manually relocated and search reconfigured to use the new path. Reloacting the Index\nIf it becomes necessary to relocate the index, you need to:\nShut down the Infinite Scale instance. This is necessary to avoid changes that miss triggering an index update. Move the contents referenced via\nSEARCH_ENGINE_BLEVE_DATA_PATH\nto a new location. Define the new location in\nSEARCH_ENGINE_BLEVE_DATA_PATH\n. Restart the Infinite Scale instance. Index Maintenance\nRecreating an Index\nIt can happen that an index needs to be recreated."
        }
    ]
}