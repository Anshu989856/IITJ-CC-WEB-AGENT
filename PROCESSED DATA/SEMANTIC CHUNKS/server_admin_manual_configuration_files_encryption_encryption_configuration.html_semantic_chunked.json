{
    "file_name": "server_admin_manual_configuration_files_encryption_encryption_configuration.html",
    "file_path": "./owncloud_docs\\server_admin_manual_configuration_files_encryption_encryption_configuration.html",
    "chunks": [
        {
            "cluster": 3,
            "chunk_content": "Documentation for ownCloud (A Kiteworks Company)\nownCloud Server\nIntroduction\nAdmin Manual\nIntroduction\nUseful Pages\nFAQ\nGDPR\nInstallation\nDeployment Considerations\nDeployment Recommendations\nNFS\nSystem Requirements\nConfiguration Notes and Tips\nInstallation Options\nInstalling With Docker\nManual Installation on Linux\nDetailed Installation Guide\nDetailed Installation on Ubuntu (various versions)\nQuick Installation Guide\nOn Ubuntu 20.04\nOn Ubuntu 22.04\nLinux Package Manager\nLinux Package Manager Installation\nThe Installation Wizard\nTroubleshooting\nChanging Your ownCloud URL\nInstalling and Managing Apps\nSupported Apps\nMedia Viewer\nSELinux Configuration\nUsing Let’s Encrypt SSL Certificates\nUsing Letsencrypt\nApache\nConfiguration\nDatabase\nDatabase Conversion\nDatabase Configuration\nEncryption\nEncryption Configuration\nEncryption Configuration Quick Guide\nExternal Storage\nExternal Storage Configuration\nExternal Storage Authentication Mechanisms\nAmazonS3\nDropbox\nFTP\nGoogle\nLocal\nownCloud\nS3 as Primary\nSFTP\nSMB\nWebDAV\nFiles and Sharing\nBig File Upload Configuration\nManual File Locking\nDefault Files Configuration\nFederated Cloud Sharing Configuration\nFile Sharing Configuration\nFile Versioning\nTransactional File Locking\nPreview Configuration\nMimetypes\nManaging the Trashbin\nIntegration\nMicrosoft Teams\nownCloud App for Splunk\nGeneral Topics\nCode Signing\nImpersonate Users\nFull Text Search\nServer\nActivity Configuration\nBackground Jobs Configuration\nCaching Configuration\nConfig Sample PHP Parameters\nConfig Apps Sample PHP Parameters\nCustom Client Repos\nEmail Configuration\nExcluded Blacklisted Files\nExternal Sites\nHarden Server\nImport SSL Cert\nIndex PHP Less URLs\nOCC Command\nLanguage Configuration\nLegal Settings Configuration\nLogging\nLogging Configuration\nRequest Tracing\nReverse Proxy Configuration\nSecurity\nBrute-Force Protection\nOAuth2\nPassword policy\nSecurity Setup Warnings\nThe HSM (Hardware Security Module) Daemon\nDependency Notes\nServer Tuning\nThird Party PHP Configuration\nVirus Scanner Support\nUI Configuration\nUser\nUser Management\nUser Roles\nReset Admin Password\nReset User Password\nUser Auth FTP SMB IMAP\nUser Auth LDAP\nUser Auth Two-Factor\nUser Auth OAuth2\nUser Provisioning API\nCustom Groups App\nGuests App\nOpenID Connect (OIDC)\nLogin Policies\nMaintenance\nUpgrading\nManual Upgrade\nDatabase Upgrade\nUpgrading from Package\nUsing the Updater App\nUpgrading PHP\nMarketplace Apps\nBackup and Restore\nBackup\nRestore\nMaintenance Mode\nExport and Import Instance Data\nManually Moving Data Folders\nEncryption\nMigrating from User Key to Master Key Encryption\nMigrating to a Different Server\nMigrating to Kiteworks PCN\nEnterprise\nAuthentication\nEnterprise Only Authentication\nKerberos Authentication\nClients\nCustom Client Repos\nCollaboration\nCollabora Online / Secure View\nMicrosoft Office Online / WOPI Integration\nDocument Classification\nClassify Documents and Enforce Policies\nExternal Storage\nLDAP Home Connector Configuration\nSharepoint integration Configuration\nWindows Network Drive Configuration\nWND Configuration Quick Guide\nFile Management\nFile Tagging\nFile Lifecycle Management\nFirewall\nFile Firewall\nInstallation\nInstalling & Upgrading ownCloud Enterprise Edition\nOracle DB Setup & Configuration\nLogging\nAuditing\nReporting\nMetrics\nGenerate a Config Report\nSecurity\nRansomware Protection\nUser Management\nShibboleth Integration\nSAML 2.0 Based SSO\nTroubleshooting\nGeneral Troubleshooting\nPath and Filename Length Limitations\nRetrieve Log Files and Configuration Settings\nRemove Non-Existent Background Jobs\nFound a Mistake? ownCloud Server UI\nIntroduction\nThe WebUI\nWeb Interface\nNavigating the WebUI\nPersonal Settings\nGeneral\nStorage\nSharing\nSecurity\nCustom Groups\nFiles\nAccess WebDAV\nSharing Files\nSearch & Full Text Search\nTagging Files\nComments\nVersion Control\nEncrypting Files\nManaging Deleted Files\nLarge File Uploads\nManual File Locking\nFile Lifecycle Management\nPublic Link Shares\nFederated Cloud Sharing\nManaging Connected Browsers and Devices\nOnline Collaboration\nStorage Quotas\nExternal Storage\nConnecting to SharePoint\nDesktop Mobile Sync\nApps\nActivity\nCalendar\nContacts\nMarket\nMedia Viewer App\nIntegration\nMicrosoft Teams\nSynchronization Clients\nSync iOS\nSync KDE\nSync OSX\nSync Thunderbird\nTroubleshooting\nFound a Mistake? ownCloud Server\n10.15\nDesktop App\nnext\n5.3\n5.2\nInfinite Scale Documentation\nnext\n7.1\n7.0\nMobile App for Android\nnext\n4.5\n4.4\nMobile App for iOS\nnext\n12.4\n12.3\nownCloud Main Page\nownCloud Server\nnext\n10.15\n10.14\nownCloud Web User Interfaces\nnext\nownCloud Server\nAdmin Manual\nConfiguration\nEncryption\nEncryption Configuration\nnext\n10.15\n10.14\nEdit this Page\nEncryption Configuration\nTable of Contents\nIntroduction\nGeneral Notes\nLocation of Encryption Keys\nRules and Restrictions\nWhich Data Is Encrypted and When\nThe following data\nis\nencrypted:\nThe following is\nnever\nencrypted:\nWhen are files encrypted\nUsing a Hardware Security Module (HSM)\nEncryption Types\nBefore Enabling Encryption\nEnable the Encryption App\nEnable Encryption From the Command-Line\nEnable Encryption in the Web-UI\nBasic Configuration via the Web-UI\nMaster-Key-Based Encryption\nEnabling Master Key Based Encryption from the Command-Line\nView Current Encryption Status\nReplacing an Existing Master Key\nDecrypt Master-Key Encryption\nDisable Encryption\nView Current Encryption Status\nEnable Users' File Recovery Keys\nChanging the Recovery Key Password\nDecrypt User-Key Encryption\nDisable Encryption\nMove Key Location\nLDAP and Other External User Back-ends\nEncrypting External Mountpoints\nSharing Encrypted Files\nIntroduction\nThe primary purpose of the ownCloud server-side encryption is to protect users’ files when they’re located on remote storage sites, such as Dropbox and Google Drive, smoothly and seamlessly from within ownCloud. General Notes\nSince ownCloud 9.0, server-side encryption for local and remote storage can operate independently. This allows encrypting a remote storage independent of the home storage on the ownCloud server. Starting with ownCloud 9.0 we support Authenticated Encryption for all newly encrypted files. This will let ownCloud ignore new files not added via ownCloud. ownCloud’s server-side encryption encrypts files stored on the ownCloud server and files on remote storage sites that are connected to your ownCloud server. Encryption and decryption are performed on the ownCloud server. All files sent to remote storage will be encrypted by the ownCloud server and decrypted before serving them to you or any users that you shared them with. We recommend to update the ownCloud system to be able to use the benefits of reduced file sizes for new and rewritten files. Note that the encryption app version lower than 1.5.0 was delivered as part of the ownCloud system lower than 10.7. This is disabled by default, also see\nS3 Compatible Object Storage as Primary Storage Location\nWhen files on an external storage are encrypted in ownCloud, you cannot share them directly from the external storage services, but only through ownCloud sharing. This is because the key to decrypt the data\nnever\nleaves the ownCloud server. ownCloud’s server-side encryption generates a strong encryption key, which is unlocked by the user’s password. ownCloud transparently encrypts only the contents of files but not filenames and directory structures. Rules and Restrictions\nWhen encryption is enabled, all files are encrypted and decrypted by the ownCloud application and stored encrypted on your local or remote storage. An ownCloud admin and a storage admin will only see encrypted files when directly browsing backend storage. Encryption keys are stored only on the ownCloud server, eliminating exposure of your data to third-party storage providers. The encryption application does\nnot\nprotect your data if your ownCloud server is compromised, and it does not prevent ownCloud administrators from reading users’ files. If your ownCloud server is not\nconnected to any external storage services, it is better to use other encryption tools, such as file-level or whole-disk encryption. SSL terminates at the same time or before the web server on the ownCloud server. Consequently, all files are in an unencrypted state between the SSL connection termination and the ownCloud code that encrypts and decrypts them. For more information, read:\nHow ownCloud uses encryption to protect your data\n. Using a Hardware Security Module (HSM)\nWhen using a HSM, see the additional information provided at\nThe HSM (Hardware Security Module) Daemon (hsmdaemon)\nEncryption Types\nownCloud only provides the master key encryption type. User-Key encryption has been deprecated with\nownCloud release 10.7\n. Before Enabling Encryption\nPlan very carefully before enabling encryption, because it is not reversible via the ownCloud Web interface. Decrypt Master-Key Encryption\nYou must first put your ownCloud server into single-user mode to prevent any user activity until encryption is completed. Decrypt User-Key Encryption\nYou must first put your ownCloud server into single-user mode to prevent any user activity until encryption is completed. Note that the new folder is relative to your data directory:\nmkdir /var/www/owncloud/data/new_keys\nchown -R root:www-data /var/www/owncloud/data/new_keys\nchmod -R 0770 /var/www/owncloud/data/new_keys\nsudo -u www-data ./occ encryption:change-key-storage-root new_keys\nChange key storage root from default storage location to new_keys\nStart to move keys:\n4 [============================]\nKey storage root successfully changed to new_keys\nLDAP and Other External User Back-ends\nIf you use an external user back-end, such as an LDAP or Samba server, and you change a user’s password on that back-end, the user will be prompted to change their ownCloud login to match their next ownCloud login. Encryption\nEncryption Configuration Quick Guide\nAbout ownCloud\nThe Secure Collaboration Platform\nNews\nPrivacy statement\nImprint\nResources\nFAQ\nHelp\nSecurity\nChangelog\nGet started\nInteract\nRocket.Chat\nForum\nContribute\nCustomer support\n© Copyright 2011-2025, The ownCloud developers."
        },
        {
            "cluster": 4,
            "chunk_content": "Developer Manual\nIntroduction\nGeneral Contributor Guidelines\nCommunity Code of Conduct\nCoding Style & General Guidelines\nDebugging\nPerformance Considerations\nSecurity Guidelines\nBackporting\nHelp and Communication\nDeveloping ownCloud Core\nIntroduction\nSetup Your Development Environment\nApplication Configuration\nTheming\nTranslation\nCode Standards Compliance\nTesting\nownCloud Test Pilots\nDrone Testing\nUnit Testing\nAcceptance Tests\nUser Interface Testing\nAvailable APIs\nThe External API\nThe Provisioning API\nOCS\nThe OCS Notifications API (v1)\nThe OCS REST API\nThe OCS Recipient API\nThe OCS Share API\nThe OCS TOTP Validation API\nThe OCS User Sync API\nNotify Public Link By Email\nThe Roles API\nWebDAV APIs\nThe Comments API\nThe Custom Groups Management API\nThe Files Versions API\nThe Meta API\nThe Search API\nThe Tags API\nThe Trash Bin API\nThe Public Files API\nApplication Development\nFundamental Concepts\nApplication Metadata\nThe Classloader\nConfiguration\nRouting\nControllers\nTemplates\nJavaScript\nCSS\nMiddleware\nDatabase Connectivity\nBackground Jobs\nLogging\nTesting\nThe DI Container\nFilesystem\nRESTful API\nHooks\nPublishing in the ownCloud Marketplace\nChangelog\nMarket App\nAdvanced Concepts\nCustom Filesystem Caches\nCustom Storage Backends\nNotifications\nStorage Backends\nExternal Storage Backends\nTranslation\nTwo-Factor Providers\nUser Management\nCode Signing\nTutorial\nMinimum Requirements\nThe Request Life Cycle\nThe Core Application Files\nRoutes and Controllers\nDatabase Connectivity\nCreate Template Content\nCreate a Navigation Menu\nAdd JavaScript and CSS\nWiring it Up\nApply the Finishing Touches\nAdd a RESTful API\nWriting Tests\nMobile Development\nAndroid\nLibrary Installation\nExamples\niOS\nLibrary Installation\nExamples\nBugtracker\nCode Reviews\nBug Triaging\nFound a Mistake? For maximum security, make sure to configure external storage with\nCheck for changes\nNever\n. This way, a malicious external storage administrator cannot add new files to the storage without your knowledge. However, you may not use this setting\nif\nyour external storage is subject to legitimate external changes. Remember to take this into account when you are both provisioning storage and setting storage quotas. This means that admins need to calculate with higher disk space requirements on the backend. As a result, your users don’t need to track an extra password. All they need to do is log in as they normally would. You can move the keys to a different location. To do so, refer to the\nMove Key Location\nsection of the documentation. The latter protects your data on externally hosted storage. This is potentially exploitable by anyone with administrator access to your server. You can do this either on the command-line or in the Web-UI. Depending on the amount of existing data and the location, this operation can take a long time. This is only supported with the\nmaster key\n. This will generate a new key pair. It is\nnot\nplanned to move this to the next user login or a background job. If that was done, then login passwords would need to be stored in the database, which could be a security issue. Moving your keys outside of your data folder is not supported. The folder must already exist, be owned by and restricted to root and the webserver group. This example is for Ubuntu Linux. The user will need both their old and new passwords to do this. You must have external storage enabled on your Admin page, and enabled for your users. Please log-out and log-in again.\" Users who are trying to access the share will see a message advising them to ask the share owner to re-share the file with them. For individual shares, un-share and re-share the file. For group shares, share with any individuals who can’t access the share."
        },
        {
            "cluster": 2,
            "chunk_content": "See\nExploiting unauthenticated encryption mode\nfor more technical information about the impact. See the important information on the\nOpenSSL Version\nbefore you start configuring the encryption app. Encrypting files increases their size by an 8KB header plus 100 bytes per each 8KB block of the file. If you are\nrunning\nthe encryption app before version 1.5.0 or\nstarted\nwith an encryption app version before 1.5.0, BASE64 encoding was used and might still be used for old files if untouched since then. In these cases, old encrypted files increased their size by roughly 35%. User quotas are based on the\nunencrypted\nfile size —\nnot\nthe encrypted size. You\nCANNOT\nuse encryption for your\nprimary storage\nif the primary storage is an Amazon S3 compatible object storage. Location of Encryption Keys\nThe encryption keys are stored in the following directories:\nType\nDirectory\nDescription\nMaster Key\ndata/files_encryption/OC_DEFAULT_MODULE\nLocation of the master key necessary to decrypt files. User Key\n(Deprecated)\ndata/<USER>/files_encryption/keys/files\nLocation of the user key and share key per file necessary to decrypt files. You should regularly back up all encryption keys to prevent permanent data loss. This would require client-side encryption, which this application does not provide. Which Data Is Encrypted and When\nThe following data\nis\nencrypted:\nUsers'\nfiles\nin their home directory trees\nif enabled\nby the admin. Location:\ndata/<user>/files\n, see the:\nocc encryption command set\nExternal storage\nif enabled\neither by the user or by the admin\nThe following is\nnever\nencrypted:\nFile names or folder structures\nExisting files in the trash bin\nExisting files in Versions\nImage thumbnails\nPreviews from the Files app\nThe search index from the full text search app\nThird-party app data\nNote that there may be other not mentioned files that are not encrypted. When are files encrypted\nIf not otherwise decided by the admin, only new and changed files after enabling encryption are encrypted. There is only one key (or key pair) and all files are encrypted using that key pair. Existing installations using this method must\nmigrate\nto master key encryption. If you lose your encryption keys, your files are\nnot\nrecoverable. Always have backups of your encryption keys stored in a safe location, and consider enabling all recovery options. You can’t manage encryption without access to the command line. In this case,\ndon’t enable encryption\n! Enable the Encryption App\nBefore you can use encryption, you must enable the encryption app. Enable Encryption in the Web-UI\nTo enable encryption in the Web-UI:\nGo to\nSettings\nAdmin\nApps\nand click on\nShow disabled apps\nWhen the disabled apps are rendered, click\nEnable\nunder\n\"Default encryption module\"\n. Basic Configuration via the Web-UI\nYou can do basic configuration of encryption via the Web-UI, but it is recommended to use the CLI. Go to\nSettings\nAdmin\nEncryption\n, and enable\nEnable server-side encryption\n. Select the\n\"Default encryption module\"\n, either\n\"Master Key\"\n(recommended) or\n\"User-key\"\n(depreciated). When User-specific encryption is enabled, users must log out and log back in to trigger the automatic personal encryption key generation process. As a result when enabling it, there should be no data to encrypt. In case it’s being enabled after the installation and there are files which are unencrypted,\nencrypt-all\ncan be used to encrypt them. The command is\nencryption:recreate-master-key\n. It replaces an existing master key with a new one and encrypts the files with the new key. Make sure you have backups of all encryption keys, including those for all your users if user key encryption was selected. This grants the admin the right to decrypt their data for recovery purposes. Make sure you have backups of all the encryption keys, including those for all users. If you don’t have access to at least one of these then there is no way to decrypt all files. In this case, \"decrypt all\" will decrypt all files of all users. Encrypting External Mountpoints\nYou and your users can encrypt individual external mount points. Encryption settings can be configured in the mount options for an external storage mount; see\nMount Options\n. Sharing Encrypted Files\nAfter encryption is enabled, your users must also log out and log back in to generate their personal encryption keys. They will see a yellow warning banner that says \"Encryption App is enabled, but your keys are not initialized. Also, share owners may need to re-share files after encryption is enabled. This updates the encryption, and then the share owner can remove the individual shares."
        },
        {
            "cluster": 1,
            "chunk_content": "An admin can encrypt existing files post enabling encryption via an\nocc encryption command\n. You have more options via the\nocc command’s encryption options\n. If your ownCloud installation is on a hosted environment and you don’t have access to the command line, you won’t be able to run\nocc commands\n. Enable Encryption From the Command-Line\nTo enable the encryption app, run the following command:\nsudo -u www-data ./occ app:enable encryption\nsudo -u www-data ./occ encryption:enable\nIf the encryption app is successfully enabled, you should see the following confirmations:\nencryption enabled\nEncryption enabled\nDefault module: OC_DEFAULT_MODULE\nMaster key successfully enabled. Master-Key-Based Encryption\nEnabling Master Key Based Encryption from the Command-Line\nTo be safe and avoid any issues on a running instance, put your server in single user mode with the following command:\nsudo -u www-data ./occ maintenance:singleuser --on\nEnabling encryption via the command line involves several commands. If not already done, enable the default encryption module app with the following command:\nsudo -u www-data ./occ app:enable encryption\nThen enable encryption, using the following command:\nsudo -u www-data ./occ encryption:enable\nFinally, encrypt all data, using the following command:\nsudo -u www-data ./occ encryption:encrypt-all --yes\nThis command is not typically required as the master key is often enabled at installation time. Now you can turn off the single user mode:\nsudo -u www-data ./occ maintenance:singleuser --off\nView Current Encryption Status\nGet the current encryption status and the loaded encryption module:\nsudo -u www-data ./occ encryption:status\nReplacing an Existing Master Key\nIf the master key needs replacement, for example because it has been compromised, an occ command is available. sudo -u www-data ./occ maintenance:singleuser --on\nSingle user mode is currently enabled\nDecrypt all user data files, or optionally a single user:\nsudo -u www-data ./occ encryption:decrypt-all [username]\nDisable Encryption\nTo disable encryption, put your ownCloud server into single-user mode, and then disable your encryption module with these commands:\nsudo -u www-data ./occ maintenance:singleuser --on\nsudo -u www-data ./occ encryption:disable\nTake it out of single-user mode when you are finished, by using the following command:\nsudo -u www-data ./occ maintenance:singleuser --off\nYou may only disable encryption by using the\nocc Encryption Commands\n. View Current Encryption Status\nGet the current encryption status and the loaded encryption module:\nsudo -u www-data ./occ encryption:status\nEnable Users' File Recovery Keys\nIf users encrypt their files and lose their ownCloud password, they lose access to their encrypted files as the files will be unrecoverable. sudo -u www-data ./occ maintenance:singleuser --on\nSingle user mode is currently enabled\nDisable Encryption\nYou may disable encryption only with\nocc\n. Next, put your ownCloud server into single-user mode, and then disable your encryption module with this command:\nsudo -u www-data ./occ maintenance:singleuser --on\nsudo -u www-data ./occ encryption:disable\nEncryption cannot be disabled without the user’s password or\nfile recovery key\n. Then, take it out of single-user mode when you are finished with this\ncommand:\nsudo -u www-data ./occ maintenance:singleuser --off\nIt is possible to disable encryption with the file recovery key\nif\nevery user has enabled it. Move Key Location\nView current location of keys:\nsudo -u www-data ./occ encryption:show-key-storage-root\nCurrent key storage root:  default storage location (data/)\nYou can move the keys to another folder inside your data directory."
        },
        {
            "cluster": 0,
            "chunk_content": "It is not possible to reset a user’s password using the standard reset process if the user’s files are encrypted. In such a case, you’ll see a yellow banner warning:\nPlease provide an admin recovery password; otherwise, all user data will be lost. To avoid all this, create a Recovery Key. To do so, go to the Encryption section of your Admin page and set a recovery key password. You then need to ask your users to opt-in to the Recovery Key. For the users to do this, they need to go to the\nPersonal\npage and enable the recovery key. If they do\nnot\ndo this, the Recovery Key won’t work for them. Users who have enabled password recovery you can provide with a new password and recovery access to their encrypted files by supplying the Recovery Key on their page. You may change your recovery key password. Sharing a recovery key with a user group is\nnot\nsupported. Changing the Recovery Key Password\nIf you have misplaced your recovery key password and need to replace it, here’s what you need to do:\nDelete the recovery key from both\ndata/owncloud_private_keys\nand\ndata/public-keys\n. Edit your database table\noc_appconfig\nand remove the rows with the config keys\nrecoveryKeyId\nand\nrecoveryAdminEnabled\nfor the appid\nfiles_encryption\n. Login as admin and activate the recovery key again with a new password. All users who used the original recovery key will need to disable it and enable it again. This deletes the old recovery share keys from their files and encrypts their files with the new recovery key. You can only change the recovery key password if you know the original. This is by design as only admins who know the recovery key password should be able to change it. Otherwise admins could hijack the recovery key from each other. Replacing the recovery key will mean that all users will lose the possibility to recover their files until they have applied the new recovery key. If you have enabled the recovery key, then you can change a user’s password in the ownCloud Users panel to match their back-end password, and then — of course — notify the user and give them their new password."
        }
    ]
}